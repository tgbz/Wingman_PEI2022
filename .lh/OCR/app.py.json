{
    "sourceFile": "OCR/app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1674212565572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674344244436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n app = Flask(__name__)\r\n app.config[\"DEBUG\"] = True\r\n \r\n \r\n-\r\n CORS(app, resources={r\"/api/*\": {\"origins\": \"*\"}})\r\n app.config['CORS_HEADERS'] = 'Content-Type'\r\n \r\n \r\n@@ -24,39 +23,35 @@\n @app.route('/upload', methods=['POST'])\r\n @cross_origin(origin='*', headers=['Content-Type'])\r\n def upload_image():\r\n     if request.method == \"POST\":\r\n-        file = request.files['file']\r\n-        zipFilePath = fileDir + file.filename\r\n-        try:\r\n-            file.save(zipFilePath)\r\n-        except FileNotFoundError:\r\n-            #app.logger.warning(\"Folder not on path, creating\")\r\n+\r\n+        if not os.path.exists(fileDir):\r\n             os.makedirs(fileDir)\r\n-            file.save(zipFilePath)\r\n-        #try:\r\n-        unpack_archive(zipFilePath, fileDir)\r\n-        os.remove(fileDir+file.filename)\r\n \r\n-        files = os.listdir(fileDir)\r\n-        files = [fileDir+f for f in files if os.path.isfile(fileDir+f)]\r\n-        print(files)\r\n-        #app.logger.info(\"Parsing image...\")\r\n-        text = tp.parseImage(files)\r\n-        #app.logger.info(\"Done!\\nCleaning up...\")\r\n+        print(\"Request received...\")\r\n+        fpaths = []\r\n+        fnames = []\r\n+        for k in request.files.keys():\r\n+            file = request.files[k]\r\n+            filePath = fileDir + file.filename\r\n+            fnames.append(file.filename)\r\n+            file.save(filePath)\r\n+            fpaths.append(filePath)\r\n \r\n-        for f in files:\r\n+        print(\"Parsing images (\" + ', '.join(str(x) for x in fnames)+')...')\r\n+        text = tp.parseImage(fpaths)\r\n+        print(\"Done!\\nCleaning up...\")\r\n+\r\n+        for f in fpaths:\r\n             os.remove(f)\r\n         #os.rmdir(fileDir)\r\n \r\n-        #app.logger.info(\"Done!\")\r\n-        return jsonify(text)\r\n-        #except:\r\n-         #   return jsonify(\"Error parsing text\")\r\n+        print(\"Done!\")\r\n+        ret = jsonify(text)\r\n+        print(text)\r\n+        print(ret)\r\n+        return ret\r\n \r\n-        \r\n+\r\n if __name__ == \"__main__\":\r\n-    app.run(debug=False, port=5000, host=\"0.0.0.0\")\r\n-    \r\n-\r\n-\r\n-\r\n+    app.run(debug=False, port=5003, host=\"0.0.0.0\")\r\n"
                },
                {
                    "date": 1674836350905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,23 +13,17 @@\n \r\n CORS(app, resources={r\"/api/*\": {\"origins\": \"*\"}})\r\n app.config['CORS_HEADERS'] = 'Content-Type'\r\n \r\n-\r\n-@app.route('/', methods=['GET'])\r\n-def home():\r\n-    return \"<h1>Olá<h1/>\"\r\n-\r\n-\r\n @app.route('/upload', methods=['POST'])\r\n @cross_origin(origin='*', headers=['Content-Type'])\r\n def upload_image():\r\n     if request.method == \"POST\":\r\n+        print(\"Request received...\")\r\n \r\n         if not os.path.exists(fileDir):\r\n             os.makedirs(fileDir)\r\n \r\n-        print(\"Request received...\")\r\n         fpaths = []\r\n         fnames = []\r\n         for k in request.files.keys():\r\n             file = request.files[k]\r\n@@ -46,12 +40,9 @@\n             os.remove(f)\r\n         #os.rmdir(fileDir)\r\n \r\n         print(\"Done!\")\r\n-        ret = jsonify(text)\r\n-        print(text)\r\n-        print(ret)\r\n-        return ret\r\n+        return jsonify(text)\r\n \r\n \r\n if __name__ == \"__main__\":\r\n     app.run(debug=False, port=5003, host=\"0.0.0.0\")\r\n"
                }
            ],
            "date": 1674212565572,
            "name": "Commit-0",
            "content": "from flask import Flask, request, jsonify\r\nfrom flask_cors import CORS, cross_origin\r\nfrom shutil import unpack_archive\r\nimport os\r\nimport textparse as tp\r\n\r\n\r\nfileDir = os.getcwd() + \"/receivedFiles/\"\r\n\r\napp = Flask(__name__)\r\napp.config[\"DEBUG\"] = True\r\n\r\n\r\n\r\nCORS(app, resources={r\"/api/*\": {\"origins\": \"*\"}})\r\napp.config['CORS_HEADERS'] = 'Content-Type'\r\n\r\n\r\n@app.route('/', methods=['GET'])\r\ndef home():\r\n    return \"<h1>Olá<h1/>\"\r\n\r\n\r\n@app.route('/upload', methods=['POST'])\r\n@cross_origin(origin='*', headers=['Content-Type'])\r\ndef upload_image():\r\n    if request.method == \"POST\":\r\n        file = request.files['file']\r\n        zipFilePath = fileDir + file.filename\r\n        try:\r\n            file.save(zipFilePath)\r\n        except FileNotFoundError:\r\n            #app.logger.warning(\"Folder not on path, creating\")\r\n            os.makedirs(fileDir)\r\n            file.save(zipFilePath)\r\n        #try:\r\n        unpack_archive(zipFilePath, fileDir)\r\n        os.remove(fileDir+file.filename)\r\n\r\n        files = os.listdir(fileDir)\r\n        files = [fileDir+f for f in files if os.path.isfile(fileDir+f)]\r\n        print(files)\r\n        #app.logger.info(\"Parsing image...\")\r\n        text = tp.parseImage(files)\r\n        #app.logger.info(\"Done!\\nCleaning up...\")\r\n\r\n        for f in files:\r\n            os.remove(f)\r\n        #os.rmdir(fileDir)\r\n\r\n        #app.logger.info(\"Done!\")\r\n        return jsonify(text)\r\n        #except:\r\n         #   return jsonify(\"Error parsing text\")\r\n\r\n        \r\nif __name__ == \"__main__\":\r\n    app.run(debug=False, port=5000, host=\"0.0.0.0\")\r\n    \r\n\r\n\r\n\r\n"
        }
    ]
}