{
    "sourceFile": "app/src/components/ProductInputModal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1675079330127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675079422062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,44 @@\n     setIdcategory(generalCategory)\r\n     \r\n   }\r\n \r\n+\r\n+  function showErrorField(text){\r\n+\r\n+    let textToWrite = ''\r\n+    if (text === 'description') {\r\n+      if (!description) {\r\n+        textToWrite = 'Campo obrigatório'\r\n+      }\r\n+    }\r\n+    if (text === 'value') {\r\n+      if (!value) {\r\n+        textToWrite = 'Campo obrigatório'\r\n+      }\r\n+      if (isNaN(value)) {\r\n+        textToWrite = 'Valor inválido'\r\n+      }\r\n+    }\r\n+    if (text === 'quantity') {\r\n+      if (!quantity) {\r\n+        textToWrite = 'Campo obrigatório'\r\n+      }\r\n+      if (isNaN(quantity)) {\r\n+        textToWrite = 'Valor inválido'\r\n+      }\r\n+    }\r\n+\r\n+  \r\n+\r\n+\r\n+    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n+    <Text style={styles.textTag}>{text}</Text>\r\n+    <Text style={styles.error}> {textToWrite}</Text>\r\n+  </Text>)\r\n+  }\r\n+\r\n+\r\n   function validateForm() {\r\n     let isValid = true\r\n     if (description === '') {\r\n       setValidDescription(false)\r\n"
                },
                {
                    "date": 1675079463208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,11 +187,15 @@\n                 onEdit({ description, value, quantity, idcategory });\r\n                 handleClean();\r\n                 setIsCategoryModalVisible(false);\r\n               } else {\r\n+\r\n+                if (validateForm()) {\r\n+\r\n                 onSave({ description, value, quantity, idcategory });\r\n                 handleClean();\r\n                 setIsCategoryModalVisible(false);\r\n+                }\r\n               }\r\n                 }}\r\n           >\r\n         \r\n"
                },
                {
                    "date": 1675079568838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,18 +127,18 @@\n     <Modal animationType=\"slide\" transparent={false} visible={isModalVisible}>\r\n       <View style={styles.modalContainer}>\r\n         <Text style={styles.modalTitle}>Adicionar Produto</Text>\r\n         <View style={styles.inputContainer}>\r\n-          <Text style={styles.textTag}>Produto:</Text>\r\n+          {validDescription ? (<Text style={styles.textTag}>Produto:</Text>): showErrorField('description')}\r\n           <CustomInput \r\n               placeholder={'Queijo'}\r\n               value={description}\r\n               setValue={setDescription}\r\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          <Text style={styles.textTag}>Valor:</Text>\r\n+          {validValue ? (<Text style={styles.textTag}>Valor:</Text>): showErrorField('value')}\r\n           <CustomInput\r\n               placeholder={'10.50'}\r\n               value={value}\r\n               setValue={setValue}\r\n@@ -147,9 +147,9 @@\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          <Text style={styles.textTag}>Quantidade:</Text>\r\n+          {validQuantity ? (<Text style={styles.textTag}>Quantidade:</Text>) : showErrorField('quantity')}\r\n           \r\n             <View\r\n                   style={[styles.buttonStyle, { width: width * 0.8}]}\r\n                 >\r\n"
                },
                {
                    "date": 1675079660522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,22 +58,22 @@\n \r\n   function showErrorField(text){\r\n \r\n     let textToWrite = ''\r\n-    if (text === 'description') {\r\n+    if (text === 'Produto') {\r\n       if (!description) {\r\n         textToWrite = 'Campo obrigatório'\r\n       }\r\n     }\r\n-    if (text === 'value') {\r\n+    if (text === 'Valor') {\r\n       if (!value) {\r\n         textToWrite = 'Campo obrigatório'\r\n       }\r\n       if (isNaN(value)) {\r\n         textToWrite = 'Valor inválido'\r\n       }\r\n     }\r\n-    if (text === 'quantity') {\r\n+    if (text === 'Quantidade') {\r\n       if (!quantity) {\r\n         textToWrite = 'Campo obrigatório'\r\n       }\r\n       if (isNaN(quantity)) {\r\n@@ -127,18 +127,18 @@\n     <Modal animationType=\"slide\" transparent={false} visible={isModalVisible}>\r\n       <View style={styles.modalContainer}>\r\n         <Text style={styles.modalTitle}>Adicionar Produto</Text>\r\n         <View style={styles.inputContainer}>\r\n-          {validDescription ? (<Text style={styles.textTag}>Produto:</Text>): showErrorField('description')}\r\n+          {validDescription ? (<Text style={styles.textTag}>Produto:</Text>): showErrorField('Produto')}\r\n           <CustomInput \r\n               placeholder={'Queijo'}\r\n               value={description}\r\n               setValue={setDescription}\r\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          {validValue ? (<Text style={styles.textTag}>Valor:</Text>): showErrorField('value')}\r\n+          {validValue ? (<Text style={styles.textTag}>Valor:</Text>): showErrorField('Valor')}\r\n           <CustomInput\r\n               placeholder={'10.50'}\r\n               value={value}\r\n               setValue={setValue}\r\n@@ -147,9 +147,9 @@\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          {validQuantity ? (<Text style={styles.textTag}>Quantidade:</Text>) : showErrorField('quantity')}\r\n+          {validQuantity ? (<Text style={styles.textTag}>Quantidade:</Text>) : showErrorField('Quantidade')}\r\n           \r\n             <View\r\n                   style={[styles.buttonStyle, { width: width * 0.8}]}\r\n                 >\r\n"
                },
                {
                    "date": 1675079700592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,8 +294,14 @@\n     alignSelf: 'center',\r\n     borderColor: COLORS.wingblue,\r\n     alignItems: 'center',\r\n   },\r\n+  error : {\r\n+    color: \"red\",\r\n+    fontFamily: \"SoraMedium\",\r\n+    fontSize: SIZES.small,\r\n+    alignSelf: \"flex-start\",\r\n+  },\r\n   textButton: {\r\n     flex: 0.95,\r\n     fontFamily: 'SoraRegular',\r\n     fontSize: SIZES.font,\r\n"
                },
                {
                    "date": 1675079785912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,25 +60,25 @@\n \r\n     let textToWrite = ''\r\n     if (text === 'Produto') {\r\n       if (!description) {\r\n-        textToWrite = 'Campo obrigatório'\r\n+        textToWrite = '* Campo obrigatório'\r\n       }\r\n     }\r\n     if (text === 'Valor') {\r\n       if (!value) {\r\n-        textToWrite = 'Campo obrigatório'\r\n+        textToWrite = '* Campo obrigatório'\r\n       }\r\n       if (isNaN(value)) {\r\n-        textToWrite = 'Valor inválido'\r\n+        textToWrite = '* Valor inválido'\r\n       }\r\n     }\r\n     if (text === 'Quantidade') {\r\n       if (!quantity) {\r\n-        textToWrite = 'Campo obrigatório'\r\n+        textToWrite = '* Campo obrigatório'\r\n       }\r\n       if (isNaN(quantity)) {\r\n-        textToWrite = 'Valor inválido'\r\n+        textToWrite = '* Valor inválido'\r\n       }\r\n     }\r\n \r\n   \r\n@@ -127,18 +127,18 @@\n     <Modal animationType=\"slide\" transparent={false} visible={isModalVisible}>\r\n       <View style={styles.modalContainer}>\r\n         <Text style={styles.modalTitle}>Adicionar Produto</Text>\r\n         <View style={styles.inputContainer}>\r\n-          {validDescription ? (<Text style={styles.textTag}>Produto:</Text>): showErrorField('Produto')}\r\n+          {validDescription ? (<Text style={styles.textTag}>Produto</Text>): showErrorField('Produto')}\r\n           <CustomInput \r\n               placeholder={'Queijo'}\r\n               value={description}\r\n               setValue={setDescription}\r\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          {validValue ? (<Text style={styles.textTag}>Valor:</Text>): showErrorField('Valor')}\r\n+          {validValue ? (<Text style={styles.textTag}>Valor</Text>): showErrorField('Valor')}\r\n           <CustomInput\r\n               placeholder={'10.50'}\r\n               value={value}\r\n               setValue={setValue}\r\n@@ -147,9 +147,9 @@\n               widthScale={0.8}\r\n             />\r\n \r\n \r\n-          {validQuantity ? (<Text style={styles.textTag}>Quantidade:</Text>) : showErrorField('Quantidade')}\r\n+          {validQuantity ? (<Text style={styles.textTag}>Quantidade</Text>) : showErrorField('Quantidade')}\r\n           \r\n             <View\r\n                   style={[styles.buttonStyle, { width: width * 0.8}]}\r\n                 >\r\n"
                },
                {
                    "date": 1675081520504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,11 +183,14 @@\n           <TouchableOpacity\r\n             style={styles.saveButton}\r\n             onPress={() => {\r\n               if (isEdit) {\r\n+                if (validateForm())\r\n+                {\r\n                 onEdit({ description, value, quantity, idcategory });\r\n                 handleClean();\r\n                 setIsCategoryModalVisible(false);\r\n+                }\r\n               } else {\r\n \r\n                 if (validateForm()) {\r\n \r\n"
                }
            ],
            "date": 1675079330127,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react'\r\nimport { SIZES,COLORS } from '../constants'\r\nimport {useWindowDimensions, Modal, Text, TextInput, TouchableOpacity, StyleSheet, View } from 'react-native'\r\nimport ChooseCategoryModal from './ChooseCategoryModal'\r\nimport CustomInput from './CustomInput'\r\nconst ProductInputModal = ({ isModalVisible,generalCategory,getCategoryIcon,getCategoryName, onSave, onCancel,productToEdit,onEdit,isEdit}) => {\r\n  const [description, setDescription] = useState('')\r\n  const [value, setValue] = useState('')\r\n  const [quantity, setQuantity] = useState(1)\r\n  const [idcategory, setIdcategory] = useState(generalCategory)\r\n  const [isCategoryModalVisible, setIsCategoryModalVisible] = useState(false);\r\n  const [validDescription, setValidDescription] = useState(true)\r\n  const [validValue, setValidValue] = useState(true)\r\n  const [validQuantity, setValidQuantity] = useState(true)\r\n  \r\n\r\n  // // TODO: Validate form data\r\n\r\n\r\n  // if setProductToEdit is not { } then set the fields to the productToEdit values\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      console.log('productToEdit',productToEdit.description)\r\n      setDescription(productToEdit.description)\r\n      setValue(productToEdit.value)\r\n      setQuantity(productToEdit.quantity)\r\n      setIdcategory(productToEdit.idcategory)\r\n    }else{\r\n      console.log('Not editing')\r\n      setDescription('')\r\n      setValue('')\r\n      setQuantity(1)\r\n      setIdcategory(generalCategory)\r\n    }\r\n  }, [isEdit])\r\n\r\n\r\n\r\n    const { width } = useWindowDimensions()\r\n  // USE EFFECT TO SET THE CATEGORY TO GENERAL CATEGORY\r\n  useEffect(() => {\r\n    setIdcategory(generalCategory)\r\n  }, [generalCategory])\r\n\r\n  const handleCategorySelection = (selectedCategory) => {\r\n    setIdcategory(selectedCategory);\r\n    setIsCategoryModalVisible(false);\r\n  }\r\n\r\n  const handleClean = () => {\r\n    setDescription('')\r\n    setValue('')\r\n    setQuantity(1)\r\n    setIdcategory(generalCategory)\r\n    \r\n  }\r\n\r\n  function validateForm() {\r\n    let isValid = true\r\n    if (description === '') {\r\n      setValidDescription(false)\r\n      isValid = false\r\n    }\r\n    if (value === '') {\r\n      setValidValue(false)\r\n      isValid = false\r\n    }\r\n    if (quantity === '') {\r\n      setValidQuantity(false)\r\n      isValid = false\r\n    }\r\n\r\n    //if value is not a number\r\n    if (isNaN(value)) {\r\n      setValidValue(false)\r\n      isValid = false\r\n    }\r\n    //if quantity is not a number\r\n    if (isNaN(quantity)) {\r\n      setValidQuantity(false)\r\n      isValid = false\r\n    }\r\n    return isValid\r\n  }\r\n\r\n  // ismodalvisibleCT function\r\n\r\n\r\n\r\n  return (\r\n    <Modal animationType=\"slide\" transparent={false} visible={isModalVisible}>\r\n      <View style={styles.modalContainer}>\r\n        <Text style={styles.modalTitle}>Adicionar Produto</Text>\r\n        <View style={styles.inputContainer}>\r\n          <Text style={styles.textTag}>Produto:</Text>\r\n          <CustomInput \r\n              placeholder={'Queijo'}\r\n              value={description}\r\n              setValue={setDescription}\r\n              widthScale={0.8}\r\n            />\r\n\r\n\r\n          <Text style={styles.textTag}>Valor:</Text>\r\n          <CustomInput\r\n              placeholder={'10.50'}\r\n              value={value}\r\n              setValue={setValue}\r\n              keyboardType=\"numeric\"\r\n              icondescriptionEntry=\"euro\"\r\n              widthScale={0.8}\r\n            />\r\n\r\n\r\n          <Text style={styles.textTag}>Quantidade:</Text>\r\n          \r\n            <View\r\n                  style={[styles.buttonStyle, { width: width * 0.8}]}\r\n                >\r\n                  <TextInput\r\n                    placeholder=\"2\"\r\n                    onChangeText={setQuantity}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {quantity}\r\n                  </TextInput>\r\n                </View>\r\n\r\n\r\n          <Text style={styles.textTag}>Categoria:</Text>\r\n          <TouchableOpacity\r\n            style={[styles.categoryButton, { width: width * 0.8 }]}\r\n            onPress={() => setIsCategoryModalVisible(true)}\r\n          >\r\n            {getCategoryIcon(idcategory)}\r\n            <Text style={styles.textCategory}>{getCategoryName(idcategory)}</Text>\r\n          </TouchableOpacity>\r\n          <ChooseCategoryModal\r\n                  isModalVisibleCT={isCategoryModalVisible}\r\n                  setisModalVisibleCT={setIsCategoryModalVisible}\r\n                  setSelectedCategory={handleCategorySelection}\r\n                />\r\n\r\n        </View>\r\n\r\n        <View style={styles.buttonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.saveButton}\r\n            onPress={() => {\r\n              if (isEdit) {\r\n                onEdit({ description, value, quantity, idcategory });\r\n                handleClean();\r\n                setIsCategoryModalVisible(false);\r\n              } else {\r\n                onSave({ description, value, quantity, idcategory });\r\n                handleClean();\r\n                setIsCategoryModalVisible(false);\r\n              }\r\n                }}\r\n          >\r\n        \r\n            <Text style={styles.saveButtonText}>Save</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.cancelButton} onPress={() => {\r\n            handleClean();\r\n            onCancel();}}>\r\n            <Text style={styles.cancelButtonText}>Cancel</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  modalContainer: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    //justifyContent: 'center',\r\n    marginTop: 50,\r\n    backgroundColor: 'white',\r\n    padding: 30,\r\n  },\r\n  modalTitle: {\r\n    marginBottom: 10,\r\n\r\n    fontFamily: 'SoraBold',\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue,\r\n  },\r\n  inputContainer: {\r\n    marginHorizontal: 40,\r\n    marginTop: 20,\r\n    marginBottom: 40,\r\n  },\r\n    buttonContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    },\r\n  cancelButton: {\r\n    backgroundColor: 'red',\r\n    padding: 10,\r\n    margin: 10,\r\n    borderRadius: 5,\r\n    paddingHorizontal: 20,\r\n  },\r\n  cancelButtonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  },\r\n  saveButton: {\r\n    backgroundColor: COLORS.wingDarkBlue,\r\n    padding: 10,\r\n    paddingHorizontal: 20,\r\n    margin: 10,\r\n    borderRadius: 5,\r\n\r\n    },\r\n    saveButtonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    },\r\n  textTag: {\r\n    fontFamily: 'SoraBold',\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue,\r\n  },\r\n  categoryButton: {\r\n    //backgroundColor: \"#eceffa\",\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 15,\r\n    marginVertical: 12,\r\n    borderWidth: 1,\r\n    flexDirection: 'row',\r\n    alignSelf: 'center',\r\n    borderColor: COLORS.wingblue,\r\n    alignItems: 'center',\r\n  },\r\n  textCategory: {\r\n    fontFamily: 'SoraRegular',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.wingDarkBlue,\r\n    marginStart: 10,\r\n  },\r\n  buttonStyle: {\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 15,\r\n    marginVertical: 12,\r\n    borderWidth: 1,\r\n    flexDirection: 'row',\r\n    alignSelf: 'center',\r\n    borderColor: COLORS.wingblue,\r\n    alignItems: 'center',\r\n  },\r\n  textButton: {\r\n    flex: 0.95,\r\n    fontFamily: 'SoraRegular',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.wingDarkBlue,\r\n    marginStart: 10,\r\n  }\r\n})\r\n\r\nexport default ProductInputModal\r\n"
        }
    ]
}