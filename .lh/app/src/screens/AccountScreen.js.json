{
    "sourceFile": "app/src/screens/AccountScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1674925425297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1674925425297,
            "name": "Commit-0",
            "content": "import {\r\n  View,\r\n  Text,\r\n  Image,\r\n  useWindowDimensions,\r\n  SafeAreaView,\r\n  Button,\r\n  StyleSheet,\r\n  Platform,\r\n  StatusBar\r\n} from 'react-native'\r\nimport {Card, Title, Paragraph } from 'react-native-paper'\r\nimport React from 'react'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { COLORS, SHADOWS, SIZES } from '../constants'\r\nimport { useState, useEffect } from 'react'\r\nimport { serverURL } from '../config/hosts'\r\nimport { AntDesign } from '@expo/vector-icons'\r\nimport { CustomBackButton, CustomButton } from '../components'\r\nimport * as ImagePicker from 'expo-image-picker'\r\nimport { useRoute } from '@react-navigation/native'\r\n\r\nexport default function AccountScreen({ navigation }) {\r\n  const { height } = useWindowDimensions()\r\n  const [token, setToken] = useState('')\r\n\r\n  useEffect(() => {\r\n    AsyncStorage.getItem('userToken')\r\n      .then((userToken) => setToken(JSON.parse(userToken)))\r\n      .catch((err) => console.log(err))\r\n  }, [])\r\n\r\n  const [data, setData] = useState([])\r\n  const fetchData = async (token) => {\r\n    //console.log(serverURL + '/users/userProfile/' + token.id)\r\n  }\r\n  // request data from server\r\n  useEffect(() => {\r\n    console.log('Entered useEffect: ' + JSON.stringify(token) + '\\n')\r\n    if (token.id) {\r\n      fetchData(token)\r\n    }\r\n  }, [token])\r\n\r\n  // set account that is sent from AccountsScreen\r\n  const route = useRoute()\r\n  const [conta, setConta] = useState({})\r\n  useEffect(() => {\r\n    if (route.params) {\r\n      console.log('Entered useEffect route.params: ' + JSON.stringify(route.params) + '\\n')\r\n      setConta(route.params.conta)\r\n    }\r\n  }, [route.params])\r\n\r\n  // delete account -> deletes from db and refreshes data\r\n  const handleDeleteConta = async (id) => {\r\n    console.log('Entered handleDeleteConta: ' + id + '\\n')\r\n    const resp = await fetch(`${serverURL}/bank/deleteBankAccount/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    }).then((resp) => {\r\n      if (resp.status === 200) {\r\n        alert('Conta eliminada com sucesso!')\r\n        navigation.navigate('Accounts',{refresh: true})\r\n      } else {\r\n        alert('Erro ao eliminar conta!')\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <SafeAreaView style={styles.root}>\r\n      {/* CONTAINER COM OUTLINE */}\r\n      <View style={styles.infoContainer}>\r\n          <View style={styles.infoLine}>\r\n              <Text style={styles.textTag}>Titular</Text>\r\n              <Text style={styles.textInfo}>{conta.titular}</Text>\r\n          </View>\r\n\r\n          <View style={styles.infoLine}>\r\n            <Text style={styles.textTag}>Contribuinte</Text>\r\n            <Text style={styles.textInfo}>{conta.NIF}</Text>\r\n          </View>\r\n          \r\n          <View style={styles.infoLine}>\r\n            <Text style={styles.textTag}>IBAN</Text>\r\n            <Text style={styles.textInfo}>{conta.IBAN}</Text>\r\n          </View>\r\n      </View>\r\n      <View style={styles.containerBTN}>\r\n        <CustomButton\r\n          onPress={() => handleDeleteConta(conta.idBankAccounts)}\r\n          text=\"Eliminar Conta\"\r\n          type=\"TERTIARY\"\r\n          widthScale={0.8}\r\n        ></CustomButton>\r\n      </View>\r\n    </SafeAreaView>\r\n  )\r\n  //)\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: COLORS.white,\r\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0 \r\n   \r\n  },\r\n  containerBTN: {\r\n    // Put the buttons if there is space 2mm after infoContainer\r\n    // center the buttons\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  container: {\r\n    // outline in wing blue, rounded corners\r\n    backgroundColor: COLORS.wingblue,\r\n    borderRadius: 10,\r\n    margin: 10,\r\n    padding: 20\r\n    },\r\n    Maincontainer: {\r\n        marginHorizontal: 30,\r\n        marginTop: \"7%\",\r\n        marginBottom: \"7%\"\r\n    },\r\n    iconStyle: {\r\n        position: 'absolute',\r\n        //  center horizontally\r\n        right: 30,\r\n        top: 32\r\n    },\r\n    infoContainer: {\r\n      marginHorizontal: 40,\r\n      marginTop: \"7%\",\r\n      marginBottom: \"7%\",\r\n    },\r\n    infoLine: {\r\n      // space between two lines of info\r\n      marginBottom: 15,\r\n    },\r\n    col1: {\r\n      width: '40%',\r\n      marginBottom: 10,\r\n    },\r\n    col2: {\r\n      width: '60%',\r\n      marginBottom: 10,\r\n    },\r\n    textTag: {\r\n      fontFamily: 'SoraBold',\r\n      fontSize: SIZES.medium,\r\n      color: COLORS.wingDarkBlue,\r\n      marginBottom: 5,\r\n    },\r\n    textInfo: {\r\n      //marginLeft: 30,\r\n      fontFamily: 'SoraLight',\r\n      fontSize: SIZES.medium,\r\n    },\r\n    \r\n})\r\n"
        }
    ]
}