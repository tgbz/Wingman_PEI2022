{
    "sourceFile": "app/src/screens/AddExpenseScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1674925012064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674928203228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n   TextInput,\r\n   TouchableOpacity,\r\n   useWindowDimensions,\r\n   ScrollView,\r\n+  Platform,\r\n+  StatusBar\r\n } from 'react-native'\r\n import React from 'react'\r\n import AuthContext from '../context/AuthProvider'\r\n import AsyncStorage from '@react-native-async-storage/async-storage'\r\n@@ -406,8 +408,9 @@\n const styles = StyleSheet.create({\r\n   root: {\r\n     flex: 1,\r\n     backgroundColor: COLORS.white,\r\n+    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0 \r\n   },\r\n   infoContainer: {\r\n     marginHorizontal: 40,\r\n     marginBottom: 40,\r\n"
                }
            ],
            "date": 1674925012064,
            "name": "Commit-0",
            "content": "import {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  ScrollView,\r\n} from 'react-native'\r\nimport React from 'react'\r\nimport AuthContext from '../context/AuthProvider'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { CATEGORIES, COLORS, SHADOWS, SIZES } from '../constants'\r\nimport { useState, useEffect } from 'react'\r\nimport { StyleSheet } from 'react-native'\r\nimport { SafeAreaView } from 'react-native'\r\nimport { serverURL } from '../config/hosts'\r\nimport { MaterialIcons, MaterialCommunityIcons, FontAwesome5 } from '@expo/vector-icons'\r\nimport { CustomButton } from '../components'\r\nimport ChooseCategoryModal from '../components/ChooseCategoryModal'\r\nimport ProductInputModal from '../components/ProductInputModal'\r\nimport ProductTable from '../components/ProductTable'\r\n\r\nexport default function AddExpenseScreen({ navigation }) {\r\n  const { height } = useWindowDimensions()\r\n  const [token, setToken] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [selectedCategory, setSelectedCategory] = useState(22)\r\n  const [value, setValue] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [isModalVisibleCT, setisModalVisibleCT] = useState(false)\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n  const [products, setProducts] = useState([])\r\n  const [isDebit, setIsDebit] = useState(true)\r\n  const today = new Date()\r\n  const formattedDate = today.toISOString().slice(0, 10)\r\n  const [date, setDate] = useState(formattedDate)\r\n\r\n  // TODO: Validate form data\r\n\r\n  useEffect(() => {\r\n    AsyncStorage.getItem('userToken')\r\n      .then((userToken) => setToken(JSON.parse(userToken)))\r\n      .catch((err) => console.log(err))\r\n  }, [])\r\n\r\n  \r\n  const toggleModalCT = () => {\r\n    setisModalVisibleCT(!isModalVisibleCT)\r\n  }\r\n\r\n  const handleCategorySelection = (category) => {\r\n    setSelectedCategory(category)\r\n\r\n    toggleModalCT()\r\n  }\r\n\r\n  const handleAddProduct = (productInfo) => {\r\n    setProducts([...products, productInfo])\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  // handle clean form\r\n  function handleCleanForm() {\r\n    setTitle('')\r\n    setSelectedCategory(22)\r\n    setValue('')\r\n    setDescription('')\r\n    setProducts([])\r\n    setIsDebit(true)\r\n    setDate(formattedDate)\r\n  }\r\n\r\n  function handleDeleteProduct(index) {\r\n    // Delete product at the specified index\r\n    const newProducts = [...products]\r\n    newProducts.splice(index, 1)\r\n    setProducts(newProducts)\r\n  }\r\n\r\n  function getCategoryIcon(selectedCategory) {\r\n    //console.log('get icon: ' + selectedCategory)\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.icon\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n  //  get category name by key\r\n  function getCategoryName(selectedCategory) {\r\n    //console.log('get name: ' + selectedCategory)\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.name\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n  function typeContainer () {\r\n   return (\r\n    <View style={styles.debitCreditContainer}>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopRightRadius: 0,\r\n          borderBottomRightRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(true)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n          },\r\n        ]}\r\n      >\r\n        Débito\r\n      </Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopLeftRadius: 0,\r\n          borderBottomLeftRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue ,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(false)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n          },\r\n        ]}\r\n      >\r\n        Crédito\r\n      </Text>\r\n    </TouchableOpacity>\r\n  </View>\r\n    )\r\n  }\r\n    \r\n\r\n  const categoryIcon = getCategoryIcon(selectedCategory)\r\n  const { width } = useWindowDimensions()\r\n\r\n  // router.post('/createPurchase/',function(req,res){\r\n  /* Purchases.addPurchase(req.body.is_recurring,\r\n   req.body.date, \r\n   req.body.value,\r\n   req.body.title, \r\n   req.body.description, \r\n   req.body.idUser, \r\n   req.body.seller,\r\n   req.body.type,\r\n   req.body.products)\r\n   */\r\n\r\n  const handleFormSubmission = async () => {\r\n    if(products.length == 0){\r\n      products.push({\r\n        quantity: 1,\r\n        value: value,\r\n        idcategory: selectedCategory,\r\n        description: 'Não especificado',\r\n      })\r\n    }\r\n    const newData = {\r\n      // falta a CATEGORIA\r\n      is_recurring: false,\r\n      date: date,\r\n      value: value,\r\n      title: title,\r\n      description: description,\r\n      idUser: token.id,\r\n      seller: '',\r\n      type: isDebit ? 'Debito' : 'Credito',\r\n      products: products, // quantity , value , idcategory , description\r\n    }\r\n    const resp = await fetch(`${serverURL}/purchases/createPurchase/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newData),\r\n    }).then((resp) => {\r\n      if (resp.status === 200) {\r\n        alert('Despesa adicionada com sucesso!')\r\n        navigation.navigate('Casa', { refresh: true })\r\n      } else {\r\n        alert('Erro ao adicionar despesa!')\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n    (\r\n      <SafeAreaView style={styles.root}>\r\n        <ScrollView showsVerticalScrollIndicator={false}>\r\n          <View style={styles.infoContainer}>\r\n            {typeContainer()}\r\n\r\n            {/* Title input */}\r\n\r\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n            <Text style={styles.textTag}>Título</Text>\r\n            {/* Button with camera icon to navigate to OCR aligned to right */}\r\n            <TouchableOpacity\r\n              style={{ position: 'absolute', right: 0 }}\r\n              onPress={() => navigation.navigate('OCR')}\r\n            >\r\n              <MaterialIcons name=\"camera-alt\" size={24} color={COLORS.wingDarkBlue} />\r\n            </TouchableOpacity>\r\n        \r\n            </View>\r\n            <View style={[styles.buttonStyle, { width: width * 0.8 }]}>\r\n              <TextInput\r\n                placeholder=\"Ex: Conta de luz\"\r\n                onChangeText={setTitle}\r\n                style={styles.textButton}\r\n              >\r\n                {title}\r\n              </TextInput>\r\n            </View>\r\n\r\n\r\n            {/* Value and Date input */}\r\n            <View\r\n              style={[\r\n                { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n              ]}\r\n            >\r\n              <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n                <Text style={styles.textTag}>Valor</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.36}]}\r\n                >\r\n                  <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n                  <TextInput\r\n                    placeholder=\"10.25\"\r\n                    onChangeText={setValue}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {value}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n              <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n                <Text style={styles.textTag}>Data</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.4}]}\r\n                >\r\n                  <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n                  <TextInput\r\n                    placeholder=\"AAAA-MM-DD\"\r\n                    onChangeText={setDate}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {date}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n            </View>\r\n\r\n            {/* Category input */}\r\n            {products.length == 0 ? (\r\n              <>\r\n                <Text style={styles.textTag}>Categoria</Text>\r\n                <TouchableOpacity\r\n                  style={[styles.buttonStyle, { width: width * 0.8 }]}\r\n                  onPress={() => toggleModalCT()}\r\n                >\r\n                  {getCategoryIcon(selectedCategory)}\r\n                  <Text style={styles.textButton}>{getCategoryName(selectedCategory)}</Text>\r\n                </TouchableOpacity>\r\n                <ChooseCategoryModal\r\n                  isModalVisibleCT={isModalVisibleCT}\r\n                  setisModalVisibleCT={setisModalVisibleCT}\r\n                  setSelectedCategory={handleCategorySelection}\r\n                />\r\n              </>\r\n            ) : null}\r\n\r\n            {/* Description input */}\r\n            <Text style={styles.textTag}>Descrição</Text>\r\n\r\n            <TextInput\r\n              multiline={true}\r\n              numberOfLines={2}\r\n              value={description}\r\n              onChangeText={setDescription}\r\n              placeholder={'Café com leite e bolo'}\r\n              style={[\r\n                {\r\n                  marginVertical: 12,\r\n                  borderRadius: 5,\r\n                  paddingTop: 15,\r\n                  padding: 15,\r\n                  borderWidth: 1,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  width: width * 0.8,\r\n                  minHeight: 100,\r\n                },\r\n              ]}\r\n            />\r\n\r\n            {/* Products input */}\r\n\r\n            <Text style={[styles.textTag, { marginBottom: 12 }]}>Produtos</Text>\r\n\r\n            {/* Product table component */}\r\n            {products.length > 0 ? (\r\n              <ProductTable\r\n                products={products}\r\n                handleDeleteProduct={handleDeleteProduct}\r\n                getCategoryIcon={getCategoryIcon}\r\n              />\r\n            ) : (\r\n              <Text\r\n                style={{\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  marginBottom: 12,\r\n                }}\r\n              >\r\n                Nenhum produto adicionado\r\n              </Text>\r\n            )}\r\n            <TouchableOpacity\r\n              style={[\r\n                styles.buttonStyle,\r\n                {\r\n                  width: width * 0.3,\r\n                  borderRadius: 30,\r\n                  paddingVertical: 3,\r\n                  alignSelf: 'flex-end',\r\n                  marginVertical: 0,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  borderWidth: 1,\r\n                },\r\n              ]}\r\n              onPress={() => setIsModalVisible(true)}\r\n            >\r\n              <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n              <Text style={[styles.textButton, { marginStart: 2 }]}>Adicionar</Text>\r\n            </TouchableOpacity>\r\n\r\n            <ProductInputModal\r\n              isModalVisible={isModalVisible}\r\n              generalCategory={selectedCategory}\r\n              getCategoryIcon={getCategoryIcon}\r\n              getCategoryName={getCategoryName}\r\n              onSave={handleAddProduct}\r\n              onCancel={handleCancel}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.containerBTN}>\r\n            <CustomButton\r\n              onPress={() => {\r\n                handleCleanForm(),\r\n                handleFormSubmission()\r\n              }}\r\n              text=\"Adicionar Movimento\"\r\n              type=\"TERTIARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>\r\n\r\n<CustomButton\r\n              onPress={() => handleCleanForm()}\r\n              text=\"Limpar Dados\"\r\n              type=\"SECONDARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>\r\n          </View>\r\n        </ScrollView>\r\n      </SafeAreaView>\r\n    )\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: COLORS.white,\r\n  },\r\n  infoContainer: {\r\n    marginHorizontal: 40,\r\n    marginBottom: 40,\r\n  },\r\n  textTag: {\r\n    fontFamily: 'SoraBold',\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue,\r\n  },\r\n  textInfo: {\r\n    fontFamily: 'SoraLight',\r\n    fontSize: SIZES.medium,\r\n  },\r\n  containerBTN: {\r\n    flex: 1,\r\n    alignItems: 'flex-start',\r\n    marginHorizontal: 40,\r\n    marginBottom: 100,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: SIZES.small,\r\n    fontFamily: 'SoraBold',\r\n  },\r\n  buttonStyle: {\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 15,\r\n    marginVertical: 12,\r\n    borderWidth: 1,\r\n    flexDirection: 'row',\r\n    alignSelf: 'center',\r\n    borderColor: COLORS.wingDarkBlue,\r\n    alignItems: 'center',\r\n  },\r\n  textButton: {\r\n    fontFamily: 'SoraRegular',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.wingDarkBlue,\r\n    marginStart: 10,\r\n  },\r\n  productsContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    marginVertical: 12,\r\n  },\r\n  debitCreditContainer: {\r\n    flexDirection: 'row',\r\n    marginVertical: 20,\r\n  },\r\n  debitCreditButton: {\r\n    backgroundColor: COLORS.white,\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 6,\r\n    borderWidth: 1.5,\r\n    alignSelf:'stretch',\r\n    flexGrow: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    //marginHorizontal: 5,\r\n    \r\n    borderColor: COLORS.wingDarkBlue,\r\n  // borderColor:'#ed711e'\r\n  },\r\n  textDebitCredit: {\r\n    fontFamily: 'SoraMedium',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.white,\r\n    //marginStart: 10,\r\n  },\r\n})\r\n"
        }
    ]
}