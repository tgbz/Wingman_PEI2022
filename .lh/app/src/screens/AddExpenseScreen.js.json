{
    "sourceFile": "app/src/screens/AddExpenseScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1674925012064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674928203228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n   TextInput,\r\n   TouchableOpacity,\r\n   useWindowDimensions,\r\n   ScrollView,\r\n+  Platform,\r\n+  StatusBar\r\n } from 'react-native'\r\n import React from 'react'\r\n import AuthContext from '../context/AuthProvider'\r\n import AsyncStorage from '@react-native-async-storage/async-storage'\r\n@@ -406,8 +408,9 @@\n const styles = StyleSheet.create({\r\n   root: {\r\n     flex: 1,\r\n     backgroundColor: COLORS.white,\r\n+    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0 \r\n   },\r\n   infoContainer: {\r\n     marginHorizontal: 40,\r\n     marginBottom: 40,\r\n"
                },
                {
                    "date": 1675061715937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,16 @@\n       }\r\n     })\r\n   }\r\n \r\n+  function showErrorField(text){\r\n+    return(<Text style= {{alignSelf: 'flex-start', paddingHorizontal:30}}>\r\n+              <Text style={styles.text}>{text}</Text>\r\n+              <Text style={styles.error}> * Campo Obrigatório</Text>\r\n+            </Text>)\r\n+    }\r\n+\r\n+\r\n   return (\r\n     console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n     (\r\n       <SafeAreaView style={styles.root}>\r\n"
                },
                {
                    "date": 1675065833275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,16 @@\n   const formattedDate = today.toISOString().slice(0, 10)\r\n   const [date, setDate] = useState(formattedDate)\r\n \r\n   // TODO: Validate form data\r\n+  const [validTitle, setValidTitle] = useState(true)\r\n+  const [validValue, setValidValue] = useState(true)\r\n+  const [validDescription, setValidDescription] = useState(true)\r\n \r\n+\r\n+\r\n+\r\n+\r\n   useEffect(() => {\r\n     AsyncStorage.getItem('userToken')\r\n       .then((userToken) => setToken(JSON.parse(userToken)))\r\n       .catch((err) => console.log(err))\r\n@@ -75,8 +82,48 @@\n     setIsDebit(true)\r\n     setDate(formattedDate)\r\n   }\r\n \r\n+  function validateForm() {\r\n+    let valid = true\r\n+    if (title == '') {\r\n+      setValidTitle(false)\r\n+      valid = false\r\n+    } else {\r\n+      setValidTitle(true)\r\n+    }\r\n+\r\n+    if (value == '') {\r\n+      setValidValue(false)\r\n+      valid = false\r\n+    } else {\r\n+      setValidValue(true)\r\n+    }\r\n+\r\n+    if (description == '') {\r\n+      setValidDescription(false)\r\n+      valid = false\r\n+    } else {\r\n+      setValidDescription(true)\r\n+    }\r\n+\r\n+    return valid\r\n+  }\r\n+\r\n+\r\n+  function showErrorField(text) {\r\n+\r\n+\r\n+    return (\r\n+      <Text style={{ alignSelf: \"flex-start\", paddingHorizontal: 30 }}>\r\n+        <Text style={styles.text}>{text}</Text>\r\n+        <Text style={styles.error}>{textToWrite}</Text>\r\n+      </Text>\r\n+    );\r\n+\r\n+\r\n+  }\r\n+\r\n   function handleDeleteProduct(index) {\r\n     // Delete product at the specified index\r\n     const newProducts = [...products]\r\n     newProducts.splice(index, 1)\r\n@@ -232,9 +279,9 @@\n \r\n             {/* Title input */}\r\n \r\n             <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n-            <Text style={styles.textTag}>Título</Text>\r\n+            {validTitle ? (<Text style={styles.textTag}>Título</Text>) : showErrorField('Título')}\r\n             {/* Button with camera icon to navigate to OCR aligned to right */}\r\n             <TouchableOpacity\r\n               style={{ position: 'absolute', right: 0 }}\r\n               onPress={() => navigation.navigate('OCR')}\r\n@@ -260,9 +307,9 @@\n                 { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n               ]}\r\n             >\r\n               <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n-                <Text style={styles.textTag}>Valor</Text>\r\n+                {validValue ? (<Text style={styles.textTag}>Valor</Text>) : showErrorField('Valor')}\r\n                 <View\r\n                   style={[styles.buttonStyle, { width: width * 0.36}]}\r\n                 >\r\n                   <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n"
                },
                {
                    "date": 1675065880576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,9 +358,9 @@\n               </>\r\n             ) : null}\r\n \r\n             {/* Description input */}\r\n-            <Text style={styles.textTag}>Descrição</Text>\r\n+            {validDescription ? (<Text style={styles.textTag}>Descrição</Text>) : showErrorField('Descrição') }\r\n \r\n             <TextInput\r\n               multiline={true}\r\n               numberOfLines={2}\r\n"
                },
                {
                    "date": 1675065902290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,10 +261,10 @@\n     })\r\n   }\r\n \r\n   function showErrorField(text){\r\n-    return(<Text style= {{alignSelf: 'flex-start', paddingHorizontal:30}}>\r\n-              <Text style={styles.text}>{text}</Text>\r\n+    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n+              <Text style={styles.textTag}>{text}</Text>\r\n               <Text style={styles.error}> * Campo Obrigatório</Text>\r\n             </Text>)\r\n     }\r\n \r\n"
                },
                {
                    "date": 1675065928222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,11 +470,12 @@\n     marginHorizontal: 40,\r\n     marginBottom: 40,\r\n   },\r\n   textTag: {\r\n-    fontFamily: 'SoraBold',\r\n-    fontSize: SIZES.medium,\r\n     color: COLORS.wingDarkBlue,\r\n+    fontFamily: \"SoraLight\",\r\n+    fontSize: 15,\r\n+    alignSelf: \"flex-start\",\r\n   },\r\n   textInfo: {\r\n     fontFamily: 'SoraLight',\r\n     fontSize: SIZES.medium,\r\n"
                },
                {
                    "date": 1675065934425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -471,9 +471,9 @@\n     marginBottom: 40,\r\n   },\r\n   textTag: {\r\n     color: COLORS.wingDarkBlue,\r\n-    fontFamily: \"SoraLight\",\r\n+    fontFamily: \"SoraMedium\",\r\n     fontSize: 15,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n   textInfo: {\r\n"
                },
                {
                    "date": 1675065955526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,8 +475,14 @@\n     fontFamily: \"SoraMedium\",\r\n     fontSize: 15,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n+  error : {\r\n+    color: \"red\",\r\n+    fontFamily: \"SoraMedium\",\r\n+    fontSize: SIZES.small,\r\n+    alignSelf: \"flex-start\",\r\n+  },\r\n   textInfo: {\r\n     fontFamily: 'SoraLight',\r\n     fontSize: SIZES.medium,\r\n   },\r\n"
                },
                {
                    "date": 1675065994914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,10 +438,14 @@\n \r\n           <View style={styles.containerBTN}>\r\n             <CustomButton\r\n               onPress={() => {\r\n+\r\n+              if (validateForm() == true) {\r\n                 handleCleanForm(),\r\n                 handleFormSubmission()\r\n+              }\r\n+               \r\n               }}\r\n               text=\"Adicionar Movimento\"\r\n               type=\"TERTIARY\"\r\n               widthScale={0.8}\r\n"
                },
                {
                    "date": 1675069075243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n \r\n \r\n     return (\r\n       <Text style={{ alignSelf: \"flex-start\", paddingHorizontal: 30 }}>\r\n-        <Text style={styles.text}>{text}</Text>\r\n+        <Text style={styles.textTag}>{text}</Text>\r\n         <Text style={styles.error}>{textToWrite}</Text>\r\n       </Text>\r\n     );\r\n \r\n@@ -261,11 +261,30 @@\n     })\r\n   }\r\n \r\n   function showErrorField(text){\r\n+    var textToWrite = \"\"\r\n+\r\n+    if (text == 'Título'){\r\n+      if (!title){\r\n+        textToWrite = \"* Campo Obrigatório\"\r\n+      }\r\n+    }\r\n+    else if (text == 'Valor'){\r\n+      if (!value){\r\n+        textToWrite = \"*Obrigatório\"\r\n+      }\r\n+      // check if value is number\r\n+      else if (isNaN(value)){\r\n+        textToWrite = \"* Valor inválido\"\r\n+      }\r\n+    }\r\n+\r\n+\r\n+\r\n     return(<Text style= {{alignSelf: 'flex-start'}}>\r\n               <Text style={styles.textTag}>{text}</Text>\r\n-              <Text style={styles.error}> * Campo Obrigatório</Text>\r\n+              <Text style={styles.error}> {textToWrite}</Text>\r\n             </Text>)\r\n     }\r\n \r\n \r\n"
                },
                {
                    "date": 1675069205073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n   // TODO: Validate form data\r\n   const [validTitle, setValidTitle] = useState(true)\r\n   const [validValue, setValidValue] = useState(true)\r\n   const [validDescription, setValidDescription] = useState(true)\r\n+  const [validDate, setValidDate] = useState(true)\r\n \r\n \r\n \r\n \r\n@@ -104,8 +105,23 @@\n       valid = false\r\n     } else {\r\n       setValidDescription(true)\r\n     }\r\n+    if (date == '') {\r\n+      setValidDate(false)\r\n+      valid = false\r\n+    }\r\n+    else if ( date > formattedDate) {\r\n+      setValidDate(false)\r\n+      valid = false\r\n+    }\r\n+    //check if date is in format yyyy-mm-dd\r\n+    else if (date.match(/^\\d{4}-\\d{2}-\\d{2}$/) == null) {\r\n+      setValidDate(false)\r\n+      valid = false\r\n+    } else {\r\n+      setValidDate(true)\r\n+    }\r\n \r\n     return valid\r\n   }\r\n \r\n"
                },
                {
                    "date": 1675069411007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,10 @@\n   }\r\n \r\n \r\n   function showErrorField(text) {\r\n+    textToWrite = ''\r\n+    if (text == 'title') {\r\n \r\n \r\n     return (\r\n       <Text style={{ alignSelf: \"flex-start\", paddingHorizontal: 30 }}>\r\n@@ -293,8 +295,21 @@\n       else if (isNaN(value)){\r\n         textToWrite = \"* Valor inválido\"\r\n       }\r\n     }\r\n+    else if (text == 'Data'){\r\n+      if (!date){\r\n+        textToWrite = \"*Obrigatório\"\r\n+      }\r\n+      //check if date is valid\r\n+      else if (!moment(date, 'YYYY-MM-DD', true).isValid()){\r\n+        textToWrite = \"* Formato inválido\"\r\n+      }\r\n+      //check if date is in the future\r\n+      else if (date < formattedDate){\r\n+        textToWrite = \"* Data inválida\"\r\n+      }\r\n+    }\r\n \r\n \r\n \r\n     return(<Text style= {{alignSelf: 'flex-start'}}>\r\n@@ -357,9 +372,9 @@\n                   </TextInput>\r\n                 </View>\r\n               </View>\r\n               <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n-                <Text style={styles.textTag}>Data</Text>\r\n+                {validDate ? (<Text style={styles.textTag}>Data</Text>) : showErrorField('Data')}\r\n                 <View\r\n                   style={[styles.buttonStyle, { width: width * 0.4}]}\r\n                 >\r\n                   <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n"
                },
                {
                    "date": 1675069444171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n               <Text style={styles.error}> {textToWrite}</Text>\r\n             </Text>)\r\n     }\r\n \r\n-\r\n+  \r\n   return (\r\n     console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n     (\r\n       <SafeAreaView style={styles.root}>\r\n"
                },
                {
                    "date": 1675069455663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,47 +278,10 @@\n       }\r\n     })\r\n   }\r\n \r\n-  function showErrorField(text){\r\n-    var textToWrite = \"\"\r\n \r\n-    if (text == 'Título'){\r\n-      if (!title){\r\n-        textToWrite = \"* Campo Obrigatório\"\r\n-      }\r\n-    }\r\n-    else if (text == 'Valor'){\r\n-      if (!value){\r\n-        textToWrite = \"*Obrigatório\"\r\n-      }\r\n-      // check if value is number\r\n-      else if (isNaN(value)){\r\n-        textToWrite = \"* Valor inválido\"\r\n-      }\r\n-    }\r\n-    else if (text == 'Data'){\r\n-      if (!date){\r\n-        textToWrite = \"*Obrigatório\"\r\n-      }\r\n-      //check if date is valid\r\n-      else if (!moment(date, 'YYYY-MM-DD', true).isValid()){\r\n-        textToWrite = \"* Formato inválido\"\r\n-      }\r\n-      //check if date is in the future\r\n-      else if (date < formattedDate){\r\n-        textToWrite = \"* Data inválida\"\r\n-      }\r\n-    }\r\n \r\n-\r\n-\r\n-    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n-              <Text style={styles.textTag}>{text}</Text>\r\n-              <Text style={styles.error}> {textToWrite}</Text>\r\n-            </Text>)\r\n-    }\r\n-\r\n   \r\n   return (\r\n     console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n     (\r\n"
                },
                {
                    "date": 1675069494384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,22 +125,46 @@\n     return valid\r\n   }\r\n \r\n \r\n-  function showErrorField(text) {\r\n-    textToWrite = ''\r\n-    if (text == 'title') {\r\n+  function showErrorField(text){\r\n+    var textToWrite = \"\"\r\n \r\n+    if (text == 'Título'){\r\n+      if (!title){\r\n+        textToWrite = \"* Campo Obrigatório\"\r\n+      }\r\n+    }\r\n+    else if (text == 'Valor'){\r\n+      if (!value){\r\n+        textToWrite = \"*Obrigatório\"\r\n+      }\r\n+      // check if value is number\r\n+      else if (isNaN(value)){\r\n+        textToWrite = \"* Valor inválido\"\r\n+      }\r\n+    }\r\n+    else if (text == 'Data'){\r\n+      if (!date){\r\n+        textToWrite = \"*Obrigatório\"\r\n+      }\r\n+      //check if date is valid\r\n+      else if (!moment(date, 'YYYY-MM-DD', true).isValid()){\r\n+        textToWrite = \"* Formato inválido\"\r\n+      }\r\n+      //check if date is in the future\r\n+      else if (date < formattedDate){\r\n+        textToWrite = \"* Data inválida\"\r\n+      }\r\n+    }\r\n \r\n-    return (\r\n-      <Text style={{ alignSelf: \"flex-start\", paddingHorizontal: 30 }}>\r\n-        <Text style={styles.textTag}>{text}</Text>\r\n-        <Text style={styles.error}>{textToWrite}</Text>\r\n-      </Text>\r\n-    );\r\n \r\n \r\n-  }\r\n+    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n+              <Text style={styles.textTag}>{text}</Text>\r\n+              <Text style={styles.error}> {textToWrite}</Text>\r\n+            </Text>)\r\n+    }\r\n \r\n   function handleDeleteProduct(index) {\r\n     // Delete product at the specified index\r\n     const newProducts = [...products]\r\n"
                },
                {
                    "date": 1675069513074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,15 +98,8 @@\n       valid = false\r\n     } else {\r\n       setValidValue(true)\r\n     }\r\n-\r\n-    if (description == '') {\r\n-      setValidDescription(false)\r\n-      valid = false\r\n-    } else {\r\n-      setValidDescription(true)\r\n-    }\r\n     if (date == '') {\r\n       setValidDate(false)\r\n       valid = false\r\n     }\r\n"
                },
                {
                    "date": 1675069623030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,178 +5,179 @@\n   TouchableOpacity,\r\n   useWindowDimensions,\r\n   ScrollView,\r\n   Platform,\r\n-  StatusBar\r\n-} from 'react-native'\r\n-import React from 'react'\r\n-import AuthContext from '../context/AuthProvider'\r\n-import AsyncStorage from '@react-native-async-storage/async-storage'\r\n-import { CATEGORIES, COLORS, SHADOWS, SIZES } from '../constants'\r\n-import { useState, useEffect } from 'react'\r\n-import { StyleSheet } from 'react-native'\r\n-import { SafeAreaView } from 'react-native'\r\n-import { serverURL } from '../config/hosts'\r\n-import { MaterialIcons, MaterialCommunityIcons, FontAwesome5 } from '@expo/vector-icons'\r\n-import { CustomButton } from '../components'\r\n-import ChooseCategoryModal from '../components/ChooseCategoryModal'\r\n-import ProductInputModal from '../components/ProductInputModal'\r\n-import ProductTable from '../components/ProductTable'\r\n+  StatusBar,\r\n+} from \"react-native\";\r\n+import React from \"react\";\r\n+import AuthContext from \"../context/AuthProvider\";\r\n+import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n+import { CATEGORIES, COLORS, SHADOWS, SIZES } from \"../constants\";\r\n+import { useState, useEffect } from \"react\";\r\n+import { StyleSheet } from \"react-native\";\r\n+import { SafeAreaView } from \"react-native\";\r\n+import { serverURL } from \"../config/hosts\";\r\n+import {\r\n+  MaterialIcons,\r\n+  MaterialCommunityIcons,\r\n+  FontAwesome5,\r\n+} from \"@expo/vector-icons\";\r\n+import { CustomButton } from \"../components\";\r\n+import ChooseCategoryModal from \"../components/ChooseCategoryModal\";\r\n+import ProductInputModal from \"../components/ProductInputModal\";\r\n+import ProductTable from \"../components/ProductTable\";\r\n \r\n export default function AddExpenseScreen({ navigation }) {\r\n-  const { height } = useWindowDimensions()\r\n-  const [token, setToken] = useState('')\r\n-  const [title, setTitle] = useState('')\r\n-  const [selectedCategory, setSelectedCategory] = useState(22)\r\n-  const [value, setValue] = useState('')\r\n-  const [description, setDescription] = useState('')\r\n-  const [isModalVisibleCT, setisModalVisibleCT] = useState(false)\r\n-  const [isModalVisible, setIsModalVisible] = useState(false)\r\n-  const [products, setProducts] = useState([])\r\n-  const [isDebit, setIsDebit] = useState(true)\r\n-  const today = new Date()\r\n-  const formattedDate = today.toISOString().slice(0, 10)\r\n-  const [date, setDate] = useState(formattedDate)\r\n+  const { height } = useWindowDimensions();\r\n+  const [token, setToken] = useState(\"\");\r\n+  const [title, setTitle] = useState(\"\");\r\n+  const [selectedCategory, setSelectedCategory] = useState(22);\r\n+  const [value, setValue] = useState(\"\");\r\n+  const [description, setDescription] = useState(\"\");\r\n+  const [isModalVisibleCT, setisModalVisibleCT] = useState(false);\r\n+  const [isModalVisible, setIsModalVisible] = useState(false);\r\n+  const [products, setProducts] = useState([]);\r\n+  const [isDebit, setIsDebit] = useState(true);\r\n+  const today = new Date();\r\n+  const formattedDate = today.toISOString().slice(0, 10);\r\n+  const [date, setDate] = useState(formattedDate);\r\n \r\n   // TODO: Validate form data\r\n-  const [validTitle, setValidTitle] = useState(true)\r\n-  const [validValue, setValidValue] = useState(true)\r\n-  const [validDescription, setValidDescription] = useState(true)\r\n-  const [validDate, setValidDate] = useState(true)\r\n+  const [validTitle, setValidTitle] = useState(true);\r\n+  const [validValue, setValidValue] = useState(true);\r\n+  const [validDescription, setValidDescription] = useState(true);\r\n+  const [validDate, setValidDate] = useState(true);\r\n \r\n-\r\n-\r\n-\r\n-\r\n   useEffect(() => {\r\n-    AsyncStorage.getItem('userToken')\r\n+    AsyncStorage.getItem(\"userToken\")\r\n       .then((userToken) => setToken(JSON.parse(userToken)))\r\n-      .catch((err) => console.log(err))\r\n-  }, [])\r\n+      .catch((err) => console.log(err));\r\n+  }, []);\r\n \r\n-  \r\n   const toggleModalCT = () => {\r\n-    setisModalVisibleCT(!isModalVisibleCT)\r\n-  }\r\n+    setisModalVisibleCT(!isModalVisibleCT);\r\n+  };\r\n \r\n   const handleCategorySelection = (category) => {\r\n-    setSelectedCategory(category)\r\n+    setSelectedCategory(category);\r\n \r\n-    toggleModalCT()\r\n-  }\r\n+    toggleModalCT();\r\n+  };\r\n \r\n   const handleAddProduct = (productInfo) => {\r\n-    setProducts([...products, productInfo])\r\n-    setIsModalVisible(false)\r\n-  }\r\n+    setProducts([...products, productInfo]);\r\n+    setIsModalVisible(false);\r\n+  };\r\n \r\n   const handleCancel = () => {\r\n-    setIsModalVisible(false)\r\n-  }\r\n+    setIsModalVisible(false);\r\n+  };\r\n \r\n   // handle clean form\r\n   function handleCleanForm() {\r\n-    setTitle('')\r\n-    setSelectedCategory(22)\r\n-    setValue('')\r\n-    setDescription('')\r\n-    setProducts([])\r\n-    setIsDebit(true)\r\n-    setDate(formattedDate)\r\n+    setTitle(\"\");\r\n+    setSelectedCategory(22);\r\n+    setValue(\"\");\r\n+    setDescription(\"\");\r\n+    setProducts([]);\r\n+    setIsDebit(true);\r\n+    setDate(formattedDate);\r\n   }\r\n \r\n   function validateForm() {\r\n-    let valid = true\r\n-    if (title == '') {\r\n-      setValidTitle(false)\r\n-      valid = false\r\n+    let valid = true;\r\n+    if (title == \"\") {\r\n+      setValidTitle(false);\r\n+      valid = false;\r\n     } else {\r\n-      setValidTitle(true)\r\n+      setValidTitle(true);\r\n     }\r\n \r\n-    if (value == '') {\r\n-      setValidValue(false)\r\n-      valid = false\r\n+    if (value == \"\") {\r\n+      setValidValue(false);\r\n+      valid = false;\r\n     } else {\r\n-      setValidValue(true)\r\n+      setValidValue(true);\r\n     }\r\n-    if (date == '') {\r\n-      setValidDate(false)\r\n-      valid = false\r\n+    if (date == \"\") {\r\n+      setValidDate(false);\r\n+      valid = false;\r\n+    } else if (date > formattedDate) {\r\n+      setValidDate(false);\r\n+      valid = false;\r\n     }\r\n-    else if ( date > formattedDate) {\r\n-      setValidDate(false)\r\n-      valid = false\r\n-    }\r\n     //check if date is in format yyyy-mm-dd\r\n     else if (date.match(/^\\d{4}-\\d{2}-\\d{2}$/) == null) {\r\n-      setValidDate(false)\r\n-      valid = false\r\n+      setValidDate(false);\r\n+      valid = false;\r\n     } else {\r\n-      setValidDate(true)\r\n+      setValidDate(true);\r\n     }\r\n \r\n-    return valid\r\n+    return valid;\r\n   }\r\n \r\n+  function showErrorField(text) {\r\n+    var textToWrite = \"\";\r\n \r\n-  function showErrorField(text){\r\n-    var textToWrite = \"\"\r\n-\r\n-    if (text == 'Título'){\r\n-      if (!title){\r\n-        textToWrite = \"* Campo Obrigatório\"\r\n+    if (text == \"Título\") {\r\n+      if (!title) {\r\n+        textToWrite = \"* Campo Obrigatório\";\r\n       }\r\n-    }\r\n-    else if (text == 'Valor'){\r\n-      if (!value){\r\n-        textToWrite = \"*Obrigatório\"\r\n+    } else if (text == \"Valor\") {\r\n+      if (!value) {\r\n+        textToWrite = \"*Obrigatório\";\r\n       }\r\n       // check if value is number\r\n-      else if (isNaN(value)){\r\n-        textToWrite = \"* Valor inválido\"\r\n+      else if (isNaN(value)) {\r\n+        textToWrite = \"* Valor inválido\";\r\n       }\r\n-    }\r\n-    else if (text == 'Data'){\r\n-      if (!date){\r\n-        textToWrite = \"*Obrigatório\"\r\n+    } else if (text == \"Data\") {\r\n+      if (!date) {\r\n+        textToWrite = \"*Obrigatório\";\r\n       }\r\n       //check if date is valid\r\n-      else if (!moment(date, 'YYYY-MM-DD', true).isValid()){\r\n-        textToWrite = \"* Formato inválido\"\r\n+      else if (\r\n+        !date.includes(\"-\") ||\r\n+        date.length != 10 ||\r\n+        date.split(\"-\")[0].length != 4 ||\r\n+        date.split(\"-\")[1].length != 2 ||\r\n+        date.split(\"-\")[2].length != 2\r\n+      ) {\r\n+        textToWrite = \"* Formato inválido\";\r\n       }\r\n       //check if date is in the future\r\n-      else if (date < formattedDate){\r\n-        textToWrite = \"* Data inválida\"\r\n+      else if (date < formattedDate) {\r\n+        textToWrite = \"* Data inválida\";\r\n       }\r\n     }\r\n \r\n+    return (\r\n+      <Text style={{ alignSelf: \"flex-start\" }}>\r\n+        <Text style={styles.textTag}>{text}</Text>\r\n+        <Text style={styles.error}> {textToWrite}</Text>\r\n+      </Text>\r\n+    );\r\n+  }\r\n \r\n-\r\n-    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n-              <Text style={styles.textTag}>{text}</Text>\r\n-              <Text style={styles.error}> {textToWrite}</Text>\r\n-            </Text>)\r\n-    }\r\n-\r\n   function handleDeleteProduct(index) {\r\n     // Delete product at the specified index\r\n-    const newProducts = [...products]\r\n-    newProducts.splice(index, 1)\r\n-    setProducts(newProducts)\r\n+    const newProducts = [...products];\r\n+    newProducts.splice(index, 1);\r\n+    setProducts(newProducts);\r\n   }\r\n \r\n   function getCategoryIcon(selectedCategory) {\r\n     //console.log('get icon: ' + selectedCategory)\r\n     // loop through the CATEGORIES object\r\n     // get icon by key\r\n     for (const [key, value] of Object.entries(CATEGORIES)) {\r\n       if (key == selectedCategory) {\r\n-        return value.icon\r\n+        return value.icon;\r\n       }\r\n     }\r\n     // if no match is found, return null\r\n-    return null\r\n+    return null;\r\n   }\r\n \r\n   //  get category name by key\r\n   function getCategoryName(selectedCategory) {\r\n@@ -184,69 +185,68 @@\n     // loop through the CATEGORIES object\r\n     // get icon by key\r\n     for (const [key, value] of Object.entries(CATEGORIES)) {\r\n       if (key == selectedCategory) {\r\n-        return value.name\r\n+        return value.name;\r\n       }\r\n     }\r\n     // if no match is found, return null\r\n-    return null\r\n+    return null;\r\n   }\r\n \r\n-  function typeContainer () {\r\n-   return (\r\n-    <View style={styles.debitCreditContainer}>\r\n-    <TouchableOpacity\r\n-      style={[\r\n-        styles.debitCreditButton,\r\n-        {\r\n-          borderTopRightRadius: 0,\r\n-          borderBottomRightRadius: 0,\r\n-          backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n-        },\r\n-      ]}\r\n-      onPress={() => setIsDebit(true)}\r\n-    >\r\n-      <Text\r\n-        style={[\r\n-          styles.textDebitCredit,\r\n-          {\r\n-            color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n-          },\r\n-        ]}\r\n-      >\r\n-        Débito\r\n-      </Text>\r\n-    </TouchableOpacity>\r\n-    <TouchableOpacity\r\n-      style={[\r\n-        styles.debitCreditButton,\r\n-        {\r\n-          borderTopLeftRadius: 0,\r\n-          borderBottomLeftRadius: 0,\r\n-          backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue ,\r\n-        },\r\n-      ]}\r\n-      onPress={() => setIsDebit(false)}\r\n-    >\r\n-      <Text\r\n-        style={[\r\n-          styles.textDebitCredit,\r\n-          {\r\n-            color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n-          },\r\n-        ]}\r\n-      >\r\n-        Crédito\r\n-      </Text>\r\n-    </TouchableOpacity>\r\n-  </View>\r\n-    )\r\n+  function typeContainer() {\r\n+    return (\r\n+      <View style={styles.debitCreditContainer}>\r\n+        <TouchableOpacity\r\n+          style={[\r\n+            styles.debitCreditButton,\r\n+            {\r\n+              borderTopRightRadius: 0,\r\n+              borderBottomRightRadius: 0,\r\n+              backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n+            },\r\n+          ]}\r\n+          onPress={() => setIsDebit(true)}\r\n+        >\r\n+          <Text\r\n+            style={[\r\n+              styles.textDebitCredit,\r\n+              {\r\n+                color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n+              },\r\n+            ]}\r\n+          >\r\n+            Débito\r\n+          </Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity\r\n+          style={[\r\n+            styles.debitCreditButton,\r\n+            {\r\n+              borderTopLeftRadius: 0,\r\n+              borderBottomLeftRadius: 0,\r\n+              backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n+            },\r\n+          ]}\r\n+          onPress={() => setIsDebit(false)}\r\n+        >\r\n+          <Text\r\n+            style={[\r\n+              styles.textDebitCredit,\r\n+              {\r\n+                color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n+              },\r\n+            ]}\r\n+          >\r\n+            Crédito\r\n+          </Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+    );\r\n   }\r\n-    \r\n \r\n-  const categoryIcon = getCategoryIcon(selectedCategory)\r\n-  const { width } = useWindowDimensions()\r\n+  const categoryIcon = getCategoryIcon(selectedCategory);\r\n+  const { width } = useWindowDimensions();\r\n \r\n   // router.post('/createPurchase/',function(req,res){\r\n   /* Purchases.addPurchase(req.body.is_recurring,\r\n    req.body.date, \r\n@@ -259,15 +259,15 @@\n    req.body.products)\r\n    */\r\n \r\n   const handleFormSubmission = async () => {\r\n-    if(products.length == 0){\r\n+    if (products.length == 0) {\r\n       products.push({\r\n         quantity: 1,\r\n         value: value,\r\n         idcategory: selectedCategory,\r\n-        description: 'Não especificado',\r\n-      })\r\n+        description: \"Não especificado\",\r\n+      });\r\n     }\r\n     const newData = {\r\n       // falta a CATEGORIA\r\n       is_recurring: false,\r\n@@ -275,51 +275,59 @@\n       value: value,\r\n       title: title,\r\n       description: description,\r\n       idUser: token.id,\r\n-      seller: '',\r\n-      type: isDebit ? 'Debito' : 'Credito',\r\n+      seller: \"\",\r\n+      type: isDebit ? \"Debito\" : \"Credito\",\r\n       products: products, // quantity , value , idcategory , description\r\n-    }\r\n+    };\r\n     const resp = await fetch(`${serverURL}/purchases/createPurchase/`, {\r\n-      method: 'POST',\r\n+      method: \"POST\",\r\n       headers: {\r\n-        'Content-Type': 'application/json',\r\n+        \"Content-Type\": \"application/json\",\r\n       },\r\n       body: JSON.stringify(newData),\r\n     }).then((resp) => {\r\n       if (resp.status === 200) {\r\n-        alert('Despesa adicionada com sucesso!')\r\n-        navigation.navigate('Casa', { refresh: true })\r\n+        alert(\"Despesa adicionada com sucesso!\");\r\n+        navigation.navigate(\"Casa\", { refresh: true });\r\n       } else {\r\n-        alert('Erro ao adicionar despesa!')\r\n+        alert(\"Erro ao adicionar despesa!\");\r\n       }\r\n-    })\r\n-  }\r\n+    });\r\n+  };\r\n \r\n-\r\n-\r\n-  \r\n   return (\r\n-    console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n+    console.log(\r\n+      \"--------------\\nToken data AddExpense: \" +\r\n+        JSON.stringify(token) +\r\n+        \"\\n--------------\"\r\n+    ),\r\n     (\r\n       <SafeAreaView style={styles.root}>\r\n         <ScrollView showsVerticalScrollIndicator={false}>\r\n           <View style={styles.infoContainer}>\r\n             {typeContainer()}\r\n \r\n             {/* Title input */}\r\n \r\n-            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n-            {validTitle ? (<Text style={styles.textTag}>Título</Text>) : showErrorField('Título')}\r\n-            {/* Button with camera icon to navigate to OCR aligned to right */}\r\n-            <TouchableOpacity\r\n-              style={{ position: 'absolute', right: 0 }}\r\n-              onPress={() => navigation.navigate('OCR')}\r\n-            >\r\n-              <MaterialIcons name=\"camera-alt\" size={24} color={COLORS.wingDarkBlue} />\r\n-            </TouchableOpacity>\r\n-        \r\n+            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n+              {validTitle ? (\r\n+                <Text style={styles.textTag}>Título</Text>\r\n+              ) : (\r\n+                showErrorField(\"Título\")\r\n+              )}\r\n+              {/* Button with camera icon to navigate to OCR aligned to right */}\r\n+              <TouchableOpacity\r\n+                style={{ position: \"absolute\", right: 0 }}\r\n+                onPress={() => navigation.navigate(\"OCR\")}\r\n+              >\r\n+                <MaterialIcons\r\n+                  name=\"camera-alt\"\r\n+                  size={24}\r\n+                  color={COLORS.wingDarkBlue}\r\n+                />\r\n+              </TouchableOpacity>\r\n             </View>\r\n             <View style={[styles.buttonStyle, { width: width * 0.8 }]}>\r\n               <TextInput\r\n                 placeholder=\"Ex: Conta de luz\"\r\n@@ -329,21 +337,30 @@\n                 {title}\r\n               </TextInput>\r\n             </View>\r\n \r\n-\r\n             {/* Value and Date input */}\r\n             <View\r\n               style={[\r\n-                { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n+                {\r\n+                  flexDirection: \"row\",\r\n+                  alignContent: \"space-between\",\r\n+                  alignItems: \"stretch\",\r\n+                },\r\n               ]}\r\n             >\r\n-              <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n-                {validValue ? (<Text style={styles.textTag}>Valor</Text>) : showErrorField('Valor')}\r\n-                <View\r\n-                  style={[styles.buttonStyle, { width: width * 0.36}]}\r\n-                >\r\n-                  <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n+              <View style={{ flex: 1, padding: 0, flexWrap: \"wrap\" }}>\r\n+                {validValue ? (\r\n+                  <Text style={styles.textTag}>Valor</Text>\r\n+                ) : (\r\n+                  showErrorField(\"Valor\")\r\n+                )}\r\n+                <View style={[styles.buttonStyle, { width: width * 0.36 }]}>\r\n+                  <MaterialIcons\r\n+                    name=\"euro\"\r\n+                    size={18}\r\n+                    color={COLORS.wingDarkBlue}\r\n+                  />\r\n                   <TextInput\r\n                     placeholder=\"10.25\"\r\n                     onChangeText={setValue}\r\n                     style={styles.textButton}\r\n@@ -351,14 +368,20 @@\n                     {value}\r\n                   </TextInput>\r\n                 </View>\r\n               </View>\r\n-              <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n-                {validDate ? (<Text style={styles.textTag}>Data</Text>) : showErrorField('Data')}\r\n-                <View\r\n-                  style={[styles.buttonStyle, { width: width * 0.4}]}\r\n-                >\r\n-                  <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n+              <View style={{ flex: 1, padding: 0, flexWrap: \"wrap\" }}>\r\n+                {validDate ? (\r\n+                  <Text style={styles.textTag}>Data</Text>\r\n+                ) : (\r\n+                  showErrorField(\"Data\")\r\n+                )}\r\n+                <View style={[styles.buttonStyle, { width: width * 0.4 }]}>\r\n+                  <MaterialIcons\r\n+                    name=\"date-range\"\r\n+                    size={18}\r\n+                    color={COLORS.wingDarkBlue}\r\n+                  />\r\n                   <TextInput\r\n                     placeholder=\"AAAA-MM-DD\"\r\n                     onChangeText={setDate}\r\n                     style={styles.textButton}\r\n@@ -377,9 +400,11 @@\n                   style={[styles.buttonStyle, { width: width * 0.8 }]}\r\n                   onPress={() => toggleModalCT()}\r\n                 >\r\n                   {getCategoryIcon(selectedCategory)}\r\n-                  <Text style={styles.textButton}>{getCategoryName(selectedCategory)}</Text>\r\n+                  <Text style={styles.textButton}>\r\n+                    {getCategoryName(selectedCategory)}\r\n+                  </Text>\r\n                 </TouchableOpacity>\r\n                 <ChooseCategoryModal\r\n                   isModalVisibleCT={isModalVisibleCT}\r\n                   setisModalVisibleCT={setisModalVisibleCT}\r\n@@ -388,25 +413,29 @@\n               </>\r\n             ) : null}\r\n \r\n             {/* Description input */}\r\n-            {validDescription ? (<Text style={styles.textTag}>Descrição</Text>) : showErrorField('Descrição') }\r\n+            {validDescription ? (\r\n+              <Text style={styles.textTag}>Descrição</Text>\r\n+            ) : (\r\n+              showErrorField(\"Descrição\")\r\n+            )}\r\n \r\n             <TextInput\r\n               multiline={true}\r\n               numberOfLines={2}\r\n               value={description}\r\n               onChangeText={setDescription}\r\n-              placeholder={'Café com leite e bolo'}\r\n+              placeholder={\"Café com leite e bolo\"}\r\n               style={[\r\n                 {\r\n                   marginVertical: 12,\r\n                   borderRadius: 5,\r\n                   paddingTop: 15,\r\n                   padding: 15,\r\n                   borderWidth: 1,\r\n                   borderColor: COLORS.wingDarkBlue,\r\n-                  fontFamily: 'SoraRegular',\r\n+                  fontFamily: \"SoraRegular\",\r\n                   fontSize: SIZES.font,\r\n                   color: COLORS.wingDarkBlue,\r\n                   width: width * 0.8,\r\n                   minHeight: 100,\r\n@@ -427,9 +456,9 @@\n               />\r\n             ) : (\r\n               <Text\r\n                 style={{\r\n-                  fontFamily: 'SoraRegular',\r\n+                  fontFamily: \"SoraRegular\",\r\n                   fontSize: SIZES.font,\r\n                   color: COLORS.wingDarkBlue,\r\n                   marginBottom: 12,\r\n                 }}\r\n@@ -443,18 +472,24 @@\n                 {\r\n                   width: width * 0.3,\r\n                   borderRadius: 30,\r\n                   paddingVertical: 3,\r\n-                  alignSelf: 'flex-end',\r\n+                  alignSelf: \"flex-end\",\r\n                   marginVertical: 0,\r\n                   borderColor: COLORS.wingDarkBlue,\r\n                   borderWidth: 1,\r\n                 },\r\n               ]}\r\n               onPress={() => setIsModalVisible(true)}\r\n             >\r\n-              <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n-              <Text style={[styles.textButton, { marginStart: 2 }]}>Adicionar</Text>\r\n+              <MaterialCommunityIcons\r\n+                name=\"plus\"\r\n+                size={24}\r\n+                color={COLORS.wingDarkBlue}\r\n+              />\r\n+              <Text style={[styles.textButton, { marginStart: 2 }]}>\r\n+                Adicionar\r\n+              </Text>\r\n             </TouchableOpacity>\r\n \r\n             <ProductInputModal\r\n               isModalVisible={isModalVisible}\r\n@@ -468,21 +503,18 @@\n \r\n           <View style={styles.containerBTN}>\r\n             <CustomButton\r\n               onPress={() => {\r\n-\r\n-              if (validateForm() == true) {\r\n-                handleCleanForm(),\r\n-                handleFormSubmission()\r\n-              }\r\n-               \r\n+                if (validateForm() == true) {\r\n+                  handleCleanForm(), handleFormSubmission();\r\n+                }\r\n               }}\r\n               text=\"Adicionar Movimento\"\r\n               type=\"TERTIARY\"\r\n               widthScale={0.8}\r\n             ></CustomButton>\r\n \r\n-<CustomButton\r\n+            <CustomButton\r\n               onPress={() => handleCleanForm()}\r\n               text=\"Limpar Dados\"\r\n               type=\"SECONDARY\"\r\n               widthScale={0.8}\r\n@@ -490,16 +522,16 @@\n           </View>\r\n         </ScrollView>\r\n       </SafeAreaView>\r\n     )\r\n-  )\r\n+  );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n   root: {\r\n     flex: 1,\r\n     backgroundColor: COLORS.white,\r\n-    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0 \r\n+    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n   },\r\n   infoContainer: {\r\n     marginHorizontal: 40,\r\n     marginBottom: 40,\r\n@@ -509,75 +541,75 @@\n     fontFamily: \"SoraMedium\",\r\n     fontSize: 15,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n-  error : {\r\n+  error: {\r\n     color: \"red\",\r\n     fontFamily: \"SoraMedium\",\r\n     fontSize: SIZES.small,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n   textInfo: {\r\n-    fontFamily: 'SoraLight',\r\n+    fontFamily: \"SoraLight\",\r\n     fontSize: SIZES.medium,\r\n   },\r\n   containerBTN: {\r\n     flex: 1,\r\n-    alignItems: 'flex-start',\r\n+    alignItems: \"flex-start\",\r\n     marginHorizontal: 40,\r\n     marginBottom: 100,\r\n   },\r\n   buttonText: {\r\n-    color: 'white',\r\n+    color: \"white\",\r\n     fontSize: SIZES.small,\r\n-    fontFamily: 'SoraBold',\r\n+    fontFamily: \"SoraBold\",\r\n   },\r\n   buttonStyle: {\r\n     borderRadius: 5,\r\n     paddingHorizontal: 10,\r\n     paddingVertical: 15,\r\n     marginVertical: 12,\r\n     borderWidth: 1,\r\n-    flexDirection: 'row',\r\n-    alignSelf: 'center',\r\n+    flexDirection: \"row\",\r\n+    alignSelf: \"center\",\r\n     borderColor: COLORS.wingDarkBlue,\r\n-    alignItems: 'center',\r\n+    alignItems: \"center\",\r\n   },\r\n   textButton: {\r\n-    fontFamily: 'SoraRegular',\r\n+    fontFamily: \"SoraRegular\",\r\n     fontSize: SIZES.font,\r\n     color: COLORS.wingDarkBlue,\r\n     marginStart: 10,\r\n   },\r\n   productsContainer: {\r\n-    flexDirection: 'row',\r\n-    justifyContent: 'space-evenly',\r\n-    alignItems: 'center',\r\n+    flexDirection: \"row\",\r\n+    justifyContent: \"space-evenly\",\r\n+    alignItems: \"center\",\r\n     marginVertical: 12,\r\n   },\r\n   debitCreditContainer: {\r\n-    flexDirection: 'row',\r\n+    flexDirection: \"row\",\r\n     marginVertical: 20,\r\n   },\r\n   debitCreditButton: {\r\n     backgroundColor: COLORS.white,\r\n     borderRadius: 5,\r\n     paddingHorizontal: 10,\r\n     paddingVertical: 6,\r\n     borderWidth: 1.5,\r\n-    alignSelf:'stretch',\r\n+    alignSelf: \"stretch\",\r\n     flexGrow: 1,\r\n-    flexDirection: 'row',\r\n-    justifyContent: 'center',\r\n-    alignItems: 'center',\r\n+    flexDirection: \"row\",\r\n+    justifyContent: \"center\",\r\n+    alignItems: \"center\",\r\n     //marginHorizontal: 5,\r\n-    \r\n+\r\n     borderColor: COLORS.wingDarkBlue,\r\n-  // borderColor:'#ed711e'\r\n+    // borderColor:'#ed711e'\r\n   },\r\n   textDebitCredit: {\r\n-    fontFamily: 'SoraMedium',\r\n+    fontFamily: \"SoraMedium\",\r\n     fontSize: SIZES.font,\r\n     color: COLORS.white,\r\n     //marginStart: 10,\r\n   },\r\n-})\r\n+});\r\n"
                },
                {
                    "date": 1675069662093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n       ) {\r\n         textToWrite = \"* Formato inválido\";\r\n       }\r\n       //check if date is in the future\r\n-      else if (date < formattedDate) {\r\n+      else if (date > formattedDate) {\r\n         textToWrite = \"* Data inválida\";\r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1675069670772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,179 +5,183 @@\n   TouchableOpacity,\r\n   useWindowDimensions,\r\n   ScrollView,\r\n   Platform,\r\n-  StatusBar,\r\n-} from \"react-native\";\r\n-import React from \"react\";\r\n-import AuthContext from \"../context/AuthProvider\";\r\n-import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n-import { CATEGORIES, COLORS, SHADOWS, SIZES } from \"../constants\";\r\n-import { useState, useEffect } from \"react\";\r\n-import { StyleSheet } from \"react-native\";\r\n-import { SafeAreaView } from \"react-native\";\r\n-import { serverURL } from \"../config/hosts\";\r\n-import {\r\n-  MaterialIcons,\r\n-  MaterialCommunityIcons,\r\n-  FontAwesome5,\r\n-} from \"@expo/vector-icons\";\r\n-import { CustomButton } from \"../components\";\r\n-import ChooseCategoryModal from \"../components/ChooseCategoryModal\";\r\n-import ProductInputModal from \"../components/ProductInputModal\";\r\n-import ProductTable from \"../components/ProductTable\";\r\n+  StatusBar\r\n+} from 'react-native'\r\n+import React from 'react'\r\n+import AuthContext from '../context/AuthProvider'\r\n+import AsyncStorage from '@react-native-async-storage/async-storage'\r\n+import { CATEGORIES, COLORS, SHADOWS, SIZES } from '../constants'\r\n+import { useState, useEffect } from 'react'\r\n+import { StyleSheet } from 'react-native'\r\n+import { SafeAreaView } from 'react-native'\r\n+import { serverURL } from '../config/hosts'\r\n+import { MaterialIcons, MaterialCommunityIcons, FontAwesome5 } from '@expo/vector-icons'\r\n+import { CustomButton } from '../components'\r\n+import ChooseCategoryModal from '../components/ChooseCategoryModal'\r\n+import ProductInputModal from '../components/ProductInputModal'\r\n+import ProductTable from '../components/ProductTable'\r\n \r\n export default function AddExpenseScreen({ navigation }) {\r\n-  const { height } = useWindowDimensions();\r\n-  const [token, setToken] = useState(\"\");\r\n-  const [title, setTitle] = useState(\"\");\r\n-  const [selectedCategory, setSelectedCategory] = useState(22);\r\n-  const [value, setValue] = useState(\"\");\r\n-  const [description, setDescription] = useState(\"\");\r\n-  const [isModalVisibleCT, setisModalVisibleCT] = useState(false);\r\n-  const [isModalVisible, setIsModalVisible] = useState(false);\r\n-  const [products, setProducts] = useState([]);\r\n-  const [isDebit, setIsDebit] = useState(true);\r\n-  const today = new Date();\r\n-  const formattedDate = today.toISOString().slice(0, 10);\r\n-  const [date, setDate] = useState(formattedDate);\r\n+  const { height } = useWindowDimensions()\r\n+  const [token, setToken] = useState('')\r\n+  const [title, setTitle] = useState('')\r\n+  const [selectedCategory, setSelectedCategory] = useState(22)\r\n+  const [value, setValue] = useState('')\r\n+  const [description, setDescription] = useState('')\r\n+  const [isModalVisibleCT, setisModalVisibleCT] = useState(false)\r\n+  const [isModalVisible, setIsModalVisible] = useState(false)\r\n+  const [products, setProducts] = useState([])\r\n+  const [isDebit, setIsDebit] = useState(true)\r\n+  const today = new Date()\r\n+  const formattedDate = today.toISOString().slice(0, 10)\r\n+  const [date, setDate] = useState(formattedDate)\r\n \r\n   // TODO: Validate form data\r\n-  const [validTitle, setValidTitle] = useState(true);\r\n-  const [validValue, setValidValue] = useState(true);\r\n-  const [validDescription, setValidDescription] = useState(true);\r\n-  const [validDate, setValidDate] = useState(true);\r\n+  const [validTitle, setValidTitle] = useState(true)\r\n+  const [validValue, setValidValue] = useState(true)\r\n+  const [validDescription, setValidDescription] = useState(true)\r\n+  const [validDate, setValidDate] = useState(true)\r\n \r\n+\r\n+\r\n+\r\n+\r\n   useEffect(() => {\r\n-    AsyncStorage.getItem(\"userToken\")\r\n+    AsyncStorage.getItem('userToken')\r\n       .then((userToken) => setToken(JSON.parse(userToken)))\r\n-      .catch((err) => console.log(err));\r\n-  }, []);\r\n+      .catch((err) => console.log(err))\r\n+  }, [])\r\n \r\n+  \r\n   const toggleModalCT = () => {\r\n-    setisModalVisibleCT(!isModalVisibleCT);\r\n-  };\r\n+    setisModalVisibleCT(!isModalVisibleCT)\r\n+  }\r\n \r\n   const handleCategorySelection = (category) => {\r\n-    setSelectedCategory(category);\r\n+    setSelectedCategory(category)\r\n \r\n-    toggleModalCT();\r\n-  };\r\n+    toggleModalCT()\r\n+  }\r\n \r\n   const handleAddProduct = (productInfo) => {\r\n-    setProducts([...products, productInfo]);\r\n-    setIsModalVisible(false);\r\n-  };\r\n+    setProducts([...products, productInfo])\r\n+    setIsModalVisible(false)\r\n+  }\r\n \r\n   const handleCancel = () => {\r\n-    setIsModalVisible(false);\r\n-  };\r\n+    setIsModalVisible(false)\r\n+  }\r\n \r\n   // handle clean form\r\n   function handleCleanForm() {\r\n-    setTitle(\"\");\r\n-    setSelectedCategory(22);\r\n-    setValue(\"\");\r\n-    setDescription(\"\");\r\n-    setProducts([]);\r\n-    setIsDebit(true);\r\n-    setDate(formattedDate);\r\n+    setTitle('')\r\n+    setSelectedCategory(22)\r\n+    setValue('')\r\n+    setDescription('')\r\n+    setProducts([])\r\n+    setIsDebit(true)\r\n+    setDate(formattedDate)\r\n   }\r\n \r\n   function validateForm() {\r\n-    let valid = true;\r\n-    if (title == \"\") {\r\n-      setValidTitle(false);\r\n-      valid = false;\r\n+    let valid = true\r\n+    if (title == '') {\r\n+      setValidTitle(false)\r\n+      valid = false\r\n     } else {\r\n-      setValidTitle(true);\r\n+      setValidTitle(true)\r\n     }\r\n \r\n-    if (value == \"\") {\r\n-      setValidValue(false);\r\n-      valid = false;\r\n+    if (value == '') {\r\n+      setValidValue(false)\r\n+      valid = false\r\n     } else {\r\n-      setValidValue(true);\r\n+      setValidValue(true)\r\n     }\r\n-    if (date == \"\") {\r\n-      setValidDate(false);\r\n-      valid = false;\r\n-    } else if (date > formattedDate) {\r\n-      setValidDate(false);\r\n-      valid = false;\r\n+    if (date == '') {\r\n+      setValidDate(false)\r\n+      valid = false\r\n     }\r\n+    else if ( date > formattedDate) {\r\n+      setValidDate(false)\r\n+      valid = false\r\n+    }\r\n     //check if date is in format yyyy-mm-dd\r\n     else if (date.match(/^\\d{4}-\\d{2}-\\d{2}$/) == null) {\r\n-      setValidDate(false);\r\n-      valid = false;\r\n+      setValidDate(false)\r\n+      valid = false\r\n     } else {\r\n-      setValidDate(true);\r\n+      setValidDate(true)\r\n     }\r\n \r\n-    return valid;\r\n+    return valid\r\n   }\r\n \r\n-  function showErrorField(text) {\r\n-    var textToWrite = \"\";\r\n \r\n-    if (text == \"Título\") {\r\n-      if (!title) {\r\n-        textToWrite = \"* Campo Obrigatório\";\r\n+  function showErrorField(text){\r\n+    var textToWrite = \"\"\r\n+\r\n+    if (text == 'Título'){\r\n+      if (!title){\r\n+        textToWrite = \"* Campo Obrigatório\"\r\n       }\r\n-    } else if (text == \"Valor\") {\r\n-      if (!value) {\r\n-        textToWrite = \"*Obrigatório\";\r\n+    }\r\n+    else if (text == 'Valor'){\r\n+      if (!value){\r\n+        textToWrite = \"*Obrigatório\"\r\n       }\r\n       // check if value is number\r\n-      else if (isNaN(value)) {\r\n-        textToWrite = \"* Valor inválido\";\r\n+      else if (isNaN(value)){\r\n+        textToWrite = \"* Valor inválido\"\r\n       }\r\n-    } else if (text == \"Data\") {\r\n-      if (!date) {\r\n-        textToWrite = \"*Obrigatório\";\r\n+    }\r\n+    else if (text == 'Data'){\r\n+      if (!date){\r\n+        textToWrite = \"*Obrigatório\"\r\n       }\r\n       //check if date is valid\r\n-      else if (\r\n-        !date.includes(\"-\") ||\r\n-        date.length != 10 ||\r\n-        date.split(\"-\")[0].length != 4 ||\r\n-        date.split(\"-\")[1].length != 2 ||\r\n-        date.split(\"-\")[2].length != 2\r\n-      ) {\r\n-        textToWrite = \"* Formato inválido\";\r\n+    else if (!date.includes(\"-\") ||\r\n+      date.length != 10 ||\r\n+      date.split(\"-\")[0].length != 4 ||\r\n+      date.split(\"-\")[1].length != 2 ||\r\n+      date.split(\"-\")[2].length != 2     \r\n+        ){\r\n+        textToWrite = \"* Formato inválido\"\r\n       }\r\n       //check if date is in the future\r\n-      else if (date > formattedDate) {\r\n-        textToWrite = \"* Data inválida\";\r\n+      else if (date > formattedDate){\r\n+        textToWrite = \"* Data inválida\"\r\n       }\r\n     }\r\n \r\n-    return (\r\n-      <Text style={{ alignSelf: \"flex-start\" }}>\r\n-        <Text style={styles.textTag}>{text}</Text>\r\n-        <Text style={styles.error}> {textToWrite}</Text>\r\n-      </Text>\r\n-    );\r\n-  }\r\n \r\n+\r\n+    return(<Text style= {{alignSelf: 'flex-start'}}>\r\n+              <Text style={styles.textTag}>{text}</Text>\r\n+              <Text style={styles.error}> {textToWrite}</Text>\r\n+            </Text>)\r\n+    }\r\n+\r\n   function handleDeleteProduct(index) {\r\n     // Delete product at the specified index\r\n-    const newProducts = [...products];\r\n-    newProducts.splice(index, 1);\r\n-    setProducts(newProducts);\r\n+    const newProducts = [...products]\r\n+    newProducts.splice(index, 1)\r\n+    setProducts(newProducts)\r\n   }\r\n \r\n   function getCategoryIcon(selectedCategory) {\r\n     //console.log('get icon: ' + selectedCategory)\r\n     // loop through the CATEGORIES object\r\n     // get icon by key\r\n     for (const [key, value] of Object.entries(CATEGORIES)) {\r\n       if (key == selectedCategory) {\r\n-        return value.icon;\r\n+        return value.icon\r\n       }\r\n     }\r\n     // if no match is found, return null\r\n-    return null;\r\n+    return null\r\n   }\r\n \r\n   //  get category name by key\r\n   function getCategoryName(selectedCategory) {\r\n@@ -185,68 +189,69 @@\n     // loop through the CATEGORIES object\r\n     // get icon by key\r\n     for (const [key, value] of Object.entries(CATEGORIES)) {\r\n       if (key == selectedCategory) {\r\n-        return value.name;\r\n+        return value.name\r\n       }\r\n     }\r\n     // if no match is found, return null\r\n-    return null;\r\n+    return null\r\n   }\r\n \r\n-  function typeContainer() {\r\n-    return (\r\n-      <View style={styles.debitCreditContainer}>\r\n-        <TouchableOpacity\r\n-          style={[\r\n-            styles.debitCreditButton,\r\n-            {\r\n-              borderTopRightRadius: 0,\r\n-              borderBottomRightRadius: 0,\r\n-              backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n-            },\r\n-          ]}\r\n-          onPress={() => setIsDebit(true)}\r\n-        >\r\n-          <Text\r\n-            style={[\r\n-              styles.textDebitCredit,\r\n-              {\r\n-                color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n-              },\r\n-            ]}\r\n-          >\r\n-            Débito\r\n-          </Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity\r\n-          style={[\r\n-            styles.debitCreditButton,\r\n-            {\r\n-              borderTopLeftRadius: 0,\r\n-              borderBottomLeftRadius: 0,\r\n-              backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n-            },\r\n-          ]}\r\n-          onPress={() => setIsDebit(false)}\r\n-        >\r\n-          <Text\r\n-            style={[\r\n-              styles.textDebitCredit,\r\n-              {\r\n-                color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n-              },\r\n-            ]}\r\n-          >\r\n-            Crédito\r\n-          </Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-    );\r\n+  function typeContainer () {\r\n+   return (\r\n+    <View style={styles.debitCreditContainer}>\r\n+    <TouchableOpacity\r\n+      style={[\r\n+        styles.debitCreditButton,\r\n+        {\r\n+          borderTopRightRadius: 0,\r\n+          borderBottomRightRadius: 0,\r\n+          backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n+        },\r\n+      ]}\r\n+      onPress={() => setIsDebit(true)}\r\n+    >\r\n+      <Text\r\n+        style={[\r\n+          styles.textDebitCredit,\r\n+          {\r\n+            color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n+          },\r\n+        ]}\r\n+      >\r\n+        Débito\r\n+      </Text>\r\n+    </TouchableOpacity>\r\n+    <TouchableOpacity\r\n+      style={[\r\n+        styles.debitCreditButton,\r\n+        {\r\n+          borderTopLeftRadius: 0,\r\n+          borderBottomLeftRadius: 0,\r\n+          backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue ,\r\n+        },\r\n+      ]}\r\n+      onPress={() => setIsDebit(false)}\r\n+    >\r\n+      <Text\r\n+        style={[\r\n+          styles.textDebitCredit,\r\n+          {\r\n+            color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n+          },\r\n+        ]}\r\n+      >\r\n+        Crédito\r\n+      </Text>\r\n+    </TouchableOpacity>\r\n+  </View>\r\n+    )\r\n   }\r\n+    \r\n \r\n-  const categoryIcon = getCategoryIcon(selectedCategory);\r\n-  const { width } = useWindowDimensions();\r\n+  const categoryIcon = getCategoryIcon(selectedCategory)\r\n+  const { width } = useWindowDimensions()\r\n \r\n   // router.post('/createPurchase/',function(req,res){\r\n   /* Purchases.addPurchase(req.body.is_recurring,\r\n    req.body.date, \r\n@@ -259,15 +264,15 @@\n    req.body.products)\r\n    */\r\n \r\n   const handleFormSubmission = async () => {\r\n-    if (products.length == 0) {\r\n+    if(products.length == 0){\r\n       products.push({\r\n         quantity: 1,\r\n         value: value,\r\n         idcategory: selectedCategory,\r\n-        description: \"Não especificado\",\r\n-      });\r\n+        description: 'Não especificado',\r\n+      })\r\n     }\r\n     const newData = {\r\n       // falta a CATEGORIA\r\n       is_recurring: false,\r\n@@ -275,59 +280,51 @@\n       value: value,\r\n       title: title,\r\n       description: description,\r\n       idUser: token.id,\r\n-      seller: \"\",\r\n-      type: isDebit ? \"Debito\" : \"Credito\",\r\n+      seller: '',\r\n+      type: isDebit ? 'Debito' : 'Credito',\r\n       products: products, // quantity , value , idcategory , description\r\n-    };\r\n+    }\r\n     const resp = await fetch(`${serverURL}/purchases/createPurchase/`, {\r\n-      method: \"POST\",\r\n+      method: 'POST',\r\n       headers: {\r\n-        \"Content-Type\": \"application/json\",\r\n+        'Content-Type': 'application/json',\r\n       },\r\n       body: JSON.stringify(newData),\r\n     }).then((resp) => {\r\n       if (resp.status === 200) {\r\n-        alert(\"Despesa adicionada com sucesso!\");\r\n-        navigation.navigate(\"Casa\", { refresh: true });\r\n+        alert('Despesa adicionada com sucesso!')\r\n+        navigation.navigate('Casa', { refresh: true })\r\n       } else {\r\n-        alert(\"Erro ao adicionar despesa!\");\r\n+        alert('Erro ao adicionar despesa!')\r\n       }\r\n-    });\r\n-  };\r\n+    })\r\n+  }\r\n \r\n+\r\n+\r\n+  \r\n   return (\r\n-    console.log(\r\n-      \"--------------\\nToken data AddExpense: \" +\r\n-        JSON.stringify(token) +\r\n-        \"\\n--------------\"\r\n-    ),\r\n+    console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n     (\r\n       <SafeAreaView style={styles.root}>\r\n         <ScrollView showsVerticalScrollIndicator={false}>\r\n           <View style={styles.infoContainer}>\r\n             {typeContainer()}\r\n \r\n             {/* Title input */}\r\n \r\n-            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n-              {validTitle ? (\r\n-                <Text style={styles.textTag}>Título</Text>\r\n-              ) : (\r\n-                showErrorField(\"Título\")\r\n-              )}\r\n-              {/* Button with camera icon to navigate to OCR aligned to right */}\r\n-              <TouchableOpacity\r\n-                style={{ position: \"absolute\", right: 0 }}\r\n-                onPress={() => navigation.navigate(\"OCR\")}\r\n-              >\r\n-                <MaterialIcons\r\n-                  name=\"camera-alt\"\r\n-                  size={24}\r\n-                  color={COLORS.wingDarkBlue}\r\n-                />\r\n-              </TouchableOpacity>\r\n+            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n+            {validTitle ? (<Text style={styles.textTag}>Título</Text>) : showErrorField('Título')}\r\n+            {/* Button with camera icon to navigate to OCR aligned to right */}\r\n+            <TouchableOpacity\r\n+              style={{ position: 'absolute', right: 0 }}\r\n+              onPress={() => navigation.navigate('OCR')}\r\n+            >\r\n+              <MaterialIcons name=\"camera-alt\" size={24} color={COLORS.wingDarkBlue} />\r\n+            </TouchableOpacity>\r\n+        \r\n             </View>\r\n             <View style={[styles.buttonStyle, { width: width * 0.8 }]}>\r\n               <TextInput\r\n                 placeholder=\"Ex: Conta de luz\"\r\n@@ -337,30 +334,21 @@\n                 {title}\r\n               </TextInput>\r\n             </View>\r\n \r\n+\r\n             {/* Value and Date input */}\r\n             <View\r\n               style={[\r\n-                {\r\n-                  flexDirection: \"row\",\r\n-                  alignContent: \"space-between\",\r\n-                  alignItems: \"stretch\",\r\n-                },\r\n+                { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n               ]}\r\n             >\r\n-              <View style={{ flex: 1, padding: 0, flexWrap: \"wrap\" }}>\r\n-                {validValue ? (\r\n-                  <Text style={styles.textTag}>Valor</Text>\r\n-                ) : (\r\n-                  showErrorField(\"Valor\")\r\n-                )}\r\n-                <View style={[styles.buttonStyle, { width: width * 0.36 }]}>\r\n-                  <MaterialIcons\r\n-                    name=\"euro\"\r\n-                    size={18}\r\n-                    color={COLORS.wingDarkBlue}\r\n-                  />\r\n+              <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n+                {validValue ? (<Text style={styles.textTag}>Valor</Text>) : showErrorField('Valor')}\r\n+                <View\r\n+                  style={[styles.buttonStyle, { width: width * 0.36}]}\r\n+                >\r\n+                  <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n                   <TextInput\r\n                     placeholder=\"10.25\"\r\n                     onChangeText={setValue}\r\n                     style={styles.textButton}\r\n@@ -368,20 +356,14 @@\n                     {value}\r\n                   </TextInput>\r\n                 </View>\r\n               </View>\r\n-              <View style={{ flex: 1, padding: 0, flexWrap: \"wrap\" }}>\r\n-                {validDate ? (\r\n-                  <Text style={styles.textTag}>Data</Text>\r\n-                ) : (\r\n-                  showErrorField(\"Data\")\r\n-                )}\r\n-                <View style={[styles.buttonStyle, { width: width * 0.4 }]}>\r\n-                  <MaterialIcons\r\n-                    name=\"date-range\"\r\n-                    size={18}\r\n-                    color={COLORS.wingDarkBlue}\r\n-                  />\r\n+              <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n+                {validDate ? (<Text style={styles.textTag}>Data</Text>) : showErrorField('Data')}\r\n+                <View\r\n+                  style={[styles.buttonStyle, { width: width * 0.4}]}\r\n+                >\r\n+                  <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n                   <TextInput\r\n                     placeholder=\"AAAA-MM-DD\"\r\n                     onChangeText={setDate}\r\n                     style={styles.textButton}\r\n@@ -400,11 +382,9 @@\n                   style={[styles.buttonStyle, { width: width * 0.8 }]}\r\n                   onPress={() => toggleModalCT()}\r\n                 >\r\n                   {getCategoryIcon(selectedCategory)}\r\n-                  <Text style={styles.textButton}>\r\n-                    {getCategoryName(selectedCategory)}\r\n-                  </Text>\r\n+                  <Text style={styles.textButton}>{getCategoryName(selectedCategory)}</Text>\r\n                 </TouchableOpacity>\r\n                 <ChooseCategoryModal\r\n                   isModalVisibleCT={isModalVisibleCT}\r\n                   setisModalVisibleCT={setisModalVisibleCT}\r\n@@ -413,29 +393,25 @@\n               </>\r\n             ) : null}\r\n \r\n             {/* Description input */}\r\n-            {validDescription ? (\r\n-              <Text style={styles.textTag}>Descrição</Text>\r\n-            ) : (\r\n-              showErrorField(\"Descrição\")\r\n-            )}\r\n+            {validDescription ? (<Text style={styles.textTag}>Descrição</Text>) : showErrorField('Descrição') }\r\n \r\n             <TextInput\r\n               multiline={true}\r\n               numberOfLines={2}\r\n               value={description}\r\n               onChangeText={setDescription}\r\n-              placeholder={\"Café com leite e bolo\"}\r\n+              placeholder={'Café com leite e bolo'}\r\n               style={[\r\n                 {\r\n                   marginVertical: 12,\r\n                   borderRadius: 5,\r\n                   paddingTop: 15,\r\n                   padding: 15,\r\n                   borderWidth: 1,\r\n                   borderColor: COLORS.wingDarkBlue,\r\n-                  fontFamily: \"SoraRegular\",\r\n+                  fontFamily: 'SoraRegular',\r\n                   fontSize: SIZES.font,\r\n                   color: COLORS.wingDarkBlue,\r\n                   width: width * 0.8,\r\n                   minHeight: 100,\r\n@@ -456,9 +432,9 @@\n               />\r\n             ) : (\r\n               <Text\r\n                 style={{\r\n-                  fontFamily: \"SoraRegular\",\r\n+                  fontFamily: 'SoraRegular',\r\n                   fontSize: SIZES.font,\r\n                   color: COLORS.wingDarkBlue,\r\n                   marginBottom: 12,\r\n                 }}\r\n@@ -472,24 +448,18 @@\n                 {\r\n                   width: width * 0.3,\r\n                   borderRadius: 30,\r\n                   paddingVertical: 3,\r\n-                  alignSelf: \"flex-end\",\r\n+                  alignSelf: 'flex-end',\r\n                   marginVertical: 0,\r\n                   borderColor: COLORS.wingDarkBlue,\r\n                   borderWidth: 1,\r\n                 },\r\n               ]}\r\n               onPress={() => setIsModalVisible(true)}\r\n             >\r\n-              <MaterialCommunityIcons\r\n-                name=\"plus\"\r\n-                size={24}\r\n-                color={COLORS.wingDarkBlue}\r\n-              />\r\n-              <Text style={[styles.textButton, { marginStart: 2 }]}>\r\n-                Adicionar\r\n-              </Text>\r\n+              <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n+              <Text style={[styles.textButton, { marginStart: 2 }]}>Adicionar</Text>\r\n             </TouchableOpacity>\r\n \r\n             <ProductInputModal\r\n               isModalVisible={isModalVisible}\r\n@@ -503,18 +473,21 @@\n \r\n           <View style={styles.containerBTN}>\r\n             <CustomButton\r\n               onPress={() => {\r\n-                if (validateForm() == true) {\r\n-                  handleCleanForm(), handleFormSubmission();\r\n-                }\r\n+\r\n+              if (validateForm() == true) {\r\n+                handleCleanForm(),\r\n+                handleFormSubmission()\r\n+              }\r\n+               \r\n               }}\r\n               text=\"Adicionar Movimento\"\r\n               type=\"TERTIARY\"\r\n               widthScale={0.8}\r\n             ></CustomButton>\r\n \r\n-            <CustomButton\r\n+<CustomButton\r\n               onPress={() => handleCleanForm()}\r\n               text=\"Limpar Dados\"\r\n               type=\"SECONDARY\"\r\n               widthScale={0.8}\r\n@@ -522,16 +495,16 @@\n           </View>\r\n         </ScrollView>\r\n       </SafeAreaView>\r\n     )\r\n-  );\r\n+  )\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n   root: {\r\n     flex: 1,\r\n     backgroundColor: COLORS.white,\r\n-    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n+    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0 \r\n   },\r\n   infoContainer: {\r\n     marginHorizontal: 40,\r\n     marginBottom: 40,\r\n@@ -541,75 +514,75 @@\n     fontFamily: \"SoraMedium\",\r\n     fontSize: 15,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n-  error: {\r\n+  error : {\r\n     color: \"red\",\r\n     fontFamily: \"SoraMedium\",\r\n     fontSize: SIZES.small,\r\n     alignSelf: \"flex-start\",\r\n   },\r\n   textInfo: {\r\n-    fontFamily: \"SoraLight\",\r\n+    fontFamily: 'SoraLight',\r\n     fontSize: SIZES.medium,\r\n   },\r\n   containerBTN: {\r\n     flex: 1,\r\n-    alignItems: \"flex-start\",\r\n+    alignItems: 'flex-start',\r\n     marginHorizontal: 40,\r\n     marginBottom: 100,\r\n   },\r\n   buttonText: {\r\n-    color: \"white\",\r\n+    color: 'white',\r\n     fontSize: SIZES.small,\r\n-    fontFamily: \"SoraBold\",\r\n+    fontFamily: 'SoraBold',\r\n   },\r\n   buttonStyle: {\r\n     borderRadius: 5,\r\n     paddingHorizontal: 10,\r\n     paddingVertical: 15,\r\n     marginVertical: 12,\r\n     borderWidth: 1,\r\n-    flexDirection: \"row\",\r\n-    alignSelf: \"center\",\r\n+    flexDirection: 'row',\r\n+    alignSelf: 'center',\r\n     borderColor: COLORS.wingDarkBlue,\r\n-    alignItems: \"center\",\r\n+    alignItems: 'center',\r\n   },\r\n   textButton: {\r\n-    fontFamily: \"SoraRegular\",\r\n+    fontFamily: 'SoraRegular',\r\n     fontSize: SIZES.font,\r\n     color: COLORS.wingDarkBlue,\r\n     marginStart: 10,\r\n   },\r\n   productsContainer: {\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"space-evenly\",\r\n-    alignItems: \"center\",\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-evenly',\r\n+    alignItems: 'center',\r\n     marginVertical: 12,\r\n   },\r\n   debitCreditContainer: {\r\n-    flexDirection: \"row\",\r\n+    flexDirection: 'row',\r\n     marginVertical: 20,\r\n   },\r\n   debitCreditButton: {\r\n     backgroundColor: COLORS.white,\r\n     borderRadius: 5,\r\n     paddingHorizontal: 10,\r\n     paddingVertical: 6,\r\n     borderWidth: 1.5,\r\n-    alignSelf: \"stretch\",\r\n+    alignSelf:'stretch',\r\n     flexGrow: 1,\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"center\",\r\n-    alignItems: \"center\",\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'center',\r\n+    alignItems: 'center',\r\n     //marginHorizontal: 5,\r\n-\r\n+    \r\n     borderColor: COLORS.wingDarkBlue,\r\n-    // borderColor:'#ed711e'\r\n+  // borderColor:'#ed711e'\r\n   },\r\n   textDebitCredit: {\r\n-    fontFamily: \"SoraMedium\",\r\n+    fontFamily: 'SoraMedium',\r\n     fontSize: SIZES.font,\r\n     color: COLORS.white,\r\n     //marginStart: 10,\r\n   },\r\n-});\r\n+})\r\n"
                }
            ],
            "date": 1674925012064,
            "name": "Commit-0",
            "content": "import {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  ScrollView,\r\n} from 'react-native'\r\nimport React from 'react'\r\nimport AuthContext from '../context/AuthProvider'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { CATEGORIES, COLORS, SHADOWS, SIZES } from '../constants'\r\nimport { useState, useEffect } from 'react'\r\nimport { StyleSheet } from 'react-native'\r\nimport { SafeAreaView } from 'react-native'\r\nimport { serverURL } from '../config/hosts'\r\nimport { MaterialIcons, MaterialCommunityIcons, FontAwesome5 } from '@expo/vector-icons'\r\nimport { CustomButton } from '../components'\r\nimport ChooseCategoryModal from '../components/ChooseCategoryModal'\r\nimport ProductInputModal from '../components/ProductInputModal'\r\nimport ProductTable from '../components/ProductTable'\r\n\r\nexport default function AddExpenseScreen({ navigation }) {\r\n  const { height } = useWindowDimensions()\r\n  const [token, setToken] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [selectedCategory, setSelectedCategory] = useState(22)\r\n  const [value, setValue] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [isModalVisibleCT, setisModalVisibleCT] = useState(false)\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n  const [products, setProducts] = useState([])\r\n  const [isDebit, setIsDebit] = useState(true)\r\n  const today = new Date()\r\n  const formattedDate = today.toISOString().slice(0, 10)\r\n  const [date, setDate] = useState(formattedDate)\r\n\r\n  // TODO: Validate form data\r\n\r\n  useEffect(() => {\r\n    AsyncStorage.getItem('userToken')\r\n      .then((userToken) => setToken(JSON.parse(userToken)))\r\n      .catch((err) => console.log(err))\r\n  }, [])\r\n\r\n  \r\n  const toggleModalCT = () => {\r\n    setisModalVisibleCT(!isModalVisibleCT)\r\n  }\r\n\r\n  const handleCategorySelection = (category) => {\r\n    setSelectedCategory(category)\r\n\r\n    toggleModalCT()\r\n  }\r\n\r\n  const handleAddProduct = (productInfo) => {\r\n    setProducts([...products, productInfo])\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  // handle clean form\r\n  function handleCleanForm() {\r\n    setTitle('')\r\n    setSelectedCategory(22)\r\n    setValue('')\r\n    setDescription('')\r\n    setProducts([])\r\n    setIsDebit(true)\r\n    setDate(formattedDate)\r\n  }\r\n\r\n  function handleDeleteProduct(index) {\r\n    // Delete product at the specified index\r\n    const newProducts = [...products]\r\n    newProducts.splice(index, 1)\r\n    setProducts(newProducts)\r\n  }\r\n\r\n  function getCategoryIcon(selectedCategory) {\r\n    //console.log('get icon: ' + selectedCategory)\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.icon\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n  //  get category name by key\r\n  function getCategoryName(selectedCategory) {\r\n    //console.log('get name: ' + selectedCategory)\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.name\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n  function typeContainer () {\r\n   return (\r\n    <View style={styles.debitCreditContainer}>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopRightRadius: 0,\r\n          borderBottomRightRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(true)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n          },\r\n        ]}\r\n      >\r\n        Débito\r\n      </Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopLeftRadius: 0,\r\n          borderBottomLeftRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue ,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(false)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n          },\r\n        ]}\r\n      >\r\n        Crédito\r\n      </Text>\r\n    </TouchableOpacity>\r\n  </View>\r\n    )\r\n  }\r\n    \r\n\r\n  const categoryIcon = getCategoryIcon(selectedCategory)\r\n  const { width } = useWindowDimensions()\r\n\r\n  // router.post('/createPurchase/',function(req,res){\r\n  /* Purchases.addPurchase(req.body.is_recurring,\r\n   req.body.date, \r\n   req.body.value,\r\n   req.body.title, \r\n   req.body.description, \r\n   req.body.idUser, \r\n   req.body.seller,\r\n   req.body.type,\r\n   req.body.products)\r\n   */\r\n\r\n  const handleFormSubmission = async () => {\r\n    if(products.length == 0){\r\n      products.push({\r\n        quantity: 1,\r\n        value: value,\r\n        idcategory: selectedCategory,\r\n        description: 'Não especificado',\r\n      })\r\n    }\r\n    const newData = {\r\n      // falta a CATEGORIA\r\n      is_recurring: false,\r\n      date: date,\r\n      value: value,\r\n      title: title,\r\n      description: description,\r\n      idUser: token.id,\r\n      seller: '',\r\n      type: isDebit ? 'Debito' : 'Credito',\r\n      products: products, // quantity , value , idcategory , description\r\n    }\r\n    const resp = await fetch(`${serverURL}/purchases/createPurchase/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newData),\r\n    }).then((resp) => {\r\n      if (resp.status === 200) {\r\n        alert('Despesa adicionada com sucesso!')\r\n        navigation.navigate('Casa', { refresh: true })\r\n      } else {\r\n        alert('Erro ao adicionar despesa!')\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    console.log('--------------\\nToken data AddExpense: ' + JSON.stringify(token) + '\\n--------------'),\r\n    (\r\n      <SafeAreaView style={styles.root}>\r\n        <ScrollView showsVerticalScrollIndicator={false}>\r\n          <View style={styles.infoContainer}>\r\n            {typeContainer()}\r\n\r\n            {/* Title input */}\r\n\r\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n            <Text style={styles.textTag}>Título</Text>\r\n            {/* Button with camera icon to navigate to OCR aligned to right */}\r\n            <TouchableOpacity\r\n              style={{ position: 'absolute', right: 0 }}\r\n              onPress={() => navigation.navigate('OCR')}\r\n            >\r\n              <MaterialIcons name=\"camera-alt\" size={24} color={COLORS.wingDarkBlue} />\r\n            </TouchableOpacity>\r\n        \r\n            </View>\r\n            <View style={[styles.buttonStyle, { width: width * 0.8 }]}>\r\n              <TextInput\r\n                placeholder=\"Ex: Conta de luz\"\r\n                onChangeText={setTitle}\r\n                style={styles.textButton}\r\n              >\r\n                {title}\r\n              </TextInput>\r\n            </View>\r\n\r\n\r\n            {/* Value and Date input */}\r\n            <View\r\n              style={[\r\n                { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n              ]}\r\n            >\r\n              <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n                <Text style={styles.textTag}>Valor</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.36}]}\r\n                >\r\n                  <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n                  <TextInput\r\n                    placeholder=\"10.25\"\r\n                    onChangeText={setValue}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {value}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n              <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n                <Text style={styles.textTag}>Data</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.4}]}\r\n                >\r\n                  <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n                  <TextInput\r\n                    placeholder=\"AAAA-MM-DD\"\r\n                    onChangeText={setDate}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {date}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n            </View>\r\n\r\n            {/* Category input */}\r\n            {products.length == 0 ? (\r\n              <>\r\n                <Text style={styles.textTag}>Categoria</Text>\r\n                <TouchableOpacity\r\n                  style={[styles.buttonStyle, { width: width * 0.8 }]}\r\n                  onPress={() => toggleModalCT()}\r\n                >\r\n                  {getCategoryIcon(selectedCategory)}\r\n                  <Text style={styles.textButton}>{getCategoryName(selectedCategory)}</Text>\r\n                </TouchableOpacity>\r\n                <ChooseCategoryModal\r\n                  isModalVisibleCT={isModalVisibleCT}\r\n                  setisModalVisibleCT={setisModalVisibleCT}\r\n                  setSelectedCategory={handleCategorySelection}\r\n                />\r\n              </>\r\n            ) : null}\r\n\r\n            {/* Description input */}\r\n            <Text style={styles.textTag}>Descrição</Text>\r\n\r\n            <TextInput\r\n              multiline={true}\r\n              numberOfLines={2}\r\n              value={description}\r\n              onChangeText={setDescription}\r\n              placeholder={'Café com leite e bolo'}\r\n              style={[\r\n                {\r\n                  marginVertical: 12,\r\n                  borderRadius: 5,\r\n                  paddingTop: 15,\r\n                  padding: 15,\r\n                  borderWidth: 1,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  width: width * 0.8,\r\n                  minHeight: 100,\r\n                },\r\n              ]}\r\n            />\r\n\r\n            {/* Products input */}\r\n\r\n            <Text style={[styles.textTag, { marginBottom: 12 }]}>Produtos</Text>\r\n\r\n            {/* Product table component */}\r\n            {products.length > 0 ? (\r\n              <ProductTable\r\n                products={products}\r\n                handleDeleteProduct={handleDeleteProduct}\r\n                getCategoryIcon={getCategoryIcon}\r\n              />\r\n            ) : (\r\n              <Text\r\n                style={{\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  marginBottom: 12,\r\n                }}\r\n              >\r\n                Nenhum produto adicionado\r\n              </Text>\r\n            )}\r\n            <TouchableOpacity\r\n              style={[\r\n                styles.buttonStyle,\r\n                {\r\n                  width: width * 0.3,\r\n                  borderRadius: 30,\r\n                  paddingVertical: 3,\r\n                  alignSelf: 'flex-end',\r\n                  marginVertical: 0,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  borderWidth: 1,\r\n                },\r\n              ]}\r\n              onPress={() => setIsModalVisible(true)}\r\n            >\r\n              <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n              <Text style={[styles.textButton, { marginStart: 2 }]}>Adicionar</Text>\r\n            </TouchableOpacity>\r\n\r\n            <ProductInputModal\r\n              isModalVisible={isModalVisible}\r\n              generalCategory={selectedCategory}\r\n              getCategoryIcon={getCategoryIcon}\r\n              getCategoryName={getCategoryName}\r\n              onSave={handleAddProduct}\r\n              onCancel={handleCancel}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.containerBTN}>\r\n            <CustomButton\r\n              onPress={() => {\r\n                handleCleanForm(),\r\n                handleFormSubmission()\r\n              }}\r\n              text=\"Adicionar Movimento\"\r\n              type=\"TERTIARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>\r\n\r\n<CustomButton\r\n              onPress={() => handleCleanForm()}\r\n              text=\"Limpar Dados\"\r\n              type=\"SECONDARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>\r\n          </View>\r\n        </ScrollView>\r\n      </SafeAreaView>\r\n    )\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: COLORS.white,\r\n  },\r\n  infoContainer: {\r\n    marginHorizontal: 40,\r\n    marginBottom: 40,\r\n  },\r\n  textTag: {\r\n    fontFamily: 'SoraBold',\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue,\r\n  },\r\n  textInfo: {\r\n    fontFamily: 'SoraLight',\r\n    fontSize: SIZES.medium,\r\n  },\r\n  containerBTN: {\r\n    flex: 1,\r\n    alignItems: 'flex-start',\r\n    marginHorizontal: 40,\r\n    marginBottom: 100,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: SIZES.small,\r\n    fontFamily: 'SoraBold',\r\n  },\r\n  buttonStyle: {\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 15,\r\n    marginVertical: 12,\r\n    borderWidth: 1,\r\n    flexDirection: 'row',\r\n    alignSelf: 'center',\r\n    borderColor: COLORS.wingDarkBlue,\r\n    alignItems: 'center',\r\n  },\r\n  textButton: {\r\n    fontFamily: 'SoraRegular',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.wingDarkBlue,\r\n    marginStart: 10,\r\n  },\r\n  productsContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    marginVertical: 12,\r\n  },\r\n  debitCreditContainer: {\r\n    flexDirection: 'row',\r\n    marginVertical: 20,\r\n  },\r\n  debitCreditButton: {\r\n    backgroundColor: COLORS.white,\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 6,\r\n    borderWidth: 1.5,\r\n    alignSelf:'stretch',\r\n    flexGrow: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    //marginHorizontal: 5,\r\n    \r\n    borderColor: COLORS.wingDarkBlue,\r\n  // borderColor:'#ed711e'\r\n  },\r\n  textDebitCredit: {\r\n    fontFamily: 'SoraMedium',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.white,\r\n    //marginStart: 10,\r\n  },\r\n})\r\n"
        }
    ]
}