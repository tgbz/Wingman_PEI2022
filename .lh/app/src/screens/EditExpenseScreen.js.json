{
    "sourceFile": "app/src/screens/EditExpenseScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1674928251373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674928266264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,9 @@\n             <TouchableOpacity\r\n               style={[\r\n                 styles.buttonStyle,\r\n                 {\r\n-                  width: width * 0.3,\r\n+                  width: width * 0.35,\r\n                   borderRadius: 30,\r\n                   paddingVertical: 3,\r\n                   alignSelf: 'flex-end',\r\n                   marginVertical: 0,\r\n@@ -493,9 +493,9 @@\n               ]}\r\n               onPress={() => setIsModalVisible(true)}\r\n             >\r\n               <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n-              <Text style={[styles.textButton, { marginStart: 1 }]}>Adicionar</Text>\r\n+              <Text style={[styles.textButton, { marginStart: 2 }]}>Adicionar</Text>\r\n             </TouchableOpacity>\r\n \r\n             <ProductInputModal\r\n               isModalVisible={isModalVisible}\r\n"
                }
            ],
            "date": 1674928251373,
            "name": "Commit-0",
            "content": "import { View, Text, Image, TouchableOpacity, useWindowDimensions, TextInput } from 'react-native'\r\nimport React from 'react'\r\nimport AuthContext from '../context/AuthProvider'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { CATEGORIES, COLORS, SHADOWS, SIZES, FONTS } from '../constants'\r\nimport { useState, useEffect } from 'react'\r\nimport { StyleSheet } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { SafeAreaView } from 'react-native'\r\nimport { serverURL } from '../config/hosts'\r\nimport { CustomBackButton, CustomButton, CustomInput, CustomTextButton } from '../components'\r\nimport { SelectList } from 'react-native-dropdown-select-list'\r\nimport { useRoute } from \"@react-navigation/native\"\r\nimport { MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons'\r\nimport ChooseCategoryModal from '../components/ChooseCategoryModal'\r\nimport ProductInputModal from '../components/ProductInputModal'\r\nimport ProductTable from '../components/ProductTable'\r\nimport { set } from 'react-native-reanimated'\r\n\r\n\r\nexport default function EditExpenseScreen({ navigation }) {\r\n  const { height,width } = useWindowDimensions()\r\n  const [token, setToken] = useState('')\r\n  const route = useRoute()\r\n  const idExpense = route.params?.idExpense;\r\n  const originOCR =  route.params?.originOCR\r\n  //console.log(route.params)\r\n  //: true, products: products, genInfo: generalInfo\r\n  const [title, setTitle] = useState('')\r\n  const [selectedCategory, setSelectedCategory] = useState(22)\r\n  const [value, setValue] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [isModalVisibleCT, setisModalVisibleCT] = useState(false)\r\n  const [isModalVisible, setIsModalVisible] = useState(false)\r\n  const [products, setProducts] = useState([])\r\n  const [isDebit, setIsDebit] = useState(true)\r\n  const today = new Date()\r\n  const formattedDate = today.toISOString().slice(0, 10)\r\n  const [date, setDate] = useState(formattedDate)\r\n\r\n  useEffect(() => {\r\n    AsyncStorage.getItem('userToken')\r\n      .then((userToken) => setToken(JSON.parse(userToken)))\r\n      .catch((err) => console.log(err))\r\n  }, [])\r\n\r\n  \r\n  useEffect(() => {\r\n    if (token.id) {\r\n      //console.log(\"origem OCR\", originOCR)\r\n      if (!originOCR){\r\n      fetchData(token)}\r\n    \r\n      else fetchDataOCR()\r\n      }\r\n  }, [token])\r\n\r\n\r\n\r\nfunction fetchDataOCR () {\r\n  //setpurchaseData(purchase)\r\n  let infogen = route.params?.genInfo\r\n  let products = route.params?.products\r\n  setTitle(infogen.market)\r\n  setSelectedCategory(22)\r\n  setValue(infogen.total)\r\n  setDescription(infogen.market)\r\n  //if (infogen.date==null){infogen.date = Date.now()}\r\n  setDate(treatDate(infogen.date))\r\n  setProducts(products)\r\n    setIsDebit(true)\r\n  if (products.length == 1 && products[0].description == 'Não especificado') {\r\n    setSelectedCategory(purchase.products[0].idcategory)\r\n  }\r\n}\r\n\r\n\r\n  const [purchaseData,setpurchaseData] = useState([])\r\n\r\n  // so há um produto que é o criado automaticamente quando a compra é criada sem produtos\r\n  const verificationProducts = (products.length == 1 && products[0].description == 'Não especificado')\r\n\r\n  const fetchData = async (token) => {\r\n    const resp = await fetch(`${serverURL}/purchases/getPurchase/${idExpense}`)\r\n    const purchase = await resp.json()\r\n    setpurchaseData(purchase)\r\n    setTitle(purchase.title)\r\n    if (purchase.idcategory == null) {\r\n      setSelectedCategory(22)\r\n    } else {\r\n    setSelectedCategory(purchase.idcategory)\r\n    }\r\n    setValue(purchase.value)\r\n    setDescription(purchase.description)\r\n    setDate(treatDate(purchase.date))\r\n    setProducts(purchase.products)\r\n    if(purchase.type == 'Debito') {\r\n      setIsDebit(true)\r\n    } else {\r\n      setIsDebit(false)\r\n    }\r\n    if (purchase.products.length == 1 && purchase.products[0].description == 'Não especificado') {\r\n      setSelectedCategory(purchase.products[0].idcategory)\r\n    }\r\n  }\r\n\r\n  function treatDate (date) {\r\n    //Obtain the first 10 caracteres: data\r\n    if (typeof date === 'string') {\r\n      return date.slice(0, 10)\r\n  }\r\n    if (date === null){\r\n      var date = new Date();\r\n\t    return date.getFullYear()+\"-\"+(date.getMonth()+1)+\"-\"+ date.getDate();\r\n    }\r\n  }\r\n\r\n  const toggleModalCT = () => {\r\n    console.log('toggleModalCT')\r\n    setisModalVisibleCT(!isModalVisibleCT)\r\n  }\r\n\r\n  const handleCategorySelection = (category) => {\r\n    setSelectedCategory(category)\r\n\r\n    toggleModalCT()\r\n  }\r\n\r\n  const handleAddProduct = (productInfo) => {\r\n    // if verificationProducts is true, it means that the purchase has only one product, which is the one created automatically when the purchase is created without products\r\n    if (verificationProducts) {\r\n      setProducts([productInfo])\r\n    } else {\r\n    setProducts([...products, productInfo])\r\n    }\r\n    setIsModalVisible(false)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false)\r\n    setProductToEdit({})\r\n    setIndexToEdit(-1)\r\n    setIsEdit(false)\r\n  }\r\n\r\n\r\n\r\n\r\n  const [productToEdit, setProductToEdit] = useState({})\r\n  const [indexToEdit, setIndexToEdit] = useState(-1)\r\n  const [isEdit, setIsEdit] = useState(false)\r\n  // handle edit product opens the modal with the product info already filled\r\n  function handleEditProduct(index) {\r\n    //console.log('handleEditProduct')\r\n    //console.log(products[index])\r\n    setIsModalVisible(true)\r\n    setIsEdit(true)\r\n    setProductToEdit(products[index])\r\n    setIndexToEdit(index)\r\n  }\r\n\r\n  function handleEditProductSubmit(productInfo) {\r\n    //console.log('handleEditProductSubmit')\r\n    //console.log(productInfo)\r\n    //console.log(indexToEdit)\r\n    const newProducts = [...products]\r\n    newProducts[indexToEdit] = productInfo\r\n    setProducts(newProducts)\r\n    setProductToEdit({})\r\n    setIndexToEdit(0)\r\n    setIsEdit(false)\r\n    setIsModalVisible(false)\r\n  }\r\n    \r\n\r\n  function handleDeleteProduct(index) {\r\n    // Delete product at the specified index\r\n    const newProducts = [...products]\r\n    newProducts.splice(index, 1)\r\n    setProducts(newProducts)\r\n  }\r\n\r\n  function getCategoryIcon(selectedCategory) {\r\n    //console.log('get icon: ' + selectedCategory)\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.icon\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n  //  get category name by key\r\n  function getCategoryName(selectedCategory) {\r\n    // loop through the CATEGORIES object\r\n    // get icon by key\r\n    for (const [key, value] of Object.entries(CATEGORIES)) {\r\n      if (key == selectedCategory) {\r\n        return value.name\r\n      }\r\n    }\r\n    // if no match is found, return null\r\n    return null\r\n  }\r\n\r\n\r\n  function typeContainer () {\r\n   return (\r\n    <View style={styles.debitCreditContainer}>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopRightRadius: 0,\r\n          borderBottomRightRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(true)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.white : COLORS.wingDarkBlue,\r\n          },\r\n        ]}\r\n      >\r\n        Débito\r\n      </Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.debitCreditButton,\r\n        {\r\n          borderTopLeftRadius: 0,\r\n          borderBottomLeftRadius: 0,\r\n          backgroundColor: isDebit ? COLORS.white : COLORS.wingDarkBlue ,\r\n        },\r\n      ]}\r\n      onPress={() => setIsDebit(false)}\r\n    >\r\n      <Text\r\n        style={[\r\n          styles.textDebitCredit,\r\n          {\r\n            color: isDebit ? COLORS.wingDarkBlue : COLORS.white,\r\n          },\r\n        ]}\r\n      >\r\n        Crédito\r\n      </Text>\r\n    </TouchableOpacity>\r\n  </View>\r\n    )\r\n  }\r\n  \r\n  // Edit expense\r\n\r\n  const handleFormSubmission = async () => {\r\n    console.log(\"Entrei no handle agora!\")\r\n    if (!originOCR){\r\n    const newData = {\r\n      // falta a CATEGORIA\r\n      is_recurring: false,\r\n      date: date,\r\n      value: value,\r\n      title: title,\r\n      description: description,\r\n      idUser: token.id,\r\n      seller: '',\r\n      type: isDebit ? 'Debito' : 'Credito',\r\n      products: products, // quantity , value , idcategory , description\r\n    }\r\n    const resp = await fetch(`${serverURL}/purchases/editPurchase/`+idExpense, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newData),\r\n    }).then((resp) => {\r\n      if (resp.status === 200) {\r\n        alert('Transação editada com sucesso!')\r\n        // Não dá pra usar o navigation.goBack() pq não dá pra passar o parâmetro refresh: true\r\n        //navigation.goBack({ refresh: true }) \r\n        navigation.navigate('Casa', { refresh: true })\r\n      } else {\r\n        alert('Erro ao editar transação!')\r\n      }\r\n    })\r\n  }\r\n  else\r\n  { if(products.length == 0){\r\n    products.push({\r\n      quantity: 1,\r\n      value: value,\r\n      idcategory: selectedCategory,\r\n      description: 'Não especificado',\r\n    })\r\n  }\r\n  const newData = {\r\n    // falta a CATEGORIA\r\n    is_recurring: false,\r\n    date: date,\r\n    value: value,\r\n    title: title,\r\n    description: description,\r\n    idUser: token.id,\r\n    seller: '',\r\n    type: isDebit ? 'Debito' : 'Credito',\r\n    products: products, // quantity , value , idcategory , description\r\n  }\r\n  const resp = await fetch(`${serverURL}/purchases/createPurchase/`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(newData),\r\n  }).then((resp) => {\r\n    if (resp.status === 200) {\r\n      alert('Despesa adicionada com sucesso!')\r\n      navigation.navigate('Casa', { refresh: true })\r\n    } else {\r\n      alert('Erro ao adicionar despesa!')\r\n    }\r\n  })\r\n}\r\n  }\r\n \r\n  // handleDeleteExpense()\r\n  const handleDeleteExpense = async () => {\r\n    const resp = await fetch(`${serverURL}/purchases/deletePurchase/`+idExpense, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).then((resp) => {\r\n      if (resp.status === 200) {\r\n        alert('Transação excluída com sucesso!')\r\n        navigation.goBack({ refresh: true }) \r\n       // navigation.navigate('Casa', { refresh: true })\r\n      } else {\r\n        alert('Erro ao excluir transação!')\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  return ( //console.log(purchaseData),\r\n      <SafeAreaView style={styles.root}>\r\n        <ScrollView showsVerticalScrollIndicator={false}>\r\n          <View style={styles.infoContainer}>\r\n            {typeContainer()}\r\n            {/* Title input */}\r\n            <Text style={styles.textTag}>Título</Text>\r\n            \r\n            <View style={[styles.buttonStyle, { width: width * 0.8 }]}>\r\n              <TextInput\r\n\r\n                placeholder=\"Ex: Conta de luz\"\r\n                onChangeText={setTitle}\r\n                style={styles.textButton}\r\n              >\r\n                {title}\r\n              </TextInput>\r\n            </View>\r\n\r\n            {/* Value and Date input */}\r\n            <View\r\n              style={[\r\n                { flexDirection: 'row', alignContent: 'space-between', alignItems: 'stretch' },\r\n              ]}\r\n            >\r\n              <View style={{ flex: 1, padding:0, flexWrap: 'wrap'}}>\r\n                <Text style={styles.textTag}>Valor</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.36}]}\r\n                >\r\n                  <MaterialIcons name=\"euro\" size={18} color={COLORS.wingDarkBlue}  />\r\n                  <TextInput\r\n                    placeholder=\"10.25\"\r\n                    onChangeText={setValue}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {value}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n              <View style={{ flex: 1, padding: 0, flexWrap: 'wrap' }}>\r\n                <Text style={styles.textTag}>Data</Text>\r\n                <View\r\n                  style={[styles.buttonStyle, { width: width * 0.4}]}\r\n                >\r\n                  <MaterialIcons name=\"date-range\" size={18} color={COLORS.wingDarkBlue} />\r\n                  <TextInput\r\n                    placeholder=\"AAAA-MM-DD\"\r\n                    onChangeText={setDate}\r\n                    style={styles.textButton}\r\n                  >\r\n                    {date}\r\n                  </TextInput>\r\n                </View>\r\n              </View>\r\n            </View>\r\n\r\n            {/* Category input */}\r\n            {/* console.log('Expense Category: ' + getCategoryName(selectedCategory))*/}\r\n            {verificationProducts ? (\r\n              <>\r\n                <Text style={styles.textTag}>Categoria</Text>\r\n                <TouchableOpacity\r\n                  style={[styles.buttonStyle, { width: width * 0.8 }]}\r\n                  onPress={() => toggleModalCT()}\r\n                >\r\n                  {getCategoryIcon(selectedCategory)}\r\n                  <Text style={styles.textButton}>{getCategoryName(selectedCategory)}</Text>\r\n                </TouchableOpacity>\r\n                <ChooseCategoryModal\r\n                  isModalVisibleCT={isModalVisibleCT}\r\n                  setisModalVisibleCT={setisModalVisibleCT}\r\n                  setSelectedCategory={handleCategorySelection}\r\n                />\r\n              </>\r\n            ) : null}\r\n\r\n            {/* Description input */}\r\n            <Text style={styles.textTag}>Descrição</Text>\r\n\r\n            {/*console.log('Description: ' + description)*/}\r\n            <TextInput\r\n              multiline={true}\r\n              numberOfLines={2}\r\n              value={description}\r\n              onChangeText={setDescription}\r\n              placeholder={'Café com leite e bolo'}\r\n              style={[\r\n                {\r\n                  marginVertical: 12,\r\n                  borderRadius: 5,\r\n                  paddingTop: 15,\r\n                  padding: 15,\r\n                  borderWidth: 1,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  width: width * 0.8,\r\n                  minHeight: 100,\r\n                },\r\n              ]}\r\n            />\r\n\r\n            {/* Products input */}\r\n\r\n            <Text style={[styles.textTag, { marginBottom: 12 }]}>Produtos</Text>\r\n            {/*console.log('Input containers: ' + JSON.stringify(products))*/}\r\n\r\n            {/* Product table component */}\r\n            {!verificationProducts ? (\r\n              <ProductTable\r\n                products={products}\r\n                handleDeleteProduct={handleDeleteProduct}\r\n                getCategoryIcon={getCategoryIcon}\r\n                handleEditProduct={handleEditProduct}\r\n              />\r\n            ) : (\r\n              <Text\r\n                style={{\r\n                  fontFamily: 'SoraRegular',\r\n                  fontSize: SIZES.font,\r\n                  color: COLORS.wingDarkBlue,\r\n                  marginBottom: 12,\r\n                }}\r\n              >\r\n                Nenhum produto adicionado\r\n              </Text>\r\n            )}\r\n            <TouchableOpacity\r\n              style={[\r\n                styles.buttonStyle,\r\n                {\r\n                  width: width * 0.3,\r\n                  borderRadius: 30,\r\n                  paddingVertical: 3,\r\n                  alignSelf: 'flex-end',\r\n                  marginVertical: 0,\r\n                  borderColor: COLORS.wingDarkBlue,\r\n                  borderWidth: 1,\r\n                },\r\n              ]}\r\n              onPress={() => setIsModalVisible(true)}\r\n            >\r\n              <MaterialCommunityIcons name=\"plus\" size={24} color={COLORS.wingDarkBlue} />\r\n              <Text style={[styles.textButton, { marginStart: 1 }]}>Adicionar</Text>\r\n            </TouchableOpacity>\r\n\r\n            <ProductInputModal\r\n              isModalVisible={isModalVisible}\r\n              generalCategory={selectedCategory}\r\n              getCategoryIcon={getCategoryIcon}\r\n              getCategoryName={getCategoryName}\r\n              onSave={handleAddProduct}\r\n              onCancel={handleCancel}\r\n              productToEdit={productToEdit}\r\n              onEdit={handleEditProductSubmit}\r\n              isEdit={isEdit}\r\n              \r\n            />\r\n          </View>\r\n\r\n          <View style={styles.containerBTN}>\r\n            <CustomButton\r\n              onPress={() => {handleFormSubmission()}}\r\n              text=\"Guardar Alterações\"\r\n              type=\"TERTIARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>\r\n            {/* Delete expense button - red */}\r\n            {!originOCR &&\r\n            <CustomButton\r\n              onPress={() => {handleDeleteExpense()}}\r\n              text=\"Eliminar Despesa\"\r\n              type=\"SECONDARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>}\r\n            {originOCR &&\r\n            <CustomButton\r\n              onPress={() => {console.log(\"Carreguei aqui 1 vez\"), navigation.navigate('Home')}}\r\n              text=\"Cancelar Despesa\"\r\n              type=\"SECONDARY\"\r\n              widthScale={0.8}\r\n            ></CustomButton>}\r\n            \r\n\r\n          </View>\r\n        </ScrollView>\r\n      </SafeAreaView>\r\n    )\r\n  \r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: COLORS.white,\r\n  },\r\n  infoContainer: {\r\n    marginHorizontal: 40,\r\n    marginBottom: 40,\r\n  },\r\n  textTag: {\r\n    fontFamily: 'SoraBold',\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue,\r\n  },\r\n  textInfo: {\r\n    fontFamily: 'SoraLight',\r\n    fontSize: SIZES.medium,\r\n  },\r\n  containerBTN: {\r\n    flex: 1,\r\n    alignItems: 'flex-start',\r\n    marginHorizontal: 43,\r\n    marginBottom: 100,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: SIZES.small,\r\n    fontFamily: 'SoraBold',\r\n  },\r\n  buttonStyle: {\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 15,\r\n    marginVertical: 12,\r\n    borderWidth: 1,\r\n    flexDirection: 'row',\r\n    alignSelf: 'center',\r\n    borderColor: COLORS.wingDarkBlue,\r\n    alignItems: 'center',\r\n  },\r\n  textButton: {\r\n    flex: 0.95,\r\n    fontFamily: 'SoraRegular',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.wingDarkBlue,\r\n    marginStart: 10,\r\n  },\r\n  productsContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n    marginVertical: 12,\r\n  },\r\n  debitCreditContainer: {\r\n    flexDirection: 'row',\r\n    marginVertical: 20,\r\n  },\r\n  debitCreditButton: {\r\n    backgroundColor: COLORS.white,\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 6,\r\n    borderWidth: 1.5,\r\n    alignSelf:'stretch',\r\n    flexGrow: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    //marginHorizontal: 5,\r\n    \r\n    borderColor: COLORS.wingDarkBlue,\r\n  // borderColor:'#ed711e'\r\n  },\r\n  textDebitCredit: {\r\n    fontFamily: 'SoraMedium',\r\n    fontSize: SIZES.font,\r\n    color: COLORS.white,\r\n    //marginStart: 10,\r\n  }\r\n})"
        }
    ]
}