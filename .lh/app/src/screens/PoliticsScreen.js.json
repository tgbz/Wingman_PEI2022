{
    "sourceFile": "app/src/screens/PoliticsScreen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1674932292013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674932336748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n   return edit? inputField(idcategory, plafond) : plafond\r\n }\r\n function getTable (){\r\n   finalCategoryData.forEach(elem => {\r\n-      tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, elem.plafond), '€']);\r\n+      tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, Math.round(elem.plafond)), '€']);\r\n     })\r\n   return tableData;\r\n }  \r\n \r\n"
                },
                {
                    "date": 1674932400926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n             </View>\r\n           <Table borderStyle={{borderWidth: 0}}>\r\n             <TableWrapper style={styles.wrapper}>\r\n               {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n-              <Rows data={tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n+              <Rows data={tableData} flexArr={[0.7, 4.5, 1.3, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n             </TableWrapper>\r\n           </Table>\r\n     \r\n        </View>\r\n"
                },
                {
                    "date": 1674932406983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n             </View>\r\n           <Table borderStyle={{borderWidth: 0}}>\r\n             <TableWrapper style={styles.wrapper}>\r\n               {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n-              <Rows data={tableData} flexArr={[0.7, 4.5, 1.3, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n+              <Rows data={tableData} flexArr={[0.7, 4.5, .8, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n             </TableWrapper>\r\n           </Table>\r\n     \r\n        </View>\r\n"
                },
                {
                    "date": 1674932422055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n             </View>\r\n           <Table borderStyle={{borderWidth: 0}}>\r\n             <TableWrapper style={styles.wrapper}>\r\n               {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n-              <Rows data={tableData} flexArr={[0.7, 4.5, .8, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n+              <Rows data={tableData} flexArr={[0.7, 4.5, .95, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n             </TableWrapper>\r\n           </Table>\r\n     \r\n        </View>\r\n"
                },
                {
                    "date": 1674932455030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n   return edit? inputField(idcategory, plafond) : plafond\r\n }\r\n function getTable (){\r\n   finalCategoryData.forEach(elem => {\r\n-      tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, Math.round(elem.plafond)), '€']);\r\n+      tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, (elem.plafond)), '€']);\r\n     })\r\n   return tableData;\r\n }  \r\n \r\n"
                },
                {
                    "date": 1674932566816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,10 @@\n function getTable (){\r\n   finalCategoryData.forEach(elem => {\r\n       tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, (elem.plafond)), '€']);\r\n     })\r\n+  \r\n+\r\n   return tableData;\r\n }  \r\n \r\n //Button to edit all fields of the politics\r\n@@ -219,9 +221,9 @@\n             </View>\r\n           <Table borderStyle={{borderWidth: 0}}>\r\n             <TableWrapper style={styles.wrapper}>\r\n               {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n-              <Rows data={tableData} flexArr={[0.7, 4.5, .95, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n+              <Rows data={tableData} flexArr={[0.7, 4.5, 1, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n             </TableWrapper>\r\n           </Table>\r\n     \r\n        </View>\r\n"
                },
                {
                    "date": 1674932575149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n             </View>\r\n           <Table borderStyle={{borderWidth: 0}}>\r\n             <TableWrapper style={styles.wrapper}>\r\n               {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n-              <Rows data={tableData} flexArr={[0.7, 4.5, 1, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n+              <Rows data={tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n             </TableWrapper>\r\n           </Table>\r\n     \r\n        </View>\r\n"
                },
                {
                    "date": 1674932594578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,8 +243,9 @@\n   },containerTable: { \r\n     flex: 1, \r\n     padding: 16, \r\n     paddingTop: 10, \r\n+    paddingBottom: 20\r\n      },\r\n wrapper: { \r\n     flexDirection: 'row' },\r\n bttn:{\r\n"
                },
                {
                    "date": 1674932600123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n   },containerTable: { \r\n     flex: 1, \r\n     padding: 16, \r\n     paddingTop: 10, \r\n-    paddingBottom: 20\r\n+    paddingBottom: 50\r\n      },\r\n wrapper: { \r\n     flexDirection: 'row' },\r\n bttn:{\r\n"
                },
                {
                    "date": 1674932605951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n   },containerTable: { \r\n     flex: 1, \r\n     padding: 16, \r\n     paddingTop: 10, \r\n-    paddingBottom: 50\r\n+    paddingBottom: 60\r\n      },\r\n wrapper: { \r\n     flexDirection: 'row' },\r\n bttn:{\r\n"
                },
                {
                    "date": 1674932632133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n     backgroundColor: COLORS.white },\r\n text: { \r\n     padding: 5,\r\n     fontFamily: FONTS.medium,\r\n-    fontSize: SIZES.medium,\r\n+    fontSize: SIZES.font,\r\n     color: COLORS.wingDarkBlue },\r\n roundshape:  {\r\n     backgroundColor: 'lightgreen',\r\n     height: 44, //any of height\r\n"
                },
                {
                    "date": 1674932664911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n \r\n   const fetchData = async (token) => {\r\n       const resp = await fetch(`${serverURL}/categories/userCategory/${token.id}`)\r\n       const categoryData = await resp.json()\r\n+      console.log(categoryData)\r\n       setCategoryData(categoryData)\r\n   }\r\n \r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1674932673390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n \r\n   const fetchData = async (token) => {\r\n       const resp = await fetch(`${serverURL}/categories/userCategory/${token.id}`)\r\n       const categoryData = await resp.json()\r\n-      console.log(categoryData)\r\n       setCategoryData(categoryData)\r\n   }\r\n \r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1674932681582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     }, [token])\r\n \r\n   function adjustData( categoryData) {\r\n     categoryData.forEach(element => {\r\n-        let obj = {idcategory: element.idcategory, plafond: element.plafond}\r\n+        let obj = {idcategory: element.idcategory, plafond: Math.round(element.plafond)}\r\n         finalCategoryData.push(obj)\r\n   \r\n     });\r\n   }\r\n"
                },
                {
                    "date": 1674932703530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     }, [token])\r\n \r\n   function adjustData( categoryData) {\r\n     categoryData.forEach(element => {\r\n-        let obj = {idcategory: element.idcategory, plafond: Math.round(element.plafond)}\r\n+        let obj = {idcategory: element.idcategory, plafond:element.plafond}\r\n         finalCategoryData.push(obj)\r\n   \r\n     });\r\n   }\r\n"
                }
            ],
            "date": 1674932292013,
            "name": "Commit-0",
            "content": "import { View, Text, TextInput, Image, TouchableOpacity, useWindowDimensions, Dimensions, Button } from 'react-native'\r\nimport React from 'react'\r\nimport { CATEGORIES, CATEGORIESCOLORS, COLORS, SHADOWS, SIZES , FONTS} from '../constants'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { StyleSheet } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport { SafeAreaView } from 'react-native'\r\nimport {PieChart} from 'react-native-chart-kit';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { serverURL } from '../config/hosts'\r\nimport * as _ from 'lodash'; //Fazer Clone dos objetos \r\nimport {Entypo,AntDesign, FontAwesome5, MaterialIcons, Feather} from '@expo/vector-icons'\r\nimport { Table, Rows , TableWrapper} from 'react-native-table-component';\r\n\r\n\r\nexport default function PoliticsScreen({navigation}){\r\n  const width =Dimensions.get('window').width;\r\n  const [token, setToken] = useState('')\r\n  const [categoryData, setCategoryData] = useState([])\r\n  let finalCategoryData = []\r\n  const tableData = [];\r\n  const [edit, setEdit] = useState(false);\r\n  const [categories, setCategories] = useState([])\r\n  let provCat = _.cloneDeep(finalCategoryData);\r\n  const [changes, setChanges] = useState(true)\r\n  \r\n\r\n  useEffect(() => {\r\n    AsyncStorage.getItem('userToken')\r\n      .then((userToken) => setToken(JSON.parse(userToken)))\r\n      .catch((err) => console.log(err))\r\n      \r\n  }, [])\r\n\r\n  const fetchData = async (token) => {\r\n      const resp = await fetch(`${serverURL}/categories/userCategory/${token.id}`)\r\n      const categoryData = await resp.json()\r\n      setCategoryData(categoryData)\r\n  }\r\n\r\n    useEffect(() => {\r\n      if (token.id) {\r\n        fetchData(token)\r\n      }\r\n    }, [token])\r\n\r\n  function adjustData( categoryData) {\r\n    categoryData.forEach(element => {\r\n        let obj = {idcategory: element.idcategory, plafond: element.plafond}\r\n        finalCategoryData.push(obj)\r\n  \r\n    });\r\n  }\r\n//Mudanças no valor do planfond\r\nfunction handleChanges (id, value) {\r\n  let done = false\r\n  provCat.forEach(elem => {\r\n    if (elem.idcategory === id){\r\n        elem.plafond = value;\r\n        done = true }\r\n  })\r\n  if (!done) {\r\n    const obj = {'idcategory': id, 'plafond': value}\r\n    provCat.push(obj)\r\n  }\r\n}\r\n\r\nconst inputField = (id, plafond) => {  \r\nreturn <TextInput\r\n      key = {id}\r\n      keyboardType = 'numeric'\r\n      onChangeText={(text) => handleChanges(id, text)}\r\n      placeholder={plafond} placeholderTextColor={COLORS.wingDarkBlue}\r\n      style={[styles.text, { color: COLORS.wingDarkBlue, backgroundColor: COLORS.eggshell, fontSize: 14}]}\r\n/>}\r\n// create the table\r\n\r\nconst showValue = (idcategory, plafond) => {\r\n  return edit? inputField(idcategory, plafond) : plafond\r\n}\r\nfunction getTable (){\r\n  finalCategoryData.forEach(elem => {\r\n      tableData.push([CATEGORIES[elem.idcategory].icon, CATEGORIES[elem.idcategory].name,showValue(elem.idcategory, elem.plafond), '€']);\r\n    })\r\n  return tableData;\r\n}  \r\n\r\n//Button to edit all fields of the politics\r\nconst editButton =  \r\n  <TouchableOpacity onPress={() => {edit? (setEdit(false)): setEdit(true)} } style={styles.bttn}>\r\n      <Text style={[styles.text, {color: 'white'}]}>{\"Edit  \"}\r\n        <Feather name=\"edit\" size={20} style={{color:'white'}} />\r\n      </Text>\r\n  </TouchableOpacity>\r\n        \r\n\r\n\r\n//Quando quero salvar, defino a var categories como obtendo o valor da cena provisória\r\n// E preciso de fazer o post \r\nasync function onPressSave() {\r\n  //finalCategoryData = concatProvAndFinal()\r\n  setEdit(false)\r\n  let env = {\"categories\": provCat}\r\n  const response = await fetch(`${serverURL}/categories/changeAllPlafonds/${token.id}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(env)\r\n    \r\n  })\r\n\r\n  // if data is not empty, then account was added\r\n  if (response) {\r\n    // go back to AccountsScreen and refresh data\r\n      navigation.navigate('Politics', { refresh: true })\r\n  }\r\n  fetchData(token)\r\n  //adjustData(categoryData)\r\n  //console.log(\"Depois do tratamento\", finalCategoryData)\r\n  //setChanges(true, [console.log(\"Mudei changes para true\")])\r\n\r\n}\r\n\r\nconst concatProvAndFinal = () => {\r\n    provCat.forEach(elem => {\r\n      console.log(finalCategoryData[elem.idcategory]) \r\n      let index = finalCategoryData.findIndex(x => x.idcategory === elem.idcategory);\r\n      console.log(index)\r\n      finalCategoryData[index] = {\"idcategory\": elem.idcategory, \"plafond\": elem.plafond}\r\n      })\r\n    return finalCategoryData\r\n}\r\n\r\n\r\n//Quando quero cancel, vou recuperar os valores que tinha antes \r\nconst onPressCancel = () => {\r\n  setEdit(false)\r\n  //provCat = _.cloneDeep(categories)\r\n}\r\n//Buttons to save or discard all changes\r\nconst saveCancelButtons = \r\n<View style={[ {\r\n  flexDirection: \"row\", height:34, width: 120,\r\n}]}>\r\n    <TouchableOpacity onPress={() => {edit? (onPressSave()): setEdit(true)} } style={[styles.bttnSaveCancel, {backgroundColor:'green'}]}>\r\n          {<AntDesign name=\"checkcircleo\" size={26} style={{color:'white'}}/>}\r\n    </TouchableOpacity>\r\n    <TouchableOpacity onPress={() => {edit? (onPressCancel()): setEdit(true)} } style={[styles.bttnSaveCancel, {backgroundColor:'red'}]}>\r\n          {<MaterialIcons name=\"cancel\" size={26} style={{color:'white'}}/>}\r\n    </TouchableOpacity>\r\n</View>\r\n\r\n \r\n  const data =[\r\n    {\"category\": 27, \r\n    color: \"#e72a31\", \r\n    legendFontColor: \"black\", \r\n    \"plafond\": 10}, \r\n    {\r\n      \"category\": 23,\r\n      \"plafond\": 7,\r\n      color: '#f26c3d',\r\n      legendFontColor: 'black',\r\n\r\n    },\r\n    {\"category\": 11, \r\n    \"plafond\": \"87.00\",\r\n    color: '#f26c8d',\r\n    legendFontColor: 'black',}\r\n    \r\n  ];\r\n \r\n  const chartConfig = {\r\n    backgroundColor: COLORS.white,\r\n    decimalPlaces: 2, // optional, defaults to 2dp\r\n    color: (opacity = 1) => `rgba(25, 95, 255, ${opacity})`,\r\n    style: {\r\n      borderRadius: 16,\r\n    }};\r\n   \r\n  function pieChartData () {\r\n    const data = []\r\n    finalCategoryData.forEach( elem => {\r\n      let obj = {\"category\": elem.idcategory, \r\n      \"plafond\": parseInt(elem.plafond),\r\n      color: CATEGORIESCOLORS[elem.idcategory],\r\n      legendFontColor: 'black'}\r\n      data.push(obj)\r\n    }\r\n    )\r\n    return data\r\n  }\r\n  return ( adjustData(categoryData),  getTable(), \r\n\r\n    <SafeAreaView style={{flex: 1, backgroundColor: COLORS.eggshell}}>\r\n      <ScrollView>\r\n        <View style={styles.container}>\r\n          <PieChart\r\n            data={pieChartData()}\r\n            width={width - 16}\r\n            paddingLeft={width / 4}\r\n            height={220}\r\n            hasLegend={false}\r\n            chartConfig={chartConfig}\r\n            style={{\r\n              marginVertical: 8,\r\n              borderRadius: 16,\r\n            }}\r\n            accessor=\"plafond\"\r\n            backgroundColor= {COLORS.eggshell}\r\n          />\r\n        </View>\r\n        <View style={styles.containerTable}>\r\n            {/* Button to confirm the changes , when cliked update pie chart data of parent*/}\r\n            <View style={{alignItems:'flex-end', paddingBottom:10}}>\r\n              {!edit? editButton: saveCancelButtons}\r\n              \r\n            </View>\r\n          <Table borderStyle={{borderWidth: 0}}>\r\n            <TableWrapper style={styles.wrapper}>\r\n              {/*<Rows data={changes? ( setChanges(false, [console.log(\"Mudei changes para falso\")]), getTable()):tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>*/}\r\n              <Rows data={tableData} flexArr={[0.7, 4.5, 1.5, 0.8]} style={styles.row} textStyle={styles.text}/>\r\n            </TableWrapper>\r\n          </Table>\r\n    \r\n       </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    padding: 10,\r\n  },containerTable: { \r\n    flex: 1, \r\n    padding: 16, \r\n    paddingTop: 10, \r\n     },\r\nwrapper: { \r\n    flexDirection: 'row' },\r\nbttn:{\r\n    position: 'relative',\r\n    height:34,\r\n    width: 120,\r\n    backgroundColor: COLORS.wingDarkBlue,\r\n    alignItems: \"center\",\r\n    borderRadius:7,\r\n},\r\nbttnSaveCancel:{\r\n  alignItems: \"center\",\r\n  borderRadius:7,\r\n  flexDirection: 'column',\r\n  flex:0.5,\r\n  paddingVertical: 3,\r\n  borderWidth:1,\r\n  borderColor: COLORS.eggshell\r\n},\r\nrow: {  \r\n    height: 45 , \r\n    paddingLeft: 20,\r\n    marginBottom: 15,\r\n    borderRadius: 10,\r\n    backgroundColor: COLORS.white },\r\ntext: { \r\n    padding: 5,\r\n    fontFamily: FONTS.medium,\r\n    fontSize: SIZES.medium,\r\n    color: COLORS.wingDarkBlue },\r\nroundshape:  {\r\n    backgroundColor: 'lightgreen',\r\n    height: 44, //any of height\r\n    width: 44, //any of width\r\n    justifyContent:\"center\",\r\n    borderRadius: 22   // it will be height/2\r\n    },\r\nitem: {\r\n    alignSelf: \"center\",\r\n    color:\"white\"\r\n    },\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      },\r\n      modalView: {\r\n        border: 1,\r\n        borderColor: COLORS.wingDarkBlue,\r\n        marginTop: 400,\r\n        margin: 20,\r\n        backgroundColor:COLORS.white,\r\n        borderRadius: 20,\r\n        padding: 35,\r\n        alignItems: \"center\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n          width: 0,\r\n          height: 2\r\n        },\r\n    }\r\n\r\n});\r\n"
        }
    ]
}