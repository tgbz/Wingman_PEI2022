{
    "sourceFile": "server/config/passport.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667226418736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667226418736,
            "name": "Commit-0",
            "content": "var LocalStrategy = require('passport-local').Strategy;\nvar JWTstrategy = require(\"passport-jwt\").Strategy;\nvar ExtractJWT = require(\"passport-jwt\").ExtractJwt;\nvar secretKey = require('../config/app');\nvar Users = require('../controllers/users');\nvar bcrypt = require('bcryptjs')\n\nmodule.exports = function (passport) { \n    passport.use('login', new LocalStrategy(\n        function (email, password, done) { \n            Users.getOne(email)\n            .then(user =>{\n                if (!user) {\n                    return done(null, false, { message: 'Ocorreu um erro ao realizar o login! Por favor verifique as suas credenciais.' });\n                }\n\n                bcrypt.compare(password, user.password, function (err, isMatch) {\n                    if(err) done(err);\n                    if (isMatch) {\n                        return done(null, user, { message: 'Login efetuado com sucesso.' });\n                    } else {\n                        return done(null, false, { message: 'Ocorreu um erro ao realizar o login! Por favor verifique as suas credenciais.' });\n                    }\n                })\n\n            })\n            .catch(err =>{\n                done(err);\n            })\n            /*\n            Users.getOne(email, function (err, user) {\n                if (err) done(err);\n                if (!user) {\n                    return done(null, false, { message: 'Ocorreu um erro ao realizar o login! Por favor verifique as suas credenciais.' });\n                }\n\n                Users.comparePassword( password , user.password, function (err, isMatch) {\n                    if (err) done(err);\n                    if (isMatch) {\n                        return done(null, user, { message: 'Login efetuado com sucesso.' });\n                    } else {\n                        return done(null, false, { message: 'Ocorreu um erro ao realizar o login! Por favor verifique as suas credenciais.' });\n                    }\n                });\n            });*/\n        })\n    );\n\n    passport.serializeUser(function (user, done) {\n        done(null, user.idUser);\n    });\n\n    passport.deserializeUser(function (id, done) {\n        Users.getUserById(id, function (err, user) {\n            done(err, user);\n        });\n    });\n\n    passport.use(\"jwt\", new JWTstrategy({\n        secretOrKey: secretKey.userPublicKey,\n        algorithms: [\"RS256\"],\n        jwtFromRequest: ExtractJWT.fromExtractors([\n            ExtractJWT.fromUrlQueryParameter('token'),\n            ExtractJWT.fromAuthHeaderWithScheme('Bearer')\n        ])\n    }, async (token, done) => {\n        done(null, token);\n    }))\n};\n"
        }
    ]
}