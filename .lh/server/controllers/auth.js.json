{
    "sourceFile": "server/controllers/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1667232221822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1667232221822,
            "name": "Commit-0",
            "content": "var Auth = module.exports;\nvar passport = require(\"passport\");\nvar ExtractJWT = require(\"passport-jwt\").ExtractJwt;\nvar jwt = require(\"jsonwebtoken\");\nvar secretKey = require('../config/app');\nvar Parameters = require('../config/parameters')\n\n\nAuth.generateTokenUser = function (user) {\n    const userExpires = Parameters.getParameter('userExpires').valor\n    var token = jwt.sign({\n            id: user._id, \n            level: user.level, \n            email: user.email, \n            employee: user.employee\n        }, \n            secretKey.userPrivateKey, \n        {\n            expiresIn: userExpires, \n            algorithm: 'RS256'\n    });\n\n    return token\n}\n\nAuth.verifyTokenUser = function (key, callback) {\n    return jwt.verify(key, secretKey.userPublicKey, { algorithms: ['RS256'] }, callback)\n}\n\n//Verifica se um utilizador (token) está autenticado\nAuth.isLoggedInUser = function (req, res, next) {\n    passport.authenticate(\"jwt\", { session: false }, function(err, user, info) {\n        if (err) { return res.status(401).send(\"Unauthorized\") }\n        if (!user) { return res.status(401).send(\"Unauthorized\") }\n        \n        if(user && user.level.includes(-1))\n            return res.status(401).send(\"Utilizador desativado\")\n\n        req.logIn(user, function(err) {\n            if (err) { return res.status(401).send(\"Unauthorized\") }\n\n            res.locals.id = req.user.id\n            res.locals.idType = \"User\"\n            next()\n        })\n    })(req, res, next)\n}\n/*\nrouter.put('/:id/deactivate', Auth.isLoggedInUser, Auth.checkLevel(5,6), async (req,res) => {\n    Users.deactivate({ _id: mongoose.Types.ObjectId(req.params.id)}, (err, user) => {\n      if (err)\n        res.status(500).send(\"Não foi possível desativar o utilizador!\")\n      if (!user)\n        res.status(500).send(\"Utilizador já se encontrava desativado!\")\n      else \n        res.send(\"Utilizador desativado com sucesso!\")\n    })\n  })*/"
        }
    ]
}