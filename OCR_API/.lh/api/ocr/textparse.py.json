{
    "sourceFile": "api/ocr/textparse.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1669736708522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1669738027195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n import os\r\n import preProcessing as pp\r\n \r\n \r\n-\r\n date1RE = r'(\\d{4})[\\/|\\-](\\d{2})[\\/|\\-](\\d{2})'\r\n \r\n date2RE = r'(\\d{2})[\\/|\\-](\\d{2})[\\/|\\-](\\d{4})'\r\n \r\n"
                }
            ],
            "date": 1669736708522,
            "name": "Commit-0",
            "content": "import re\r\nfrom difflib import get_close_matches\r\nimport dateutil.parser\r\nimport json\r\nimport os\r\nimport preProcessing as pp\r\n\r\n\r\n\r\ndate1RE = r'(\\d{4})[\\/|\\-](\\d{2})[\\/|\\-](\\d{2})'\r\n\r\ndate2RE = r'(\\d{2})[\\/|\\-](\\d{2})[\\/|\\-](\\d{4})'\r\n\r\npdItemRE = r'(\\S+) ([a-zA-Z].+)\\s( |)((\\d|\\d{2}),[ ]{0,1}(\\d{2}|\\d{3}))$'\r\n\r\nlidlItemRE = r'^([^\\d][^\\n]+) ((\\d|\\d{2})[^\\d]{0,2}(\\d{2}|\\d{3}))[ a-zA-Z]*$'\r\n\r\ntotalRE = r'\\d+(\\.\\s?|,\\s?|[^a-zA-Z\\d])\\d{2}'\r\n\r\nvalueRE = r'(\\d+[,| |.]+\\d+)'\r\n\r\n\r\nclass Receipt():\r\n\tdef __init__(self,raw,info_json):\r\n\t\tself.raw = raw\r\n\t\tself.lines = self.normalize(raw)\r\n\t\tself.market = None\r\n\t\tself.items = {}\r\n\t\tself.date = None\r\n\t\tself.total = 0\r\n\t\ttry:\r\n\t\t\tself.info = json.load(open(info_json))\r\n\t\texcept:\r\n\t\t\tprint(f\"Error importing '{info_json}'!\")\r\n\t\t\texit(0)\r\n\r\n\tdef normalize(self,raw):\r\n\t\t\treturn os.linesep.join([s for s in raw.splitlines() if s.strip()]).lower().splitlines()\r\n\r\n\r\n\tdef parse(self):\r\n\t\tself.market = self.parse_market()\r\n\t\tif self.market == 'Pingo Doce':\r\n\t\t\tself.parse_items_pd()\r\n\t\telif self.market == 'Lidl':\r\n\t\t\tself.parse_items_lidl()\r\n\r\n\t\tself.date = self.parse_date()\r\n\t\tself.total = 0\r\n\t\tfor item in self.items.keys():\r\n\t\t\tself.total += self.items[item]\r\n\r\n\t\treturn self.to_json()\r\n\t\r\n\r\n\tdef close_match(self,keyword,accuracy=0.6):\r\n\t\tfor line in self.lines:\r\n\t\t\twords = line.split()\r\n\t\t\tmatches = get_close_matches(keyword, words, 1, accuracy)\r\n\t\t\tif matches:\r\n\t\t\t\treturn line\r\n\r\n\t\r\n\tdef parse_market(self):\r\n\t\tfor int_accuracy in range(10, 4, -1):\r\n\t\t\taccuracy = int_accuracy / 10.0\r\n\t\t\tmin_accuracy, market_match = -1, None\r\n\t\t\tfor market in self.info['Markets']:\r\n\t\t\t\tfor spelling in self.info['Markets'][market]:\r\n\t\t\t\t\tline = self.close_match(spelling, accuracy)\r\n\t\t\t\t\t#print(spelling,'\\n',line)\r\n\t\t\t\t\tif line and (accuracy < min_accuracy or min_accuracy == -1):\r\n\t\t\t\t\t\tmin_accuracy = accuracy\r\n\t\t\t\t\t\tmarket_match = market\r\n\r\n\t\t\t\t\t\treturn market_match\r\n\t\treturn market_match\r\n\r\n\r\n\tdef parse_items_lidl(self):\r\n\t\tfor i,line in enumerate(self.lines):\r\n\t\t\tmatch = re.search(lidlItemRE,line)\r\n\t\t\t#match2 = get_close_matches('total', line.split(), 1, 0.6)\r\n\t\t\tmatch3 = get_close_matches('multibanco', line.split(), 1, 0.6)\r\n\t\t\tmatch4 = get_close_matches('contribuinte', line.split(), 1, 0.6)\r\n\t\t\tif match3:\r\n\t\t\t\tbreak\r\n\t\t\tif match:\r\n\t\t\t\titemName = match.group(1)\r\n\t\t\t\tvalueDecimal = float(match.group(4))*0.01\r\n\t\t\t\tvalue = float(match.group(3))+valueDecimal\r\n\t\t\t\tself.items[itemName] = round(value,2)\r\n\r\n\tdef parse_items_continente(self):\r\n\t\tfor i,line in enumerate(self.lines):\r\n\t\t\tmatch = re.search(lidlItemRE,line)\r\n\t\t\t#match2 = get_close_matches('total', line.split(), 1, 0.6)\r\n\t\t\tmatch3 = get_close_matches('multibanco', line.split(), 1, 0.6)\r\n\t\t\tmatch4 = get_close_matches('contribuinte', line.split(), 1, 0.6)\r\n\t\t\tif match3:\r\n\t\t\t\tbreak\r\n\t\t\tif match:\r\n\t\t\t\titemName = match.group(1)\r\n\t\t\t\tvalueDecimal = float(match.group(4))*0.01\r\n\t\t\t\tvalue = float(match.group(3))+valueDecimal\r\n\t\t\t\tself.items[itemName] = round(value,2)\r\n\t\t\t\t\r\n\r\n\r\n\r\n\r\n\tdef parse_items_pd(self):\r\n\t\tjump = False\r\n\t\tfor i,line in enumerate(self.lines):\r\n\t\t\tif get_close_matches('resumo', line.split(), 1, 0.6):\r\n\t\t\t\tbreak\r\n\t\t\tif jump:\r\n\t\t\t\tjump = False\r\n\t\t\t\tcontinue\r\n\t\t\tmatch = re.search(pdItemRE,line)\r\n\t\t\tif match:\r\n\t\t\t\tvalue = 0\r\n\t\t\t\titemName = match.group(2)\r\n\t\t\t\tif get_close_matches('poupanca', self.lines[i+1].split(), 1, 0.6):\r\n\t\t\t\t\tivalue = float(match.group(4).replace(',','.').replace(' ',''))\r\n\t\t\t\t\tmatchP = re.search(valueRE,self.lines[i+1])\r\n\t\t\t\t\tif matchP:\r\n\t\t\t\t\t\tpvalue = float(matchP.group(0).replace(',','.').replace(' ',''))\r\n\t\t\t\t\t\tvalue = ivalue-pvalue\r\n\t\t\t\t\t\tjump = True\r\n\t\t\t\telse:\r\n\t\t\t\t\tvalue = float(match.group(4).replace(',','.').replace(' ',''))\r\n\t\t\t\tself.items[itemName] = round(value,2)\r\n\r\n\r\n\r\n\tdef parse_date(self):\r\n\t\tdate_str = None\r\n\t\tfor line in self.lines:\r\n\t\t\tmatch1 = re.search(date1RE, line)\r\n\t\t\tmatch2 = re.search(date2RE, line)\r\n\t\t\tif match1:\r\n\t\t\t\tdate_str = match1.group(3) +'-'+ match1.group(2) +'-'+ match1.group(1)\r\n\t\t\tif match2:\r\n\t\t\t\tdate_str = match2.group(1) +'-'+ match2.group(2) +'-'+ match2.group(3)\r\n\t\t\tif match1 or match2:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tdateutil.parser.parse(date_str)\r\n\t\t\t\t\tbreak\r\n\t\t\t\texcept ValueError:\r\n\t\t\t\t\tcontinue\r\n\t\treturn date_str\r\n\r\n\tdef parse_total_pingo_doce(self):\r\n\t\tfor total_key in self.info['Totals']:\r\n\t\t\tfor int_accuracy in range(10, 4, -1):\r\n\t\t\t\taccuracy = int_accuracy / 10.0\r\n\t\t\t\ttotal_line = self.close_match(total_key,accuracy)\r\n\t\t\t\tif total_line:\r\n\t\t\t\t\tprint('Found possible total line')\r\n\t\t\t\t\tmatches2 = get_close_matches('pagar', total_line.split(), 1, 0.6)\r\n\t\t\t\t\tif matches2:\r\n\t\t\t\t\t\tprint('Found pagar total line')\r\n\t\t\t\t\t\tmatch = re.search(totalRE,total_line)\r\n\t\t\t\t\t\tif match:\r\n\t\t\t\t\t\t\ttotal = match.group(0).replace(',','.')\r\n\t\t\t\t\t\t\treturn float(total)\r\n\r\n\tdef to_json(self):\r\n\t\tobject_data = {\r\n\t\t\t\"market\": self.market,\r\n\t\t\t\"items\": self.items,\r\n\t\t\t\"date\": self.date,\r\n\t\t\t\"total\": self.total,\r\n\t\t}\r\n\r\n\t\treturn json.dumps(object_data,indent=2)\r\n\r\n\r\ndef main(file):\r\n\torig = pp.cv2.imread(filename)\r\n\tif debug: pp.show(orig,'Original')\r\n\timage = orig.copy()\r\n\r\n\tpreProc = [pp.normalize,pp.remove_noise,pp.remove_shadows]\r\n\traw = pp.generate_text('out',pp.pipeline(image,preProc),False)\r\n\r\n\tr = Receipt(raw,'info.json')\r\n\tr.parse()\r\n\r\nif __name__ == '__main__':\r\n\tfilename,debug,output = pp.parse()\r\n\r\n\torig = pp.cv2.imread(filename)\r\n\tif debug: pp.show(orig,'Original')\r\n\timage = orig.copy()\r\n\r\n\tpreProc = [pp.normalize,pp.remove_noise,pp.remove_shadows]\r\n\traw = pp.generate_text('out',pp.pipeline(image,preProc),output)\r\n\r\n\tr = Receipt(raw,'info.json')\r\n\tr.parse()"
        }
    ]
}