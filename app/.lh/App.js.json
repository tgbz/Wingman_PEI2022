{
    "sourceFile": "App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1668268683283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1668269633042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,4 @@\n-\n-\n-\n-/* \n-View é um componente que serve para renderizar elementos no ecrâ, invocando outros componentes React Native.\n-Text é um componente que serve para renderizar texto no ecrâ.\n-TouchableOpacity é um componente que serve para renderizar um botão no ecrâ.\n-TextInput é um componente que serve para renderizar um input de texto no ecrâ.\n-Image é um componente que serve para renderizar uma imagem no ecrâ.\n-Stylesheet é um componente que serve para definir estilos para os componentes React Native.\n-  \n-\n-*/\n-\n-\n-\n-\n-//Function Component, também podemos usar Class componentes\n-/* \n-Se está View for para IOS, esta vai estar mapeada para UIView (NATIVO IOS),\n-se for para Android, esta vai estar mapeada para View.\n-\n-*//*\n-import AppStack from './src/Navigators/AppNavigator';\n-import AuthStack from './src/Navigators/AuthNavigator';\n-import { NavigationContainer } from '@react-navigation/native';\n-import React, { useState, useEffect } from 'react';\n-import {useAuthorization} from './src/context/AuthProvider';\n-import AuthContext from './src/context/AuthProvider';\n-import {AuthProvider} from './src/context/AuthProvider';\n-\n-const App = () => {\n-  const {userToken}= React.useContext(AuthContext);\n-  console.log(userToken)\n-  return (\n-    <AuthProvider>\n-      <NavigationContainer >\n-          {userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n-      </NavigationContainer>\n-    </AuthProvider>\n-  );\n-};\n-\n-\n-export default App;\n-*/\n-\n import AppStack from './src/navigators/AppNavigator';\n import AuthStack from './src/navigators/AuthNavigator';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n import { NavigationContainer } from '@react-navigation/native';\n"
                },
                {
                    "date": 1668269906913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n   \n   return (\n     <AuthContext.Provider value={authContext}>\n       <NavigationContainer >\n-          {state.userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n+          {state.userToken==null ? (<Stack.Screen name=\"LandingPage\" component={LandingScreen} />) : (<AppStack/>)}\n       </NavigationContainer>\n     </AuthContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1668270323780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,12 +89,13 @@\n         // After getting token, we need to persist the token using `SecureStore`\n         // In the example, we'll use a dummy token\n \n         dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n-      },\n+      }\n     }),\n     []\n   );\n+\n   \n   return (\n     <AuthContext.Provider value={authContext}>\n       <NavigationContainer >\n"
                },
                {
                    "date": 1668270782179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,30 @@\n-import AppStack from './src/navigators/AppNavigator';\n-import AuthStack from './src/navigators/AuthNavigator';\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n-import { NavigationContainer } from '@react-navigation/native';\n-import React, { useState, useEffect } from 'react';\n-import { serverURL } from './src/config/hosts';\n-import axios from 'axios';\n-import AuthContext from './src/context/AuthProvider';\n-console.log(serverURL)\n+\n+import AppStack from \"./src/navigators/AppNavigator\";\n+import AuthStack from \"./src/navigators/AuthNavigator\";\n+import AsyncStorage from \"@react-native-async-storage/async-storage\";\n+import { NavigationContainer } from \"@react-navigation/native\";\n+import React, { useState, useEffect } from \"react\";\n+import { serverURL } from \"./src/config/hosts\";\n+import axios from \"axios\";\n+import AuthContext from \"./src/context/AuthProvider\";\n+\n const App = () => {\n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n-        case 'RESTORE_TOKEN':\n+        case \"RESTORE_TOKEN\":\n           return {\n             ...prevState,\n             userToken: action.userToken,\n           };\n-        case 'SIGN_IN':\n+        case \"SIGN_IN\":\n           return {\n             ...prevState,\n             isSignout: false,\n             userToken: action.userToken,\n           };\n-        case 'SIGN_OUT':\n+        case \"SIGN_OUT\":\n           return {\n             ...prevState,\n             isSignout: true,\n             userToken: null,\n@@ -38,73 +39,73 @@\n \n   React.useEffect(() => {\n     // Fetch the token from storage then navigate to our appropriate place\n     const getToken = async () => {\n-            try{\n-              const jsonValue = await AsyncStorage.getItem('userToken')\n-              if( jsonValue != null ){\n-                console.log(JSON.parse(jsonValue))\n-                dispatch({ type: 'RESTORE_TOKEN', userToken: JSON.parse(jsonValue)});\n-              }     \n-            }\n-            catch(e){\n-              console.log(e)\n-            } \n-          }\n-          getToken()\n-          console.log(state)\n+      try {\n+        const jsonValue = await AsyncStorage.getItem(\"userToken\");\n+        if (jsonValue != null) {\n+          console.log(JSON.parse(jsonValue));\n+          dispatch({ type: \"RESTORE_TOKEN\", token: JSON.parse(jsonValue) });\n+        }\n+      } catch (e) {\n+        console.log(e);\n+      }\n+      //dispatch({ type: \"RESTORE_TOKEN\", userToken: userToken });\n+    };\n+    getToken();\n+    console.log(state);\n   }, []);\n \n   const authContext = React.useMemo(\n     () => ({\n-      signIn: async (email,password) => {\n-        console.log(serverURL+\"/users/login\")\n-        await axios\n-        .post(serverURL+\"/users/login\", {\n-            username: email,\n+      signIn: async (email, password) => {\n+        console.log(serverURL + \"/users/login\");\n+        //sign in request with fetch,\n+        //if success, save token in async storage and dispatch SIGN_IN action\n+        //if error, show error message\n+        try {\n+          const response = await axios.post(serverURL + \"/users/login\", {\n+            email: email,\n             password: password,\n-        })\n-        .then((response) => {\n-            if(response.data) {\n-            console.log(\"RECEBI O PEDIDO\")\n-            AsyncStorage.setItem('userToken', JSON.stringify(response.data));\n-            dispatch({ type: 'SIGN_IN', userToken: JSON.stringify(response.data) });\n-\n-            }else{\n-            alert(response.status);\n-            }\n-        })\n-        .catch((error) => {\n-          console.log(\"ERROU\")\n-            console.log(error);\n-            alert(\"De momento não é possível processar a autenticação!\");\n-        });\n+          });\n+          console.log(response.data);\n+          \n+          if (response.data.success) {\n+            await AsyncStorage.setItem(\n+              \"userToken\",\n+              JSON.stringify(response.data.token)\n+            );\n+            dispatch({ type: \"SIGN_IN\", token: response.data.token });\n+          } else {\n+            alert(response.data.message);\n+          }\n+        } catch (e) {\n+          // print full error\n+          console.log(e)\n+        }\n       },\n-      signOut: () =>{\n-        AsyncStorage.removeItem('userToken');\n-        dispatch({ type: 'SIGN_OUT' })\n-      } ,\n+      signOut: () => {\n+        AsyncStorage.removeItem(\"userToken\");\n+        dispatch({ type: \"SIGN_OUT\" });\n+      },\n       signUp: async (data) => {\n         // In a production app, we need to send user data to server and get a token\n         // We will also need to handle errors if sign up failed\n         // After getting token, we need to persist the token using `SecureStore`\n         // In the example, we'll use a dummy token\n \n-        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n-      }\n+        dispatch({ type: \"SIGN_IN\", token: \"dummy-auth-token\" });\n+      },\n     }),\n     []\n   );\n \n-  \n   return (\n     <AuthContext.Provider value={authContext}>\n-      <NavigationContainer >\n-          {state.userToken==null ? (<Stack.Screen name=\"LandingPage\" component={LandingScreen} />) : (<AppStack/>)}\n+      <NavigationContainer>\n+        {state.userToken == null ? <AuthStack /> : <AppStack />}\n       </NavigationContainer>\n     </AuthContext.Provider>\n   );\n };\n \n-\n export default App;\n-\n"
                },
                {
                    "date": 1668270822456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import React, { useState, useEffect } from \"react\";\n import { serverURL } from \"./src/config/hosts\";\n import axios from \"axios\";\n import AuthContext from \"./src/context/AuthProvider\";\n-\n+import {LandingScreen} from \"./src/screens/LandingScreen\";\n const App = () => {\n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n"
                },
                {
                    "date": 1668270861971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \n   return (\n     <AuthContext.Provider value={authContext}>\n       <NavigationContainer>\n-        {state.userToken == null ? <AuthStack /> : <AppStack />}\n+        {state.userToken == null ? <Stack.Screen name=\"LandingPage\" component={LandingScreen} /> : <AppStack />}\n       </NavigationContainer>\n     </AuthContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1668270978822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,13 @@\n import { serverURL } from \"./src/config/hosts\";\n import axios from \"axios\";\n import AuthContext from \"./src/context/AuthProvider\";\n import {LandingScreen} from \"./src/screens/LandingScreen\";\n+import { createStackNavigator } from \"@react-navigation/stack\";\n+\n+\n const App = () => {\n+  const Stack = createStackNavigator();\n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n         case \"RESTORE_TOKEN\":\n"
                },
                {
                    "date": 1668270988419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import {LandingScreen} from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n \n-\n+const Stack = createStackNavigator();\n const App = () => {\n-  const Stack = createStackNavigator();\n+  \n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n         case \"RESTORE_TOKEN\":\n"
                },
                {
                    "date": 1668271025053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import {LandingScreen} from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n \n-const Stack = createStackNavigator();\n+\n const App = () => {\n   \n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n"
                },
                {
                    "date": 1668271030448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import {LandingScreen} from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n \n-\n+const Stack = createStackNavigator();\n const App = () => {\n   \n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n"
                },
                {
                    "date": 1668271159085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n+import 'react-native-gesture-handler';\n import AppStack from \"./src/navigators/AppNavigator\";\n import AuthStack from \"./src/navigators/AuthNavigator\";\n import AsyncStorage from \"@react-native-async-storage/async-storage\";\n import { NavigationContainer } from \"@react-navigation/native\";\n"
                },
                {
                    "date": 1668271788407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import React, { useState, useEffect } from \"react\";\n import { serverURL } from \"./src/config/hosts\";\n import axios from \"axios\";\n import AuthContext from \"./src/context/AuthProvider\";\n-import {LandingScreen} from \"./src/screens/LandingScreen\";\n+import LandingScreen from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n \n const Stack = createStackNavigator();\n const App = () => {\n"
                },
                {
                    "date": 1668271846231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n   return (\n     <AuthContext.Provider value={authContext}>\n       <NavigationContainer>\n-        {state.userToken == null ? <Stack.Screen name=\"LandingPage\" component={LandingScreen} /> : <AppStack />}\n+        {state.userToken == null ? <LandingScreen/> : <AppStack />}\n       </NavigationContainer>\n     </AuthContext.Provider>\n   );\n };\n"
                },
                {
                    "date": 1668274883576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,21 @@\n import axios from \"axios\";\n import AuthContext from \"./src/context/AuthProvider\";\n import LandingScreen from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n+import {useFonts} from 'expo-font';\n \n+\n+\n const Stack = createStackNavigator();\n const App = () => {\n   \n+  const [loaded] = useFonts({\n+    SoraRegular: require('./assets/fonts/Sora-Regular.ttf'),\n+    SoraBold: require('./assets/fonts/Sora-Bold.ttf'),\n+    SoraSemiBold: require('./assets/fonts/Sora-SemiBold.ttf'),\n+  });\n+\n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n         case \"RESTORE_TOKEN\":\n"
                },
                {
                    "date": 1668274903811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,12 @@\n     SoraBold: require('./assets/fonts/Sora-Bold.ttf'),\n     SoraSemiBold: require('./assets/fonts/Sora-SemiBold.ttf'),\n   });\n \n+  if(!loaded){\n+    return null;\n+  }\n+\n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n         case \"RESTORE_TOKEN\":\n"
                },
                {
                    "date": 1668274982173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n const Stack = createStackNavigator();\n const App = () => {\n   \n   const [loaded] = useFonts({\n-    SoraRegular: require('./assets/fonts/Sora-Regular.ttf'),\n+    SoraMedium: require('./assets/fonts/Sora-Medium.ttf'),\n     SoraBold: require('./assets/fonts/Sora-Bold.ttf'),\n-    SoraSemiBold: require('./assets/fonts/Sora-SemiBold.ttf'),\n+    SoraLight: require('./assets/fonts/Sora-Light.ttf'),\n   });\n \n   if(!loaded){\n     return null;\n"
                },
                {
                    "date": 1668275104241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import LandingScreen from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n import {useFonts} from 'expo-font';\n+import { assets } from \"./assets/assets\";\n \n \n-\n const Stack = createStackNavigator();\n const App = () => {\n   \n   const [loaded] = useFonts({\n"
                },
                {
                    "date": 1668275126366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import LandingScreen from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n import {useFonts} from 'expo-font';\n-import { assets } from \"./assets/assets\";\n+import { assets } from \"./assets\";\n \n \n const Stack = createStackNavigator();\n const App = () => {\n"
                },
                {
                    "date": 1668275204699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n import AuthContext from \"./src/context/AuthProvider\";\n import LandingScreen from \"./src/screens/LandingScreen\";\n import { createStackNavigator } from \"@react-navigation/stack\";\n import {useFonts} from 'expo-font';\n-import { assets } from \"./assets\";\n \n \n const Stack = createStackNavigator();\n const App = () => {\n"
                },
                {
                    "date": 1668275517411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,18 +14,18 @@\n \n \n const Stack = createStackNavigator();\n const App = () => {\n-  \n+  /*\n   const [loaded] = useFonts({\n     SoraMedium: require('./assets/fonts/Sora-Medium.ttf'),\n     SoraBold: require('./assets/fonts/Sora-Bold.ttf'),\n     SoraLight: require('./assets/fonts/Sora-Light.ttf'),\n   });\n \n   if(!loaded){\n     return null;\n-  }\n+  }*/\n \n   const [state, dispatch] = React.useReducer(\n     (prevState, action) => {\n       switch (action.type) {\n"
                },
                {
                    "date": 1668280012957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n \n   return (\n     <AuthContext.Provider value={authContext}>\n       <NavigationContainer>\n-        {state.userToken == null ? <LandingScreen/> : <AppStack />}\n+        {state.userToken == null ? <AuthStack/> : <AppStack />}\n       </NavigationContainer>\n     </AuthContext.Provider>\n   );\n };\n"
                }
            ],
            "date": 1668268683283,
            "name": "Commit-0",
            "content": "\n\n\n/* \nView é um componente que serve para renderizar elementos no ecrâ, invocando outros componentes React Native.\nText é um componente que serve para renderizar texto no ecrâ.\nTouchableOpacity é um componente que serve para renderizar um botão no ecrâ.\nTextInput é um componente que serve para renderizar um input de texto no ecrâ.\nImage é um componente que serve para renderizar uma imagem no ecrâ.\nStylesheet é um componente que serve para definir estilos para os componentes React Native.\n  \n\n*/\n\n\n\n\n//Function Component, também podemos usar Class componentes\n/* \nSe está View for para IOS, esta vai estar mapeada para UIView (NATIVO IOS),\nse for para Android, esta vai estar mapeada para View.\n\n*//*\nimport AppStack from './src/Navigators/AppNavigator';\nimport AuthStack from './src/Navigators/AuthNavigator';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport {useAuthorization} from './src/context/AuthProvider';\nimport AuthContext from './src/context/AuthProvider';\nimport {AuthProvider} from './src/context/AuthProvider';\n\nconst App = () => {\n  const {userToken}= React.useContext(AuthContext);\n  console.log(userToken)\n  return (\n    <AuthProvider>\n      <NavigationContainer >\n          {userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n      </NavigationContainer>\n    </AuthProvider>\n  );\n};\n\n\nexport default App;\n*/\n\nimport AppStack from './src/navigators/AppNavigator';\nimport AuthStack from './src/navigators/AuthNavigator';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport { serverURL } from './src/config/hosts';\nimport axios from 'axios';\nimport AuthContext from './src/context/AuthProvider';\nconsole.log(serverURL)\nconst App = () => {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.userToken,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.userToken,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const getToken = async () => {\n            try{\n              const jsonValue = await AsyncStorage.getItem('userToken')\n              if( jsonValue != null ){\n                console.log(JSON.parse(jsonValue))\n                dispatch({ type: 'RESTORE_TOKEN', userToken: JSON.parse(jsonValue)});\n              }     \n            }\n            catch(e){\n              console.log(e)\n            } \n          }\n          getToken()\n          console.log(state)\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (email,password) => {\n        console.log(serverURL+\"/users/login\")\n        await axios\n        .post(serverURL+\"/users/login\", {\n            username: email,\n            password: password,\n        })\n        .then((response) => {\n            if(response.data) {\n            console.log(\"RECEBI O PEDIDO\")\n            AsyncStorage.setItem('userToken', JSON.stringify(response.data));\n            dispatch({ type: 'SIGN_IN', userToken: JSON.stringify(response.data) });\n\n            }else{\n            alert(response.status);\n            }\n        })\n        .catch((error) => {\n          console.log(\"ERROU\")\n            console.log(error);\n            alert(\"De momento não é possível processar a autenticação!\");\n        });\n      },\n      signOut: () =>{\n        AsyncStorage.removeItem('userToken');\n        dispatch({ type: 'SIGN_OUT' })\n      } ,\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n  \n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer >\n          {state.userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n};\n\n\nexport default App;\n\n"
        }
    ]
}