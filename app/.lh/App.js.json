{
    "sourceFile": "App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1668268683283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1668268683283,
            "name": "Commit-0",
            "content": "\n\n\n/* \nView é um componente que serve para renderizar elementos no ecrâ, invocando outros componentes React Native.\nText é um componente que serve para renderizar texto no ecrâ.\nTouchableOpacity é um componente que serve para renderizar um botão no ecrâ.\nTextInput é um componente que serve para renderizar um input de texto no ecrâ.\nImage é um componente que serve para renderizar uma imagem no ecrâ.\nStylesheet é um componente que serve para definir estilos para os componentes React Native.\n  \n\n*/\n\n\n\n\n//Function Component, também podemos usar Class componentes\n/* \nSe está View for para IOS, esta vai estar mapeada para UIView (NATIVO IOS),\nse for para Android, esta vai estar mapeada para View.\n\n*//*\nimport AppStack from './src/Navigators/AppNavigator';\nimport AuthStack from './src/Navigators/AuthNavigator';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport {useAuthorization} from './src/context/AuthProvider';\nimport AuthContext from './src/context/AuthProvider';\nimport {AuthProvider} from './src/context/AuthProvider';\n\nconst App = () => {\n  const {userToken}= React.useContext(AuthContext);\n  console.log(userToken)\n  return (\n    <AuthProvider>\n      <NavigationContainer >\n          {userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n      </NavigationContainer>\n    </AuthProvider>\n  );\n};\n\n\nexport default App;\n*/\n\nimport AppStack from './src/navigators/AppNavigator';\nimport AuthStack from './src/navigators/AuthNavigator';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { useState, useEffect } from 'react';\nimport { serverURL } from './src/config/hosts';\nimport axios from 'axios';\nimport AuthContext from './src/context/AuthProvider';\nconsole.log(serverURL)\nconst App = () => {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.userToken,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.userToken,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const getToken = async () => {\n            try{\n              const jsonValue = await AsyncStorage.getItem('userToken')\n              if( jsonValue != null ){\n                console.log(JSON.parse(jsonValue))\n                dispatch({ type: 'RESTORE_TOKEN', userToken: JSON.parse(jsonValue)});\n              }     \n            }\n            catch(e){\n              console.log(e)\n            } \n          }\n          getToken()\n          console.log(state)\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (email,password) => {\n        console.log(serverURL+\"/users/login\")\n        await axios\n        .post(serverURL+\"/users/login\", {\n            username: email,\n            password: password,\n        })\n        .then((response) => {\n            if(response.data) {\n            console.log(\"RECEBI O PEDIDO\")\n            AsyncStorage.setItem('userToken', JSON.stringify(response.data));\n            dispatch({ type: 'SIGN_IN', userToken: JSON.stringify(response.data) });\n\n            }else{\n            alert(response.status);\n            }\n        })\n        .catch((error) => {\n          console.log(\"ERROU\")\n            console.log(error);\n            alert(\"De momento não é possível processar a autenticação!\");\n        });\n      },\n      signOut: () =>{\n        AsyncStorage.removeItem('userToken');\n        dispatch({ type: 'SIGN_OUT' })\n      } ,\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n  \n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer >\n          {state.userToken==null ? (<AuthStack/>) : (<AppStack/>)}\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n};\n\n\nexport default App;\n\n"
        }
    ]
}