{
    "sourceFile": "src/context/AuthProvider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1668266570258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1668266590225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,8 @@\n             }\n           })\n           .catch((error) => {\n             console.log(error);\n-            console.log(\"ERRO\");\n             alert(\"De momento não é possível processar a autenticação!\");\n           });\n       },\n       signOut: async () => {\n"
                },
                {
                    "date": 1668266601535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n         if (authToken !== null) {\n           dispatch({ type: \"RESTORE_TOKEN\", userToken: authToken });\n         }\n       } catch (e) {\n+        console.log(\"IN ERRO\");\n         console.log(e);\n       }\n     };\n     initState();\n"
                },
                {
                    "date": 1668266630772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n         if (authToken !== null) {\n           dispatch({ type: \"RESTORE_TOKEN\", userToken: authToken });\n         }\n       } catch (e) {\n-        console.log(\"IN ERRO\");\n         console.log(e);\n       }\n     };\n     initState();\n"
                }
            ],
            "date": 1668266570258,
            "name": "Commit-0",
            "content": "/**\n * AuthProvider.js file\n *\n **/\nimport * as React from \"react\";\nimport {\n  getItem as getToken,\n  setItem as setToken,\n  removeItem as removeToken,\n} from \"../config/async-storage\";\nimport { serverURL } from \"../config/hosts\";\nimport axios from \"axios\";\n\nconst AuthContext = React.createContext();\n\nexport default AuthContext;\n\nexport const useAuthorization = () => {\n  const context = React.useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"Error\");\n  }\n  return context;\n};\n\nexport const AuthProvider = (props) => {\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case \"RESTORE_TOKEN\":\n          return {\n            ...prevState,\n            userToken: action.userToken,\n          };\n        case \"SIGN_IN\":\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.userToken,\n          };\n        case \"SIGN_OUT\":\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    const initState = async () => {\n      try {\n        const authToken = await getToken();\n        if (authToken !== null) {\n          dispatch({ type: \"RESTORE_TOKEN\", userToken: authToken });\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    initState();\n    console.log(state);\n  });\n\n  const actions = React.useMemo(\n    () => ({\n      signIn: async (email, password) => {\n        console.log(serverURL + \"/users/login\");\n        await axios\n          .post(serverURL + \"/users/login\", {\n            username: email,\n            password: password,\n          })\n          .then((response) => {\n            if (response.data) {\n              let token = response.data;\n              setToken(token);\n              dispatch({ type: \"SIGN_IN\", userToken: JSON.stringify(token) });\n            } else {\n              alert(response.status);\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            console.log(\"ERRO\");\n            alert(\"De momento não é possível processar a autenticação!\");\n          });\n      },\n      signOut: async () => {\n        dispatch({ type: \"SIGN_OUT\" });\n        await removeToken();\n      },\n    }),\n    [state, dispatch]\n  );\n\n  return (\n    <AuthContext.Provider value={{ ...state, ...actions }}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n"
        }
    ]
}