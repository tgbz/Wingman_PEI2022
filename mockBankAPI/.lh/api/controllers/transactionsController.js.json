{
    "sourceFile": "api/controllers/transactionsController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 54,
            "patches": [
                {
                    "date": 1669637017288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1669637051859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,18 +67,18 @@\n     descricao = \"Pagamento de \" + categoria;\r\n     valor = Math.floor(Math.random() * 800);\r\n   }\r\n \r\n-  var moeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n+  var moe = moeda[Math.floor(Math.random() * moeda.length)];\r\n \r\n   var transaction = {\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: data,\r\n     issuer: emissor,\r\n     description: descricao,\r\n     value: valor,\r\n     category: categoria,\r\n-    currency: moeda,\r\n+    currency: moe,\r\n   };\r\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n"
                },
                {
                    "date": 1669637150083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,11 +83,12 @@\n   return transaction;\r\n }\r\n \r\n Transactions.createTransactions = async function (n) {\r\n-  var transaction = newTransaction();\r\n+  var trans = newTransaction();\r\n   try {\r\n-    await transaction.save();\r\n+    trans = await transaction.save();\r\n+    callback(null, trans);\r\n     console.log(\"Transaction created\");\r\n   } catch (err) {\r\n     console.log(err);\r\n   }\r\n"
                },
                {
                    "date": 1669637177976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,14 +82,15 @@\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n \r\n-Transactions.createTransactions = async function (n) {\r\n-  var trans = newTransaction();\r\n-  try {\r\n-    trans = await transaction.save();\r\n-    callback(null, trans);\r\n-    console.log(\"Transaction created\");\r\n-  } catch (err) {\r\n-    console.log(err);\r\n-  }\r\n+//Create a single transaction\r\n+Transactions.createTransaction = function (callback) {\r\n+  var newTransaction = new transaction(newTransaction());\r\n+  newTransaction.save(function (err) {\r\n+    if (err) {\r\n+      callback(err, null);\r\n+    } else {\r\n+      callback(null, newTransaction);\r\n+    }\r\n+  });\r\n };\r\n"
                },
                {
                    "date": 1669637223156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,14 +83,16 @@\n   return transaction;\r\n }\r\n \r\n //Create a single transaction\r\n-Transactions.createTransaction = function (callback) {\r\n+Transactions.createTransaction = function (callback, n) {\r\n+  for (int i = 0; i < n; i++) {\r\n   var newTransaction = new transaction(newTransaction());\r\n   newTransaction.save(function (err) {\r\n     if (err) {\r\n       callback(err, null);\r\n     } else {\r\n       callback(null, newTransaction);\r\n     }\r\n   });\r\n+}\r\n };\r\n"
                },
                {
                    "date": 1669637229031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,15 +84,15 @@\n }\r\n \r\n //Create a single transaction\r\n Transactions.createTransaction = function (callback, n) {\r\n-  for (int i = 0; i < n; i++) {\r\n-  var newTransaction = new transaction(newTransaction());\r\n-  newTransaction.save(function (err) {\r\n-    if (err) {\r\n-      callback(err, null);\r\n-    } else {\r\n-      callback(null, newTransaction);\r\n-    }\r\n-  });\r\n-}\r\n+  for (const i = 0; i < n; i++) {\r\n+    var newTransaction = new transaction(newTransaction());\r\n+    newTransaction.save(function (err) {\r\n+      if (err) {\r\n+        callback(err, null);\r\n+      } else {\r\n+        callback(null, newTransaction);\r\n+      }\r\n+    });\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1669637237297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n   return transaction;\r\n }\r\n \r\n //Create a single transaction\r\n-Transactions.createTransaction = function (callback, n) {\r\n+Transactions.createTransactions = function (callback, n) {\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = new transaction(newTransaction());\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n"
                },
                {
                    "date": 1669637391339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,47 +43,17 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction() {\r\n-  //random date and time between now and tomorrow\r\n-  var data = new Date(\r\n-    new Date().getTime() + Math.random() * 24 * 60 * 60 * 1000\r\n-  );\r\n+function newTransaction () {\r\n+  var tip = tipos[Math.floor(Math.random() * tipos.length)];\r\n+  if (tip == \"Débito\") {\r\n+    var emissor = emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+  } else if (tip == \"Crédito\") {\r\n+    var emissor = emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n+  }\r\n   var categoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-  var emissor;\r\n-  if (categoria == \"Salário\") {\r\n-    emissor = \"Empregador\";\r\n-    tipo = \"Crédito\";\r\n-  } else {\r\n-    emissor =\r\n-      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-    tipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n-  }\r\n-  var valor = 0;\r\n-  if (tipo == \"Crédito\") {\r\n-    descricao = \"Recebimento de \" + categoria;\r\n-    valor = Math.floor(Math.random() * 1000);\r\n-  } else {\r\n-    descricao = \"Pagamento de \" + categoria;\r\n-    valor = Math.floor(Math.random() * 800);\r\n-  }\r\n \r\n-  var moe = moeda[Math.floor(Math.random() * moeda.length)];\r\n-\r\n-  var transaction = {\r\n-    _id: new mongoose.Types.ObjectId(),\r\n-    date: data,\r\n-    issuer: emissor,\r\n-    description: descricao,\r\n-    value: valor,\r\n-    category: categoria,\r\n-    currency: moe,\r\n-  };\r\n-  console.log(transaction);\r\n-  return transaction;\r\n-}\r\n-\r\n //Create a single transaction\r\n Transactions.createTransactions = function (callback, n) {\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = new transaction(newTransaction());\r\n"
                },
                {
                    "date": 1669637424167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,48 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction () {\r\n-  var tip = tipos[Math.floor(Math.random() * tipos.length)];\r\n-  if (tip == \"Débito\") {\r\n-    var emissor = emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-  } else if (tip == \"Crédito\") {\r\n-    var emissor = emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n+function newTransaction() {\r\n+  //random date and time between now and tomorrow\r\n+  var data = new Date(\r\n+    new Date().getTime() + Math.random() * 24 * 60 * 60 * 1000\r\n+  );\r\n+  var categoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+  var emissor;\r\n+  var tipo = \"\";\r\n+  if (categoria == \"Salário\") {\r\n+    emissor = \"Empregador\";\r\n+    tipo = \"Crédito\";\r\n+  } else {\r\n+    emissor =\r\n+      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+    tipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n   }\r\n-  var categoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+  var valor = 0;\r\n+  if (tipo == \"Crédito\") {\r\n+    descricao = \"Recebimento de \" + categoria;\r\n+    valor = Math.floor(Math.random() * 1000);\r\n+  } else {\r\n+    descricao = \"Pagamento de \" + categoria;\r\n+    valor = Math.floor(Math.random() * 800);\r\n+  }\r\n \r\n+  var moe = moeda[Math.floor(Math.random() * moeda.length)];\r\n+\r\n+  var transaction = {\r\n+    _id: new mongoose.Types.ObjectId(),\r\n+    date: data,\r\n+    issuer: emissor,\r\n+    description: descricao,\r\n+    value: valor,\r\n+    category: categoria,\r\n+    currency: moe,\r\n+  };\r\n+  console.log(transaction);\r\n+  return transaction;\r\n+}\r\n+\r\n //Create a single transaction\r\n Transactions.createTransactions = function (callback, n) {\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = new transaction(newTransaction());\r\n"
                },
                {
                    "date": 1669637474344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     tipo = \"Crédito\";\r\n   } else {\r\n     emissor =\r\n       emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-    tipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n+    tipo = \"Débito\";\r\n   }\r\n   var valor = 0;\r\n   if (tipo == \"Crédito\") {\r\n     descricao = \"Recebimento de \" + categoria;\r\n"
                },
                {
                    "date": 1669637538924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,11 @@\n   var tipo = \"\";\r\n   if (categoria == \"Salário\") {\r\n     emissor = \"Empregador\";\r\n     tipo = \"Crédito\";\r\n+  } else if (categoria == \"Outros\") {\r\n+    emissor = \"Outros\";\r\n+    tipo = \"Crédito\";\r\n   } else {\r\n     emissor =\r\n       emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n     tipo = \"Débito\";\r\n"
                },
                {
                    "date": 1669637567447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,37 +44,8 @@\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n function newTransaction() {\r\n-  //random date and time between now and tomorrow\r\n-  var data = new Date(\r\n-    new Date().getTime() + Math.random() * 24 * 60 * 60 * 1000\r\n-  );\r\n-  var categoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-  var emissor;\r\n-  var tipo = \"\";\r\n-  if (categoria == \"Salário\") {\r\n-    emissor = \"Empregador\";\r\n-    tipo = \"Crédito\";\r\n-  } else if (categoria == \"Outros\") {\r\n-    emissor = \"Outros\";\r\n-    tipo = \"Crédito\";\r\n-  } else {\r\n-    emissor =\r\n-      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-    tipo = \"Débito\";\r\n-  }\r\n-  var valor = 0;\r\n-  if (tipo == \"Crédito\") {\r\n-    descricao = \"Recebimento de \" + categoria;\r\n-    valor = Math.floor(Math.random() * 1000);\r\n-  } else {\r\n-    descricao = \"Pagamento de \" + categoria;\r\n-    valor = Math.floor(Math.random() * 800);\r\n-  }\r\n-\r\n-  var moe = moeda[Math.floor(Math.random() * moeda.length)];\r\n-\r\n   var transaction = {\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: data,\r\n     issuer: emissor,\r\n"
                },
                {
                    "date": 1669638597164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n var transaction = require(\"../models/transaction\");\r\n var Transactions = module.exports;\r\n \r\n var categorias = [\r\n-  \"Salário\",\r\n   \"Alimentação\",\r\n   \"Transportes\",\r\n   \"Lazer\",\r\n   \"Saúde\",\r\n@@ -29,9 +28,9 @@\n   \"Levantamento ATM\",\r\n ];\r\n \r\n var emissoresCrédito = [\r\n-  \"Salário\",\r\n+  \"Empregador\",\r\n   \"Prémio\",\r\n   \"Reembolso\",\r\n   \"Transferência de João\",\r\n   \"Transferência de Maria\",\r\n@@ -44,8 +43,35 @@\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n function newTransaction() {\r\n+  //Random date and time between now and yesterday\r\n+  var tmpCategoria;\r\n+  var tmpEmissor = \"\";\r\n+  var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n+  var date = new Date();\r\n+  var yesterday = new Date();\r\n+  yesterday.setDate(yesterday.getDate() - 1);\r\n+  var randomDate = new Date(\r\n+    yesterday.getTime() + Math.random() * (date.getTime() - yesterday.getTime())\r\n+  );\r\n+\r\n+  var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n+\r\n+  if (tmpTipo == \"Débito\") {\r\n+    //tmp categoria excepto salário\r\n+    tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+    while (tmpCategoria == \"Salário\") {\r\n+      tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+    }\r\n+    tmpEmissor = emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+  } else {\r\n+    tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+    if (tmpCategoria == \"Salário\") {\r\n+      tmpEmissor = emissoresCrédito[0];\r\n+\r\n+  }\r\n+\r\n   var transaction = {\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: data,\r\n     issuer: emissor,\r\n"
                },
                {
                    "date": 1669638711842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n function newTransaction() {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n+  var tmpDescricao = \"\";\r\n   var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n   var date = new Date();\r\n   var yesterday = new Date();\r\n   yesterday.setDate(yesterday.getDate() - 1);\r\n@@ -55,27 +56,24 @@\n     yesterday.getTime() + Math.random() * (date.getTime() - yesterday.getTime())\r\n   );\r\n \r\n   var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n-\r\n   if (tmpTipo == \"Débito\") {\r\n-    //tmp categoria excepto salário\r\n     tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-    while (tmpCategoria == \"Salário\") {\r\n-      tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-    }\r\n-    tmpEmissor = emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+    tmpEmissor =\r\n+      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+    tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n   } else {\r\n-    tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-    if (tmpCategoria == \"Salário\") {\r\n-      tmpEmissor = emissoresCrédito[0];\r\n-\r\n+    tmpCategoria = \"Recebimento\";\r\n+    tmpEmissor =\r\n+      emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n+    tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n   }\r\n \r\n   var transaction = {\r\n     _id: new mongoose.Types.ObjectId(),\r\n-    date: data,\r\n-    issuer: emissor,\r\n+    date: randomDate,\r\n+    issuer: tmpEmissor,\r\n     description: descricao,\r\n     value: valor,\r\n     category: categoria,\r\n     currency: moe,\r\n"
                },
                {
                    "date": 1669638731356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: descricao,\r\n     value: valor,\r\n-    category: categoria,\r\n-    currency: moe,\r\n+    category: tmpCategoria,\r\n+    currency: tmpMoeda,\r\n   };\r\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n"
                },
                {
                    "date": 1669638763105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n+  var tmpValor = 0;\r\n   var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n   var date = new Date();\r\n   var yesterday = new Date();\r\n   yesterday.setDate(yesterday.getDate() - 1);\r\n@@ -57,13 +58,15 @@\n   );\r\n \r\n   var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n   if (tmpTipo == \"Débito\") {\r\n+    tmpValor = Math.floor(Math.random() * 500) + 1;\r\n     tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n     tmpEmissor =\r\n       emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n     tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n   } else {\r\n+    tmpValor = Math.floor(Math.random() * 1000);\r\n     tmpCategoria = \"Recebimento\";\r\n     tmpEmissor =\r\n       emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n     tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n@@ -72,9 +75,9 @@\n   var transaction = {\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n-    description: descricao,\r\n+    description: tmpDescricao,\r\n     value: valor,\r\n     category: tmpCategoria,\r\n     currency: tmpMoeda,\r\n   };\r\n"
                },
                {
                    "date": 1669638773957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     _id: new mongoose.Types.ObjectId(),\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: tmpDescricao,\r\n-    value: valor,\r\n+    value: tmpValor,\r\n     category: tmpCategoria,\r\n     currency: tmpMoeda,\r\n   };\r\n   console.log(transaction);\r\n"
                },
                {
                    "date": 1669638809102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n }\r\n \r\n //Create a single transaction\r\n Transactions.createTransactions = function (callback, n) {\r\n+  console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = new transaction(newTransaction());\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n"
                },
                {
                    "date": 1669638879307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   return transaction;\r\n }\r\n \r\n //Create a single transaction\r\n-Transactions.createTransactions = function (callback, n) {\r\n+Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = new transaction(newTransaction());\r\n     newTransaction.save(function (err) {\r\n"
                },
                {
                    "date": 1669638909184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction() {\r\n+newTransaction = function () {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n@@ -82,9 +82,9 @@\n     currency: tmpMoeda,\r\n   };\r\n   console.log(transaction);\r\n   return transaction;\r\n-}\r\n+};\r\n \r\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n"
                },
                {
                    "date": 1669638922097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-newTransaction = function () {\r\n+var newTransaction = function () {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n"
                },
                {
                    "date": 1669638935073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-var newTransaction = function () {\r\n+function newTransaction() {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n@@ -82,9 +82,9 @@\n     currency: tmpMoeda,\r\n   };\r\n   console.log(transaction);\r\n   return transaction;\r\n-};\r\n+}\r\n \r\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n"
                },
                {
                    "date": 1669638944917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n-    var newTransaction = new transaction(newTransaction());\r\n+    var newTransaction = newTransaction();\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n"
                },
                {
                    "date": 1669638954622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n-    var newTransaction = newTransaction();\r\n+    var newTransaction = this.newTransaction();\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n"
                },
                {
                    "date": 1669638960357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n-    var newTransaction = this.newTransaction();\r\n+    var newTransaction = newTransaction();\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n"
                },
                {
                    "date": 1669639002108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,55 +42,53 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction() {\r\n-  //Random date and time between now and yesterday\r\n-  var tmpCategoria;\r\n-  var tmpEmissor = \"\";\r\n-  var tmpDescricao = \"\";\r\n-  var tmpValor = 0;\r\n-  var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n-  var date = new Date();\r\n-  var yesterday = new Date();\r\n-  yesterday.setDate(yesterday.getDate() - 1);\r\n-  var randomDate = new Date(\r\n-    yesterday.getTime() + Math.random() * (date.getTime() - yesterday.getTime())\r\n-  );\r\n+function newTransaction() {}\r\n \r\n-  var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n-  if (tmpTipo == \"Débito\") {\r\n-    tmpValor = Math.floor(Math.random() * 500) + 1;\r\n-    tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-    tmpEmissor =\r\n-      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-    tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n-  } else {\r\n-    tmpValor = Math.floor(Math.random() * 1000);\r\n-    tmpCategoria = \"Recebimento\";\r\n-    tmpEmissor =\r\n-      emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n-    tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n-  }\r\n-\r\n-  var transaction = {\r\n-    _id: new mongoose.Types.ObjectId(),\r\n-    date: randomDate,\r\n-    issuer: tmpEmissor,\r\n-    description: tmpDescricao,\r\n-    value: tmpValor,\r\n-    category: tmpCategoria,\r\n-    currency: tmpMoeda,\r\n-  };\r\n-  console.log(transaction);\r\n-  return transaction;\r\n-}\r\n-\r\n //Create a single transaction\r\n Transactions.createTransactions = function (n) {\r\n   console.log(\"Creating\" + n + \"transactions\");\r\n   for (const i = 0; i < n; i++) {\r\n-    var newTransaction = newTransaction();\r\n+    //Random date and time between now and yesterday\r\n+    var tmpCategoria;\r\n+    var tmpEmissor = \"\";\r\n+    var tmpDescricao = \"\";\r\n+    var tmpValor = 0;\r\n+    var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n+    var date = new Date();\r\n+    var yesterday = new Date();\r\n+    yesterday.setDate(yesterday.getDate() - 1);\r\n+    var randomDate = new Date(\r\n+      yesterday.getTime() +\r\n+        Math.random() * (date.getTime() - yesterday.getTime())\r\n+    );\r\n+\r\n+    var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n+    if (tmpTipo == \"Débito\") {\r\n+      tmpValor = Math.floor(Math.random() * 500) + 1;\r\n+      tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+      tmpEmissor =\r\n+        emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+      tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n+    } else {\r\n+      tmpValor = Math.floor(Math.random() * 1000);\r\n+      tmpCategoria = \"Recebimento\";\r\n+      tmpEmissor =\r\n+        emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n+      tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n+    }\r\n+\r\n+    var transaction = {\r\n+      _id: new mongoose.Types.ObjectId(),\r\n+      date: randomDate,\r\n+      issuer: tmpEmissor,\r\n+      description: tmpDescricao,\r\n+      value: tmpValor,\r\n+      category: tmpCategoria,\r\n+      currency: tmpMoeda,\r\n+    };\r\n+    console.log(transaction);\r\n     newTransaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n"
                },
                {
                    "date": 1669639012492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n       category: tmpCategoria,\r\n       currency: tmpMoeda,\r\n     };\r\n     console.log(transaction);\r\n-    newTransaction.save(function (err) {\r\n+    transaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n         callback(null, newTransaction);\r\n"
                },
                {
                    "date": 1669639063789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,54 +42,56 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction() {}\r\n+function newTransaction() {\r\n+  //Random date and time between now and yesterday\r\n+  var tmpCategoria;\r\n+  var tmpEmissor = \"\";\r\n+  var tmpDescricao = \"\";\r\n+  var tmpValor = 0;\r\n+  var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n+  var date = new Date();\r\n+  var yesterday = new Date();\r\n+  yesterday.setDate(yesterday.getDate() - 1);\r\n+  var randomDate = new Date(\r\n+    yesterday.getTime() + Math.random() * (date.getTime() - yesterday.getTime())\r\n+  );\r\n \r\n+  var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n+  if (tmpTipo == \"Débito\") {\r\n+    tmpValor = Math.floor(Math.random() * 500) + 1;\r\n+    tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n+    tmpEmissor =\r\n+      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n+    tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n+  } else {\r\n+    tmpValor = Math.floor(Math.random() * 1000);\r\n+    tmpCategoria = \"Recebimento\";\r\n+    tmpEmissor =\r\n+      emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n+    tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n+  }\r\n+\r\n+  var transaction = {\r\n+    _id: new mongoose.Types.ObjectId(),\r\n+    date: randomDate,\r\n+    issuer: tmpEmissor,\r\n+    description: tmpDescricao,\r\n+    value: tmpValor,\r\n+    category: tmpCategoria,\r\n+    currency: tmpMoeda,\r\n+  };\r\n+  console.log(transaction);\r\n+  return transaction;\r\n+}\r\n+\r\n //Create a single transaction\r\n-Transactions.createTransactions = function (n) {\r\n-  console.log(\"Creating\" + n + \"transactions\");\r\n+Transactions.createTransactions = function (callback, n) {\r\n+  console.log;\r\n   for (const i = 0; i < n; i++) {\r\n-    //Random date and time between now and yesterday\r\n-    var tmpCategoria;\r\n-    var tmpEmissor = \"\";\r\n-    var tmpDescricao = \"\";\r\n-    var tmpValor = 0;\r\n-    var tmpMoeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n-    var date = new Date();\r\n-    var yesterday = new Date();\r\n-    yesterday.setDate(yesterday.getDate() - 1);\r\n-    var randomDate = new Date(\r\n-      yesterday.getTime() +\r\n-        Math.random() * (date.getTime() - yesterday.getTime())\r\n-    );\r\n-\r\n-    var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n-    if (tmpTipo == \"Débito\") {\r\n-      tmpValor = Math.floor(Math.random() * 500) + 1;\r\n-      tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n-      tmpEmissor =\r\n-        emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n-      tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n-    } else {\r\n-      tmpValor = Math.floor(Math.random() * 1000);\r\n-      tmpCategoria = \"Recebimento\";\r\n-      tmpEmissor =\r\n-        emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n-      tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n-    }\r\n-\r\n-    var transaction = {\r\n-      _id: new mongoose.Types.ObjectId(),\r\n-      date: randomDate,\r\n-      issuer: tmpEmissor,\r\n-      description: tmpDescricao,\r\n-      value: tmpValor,\r\n-      category: tmpCategoria,\r\n-      currency: tmpMoeda,\r\n-    };\r\n-    console.log(transaction);\r\n-    transaction.save(function (err) {\r\n+    var newTransaction = new transaction(newTransaction());\r\n+    newTransaction.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n         callback(null, newTransaction);\r\n"
                },
                {
                    "date": 1669639087117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,12 +86,11 @@\n }\r\n \r\n //Create a single transaction\r\n Transactions.createTransactions = function (callback, n) {\r\n-  console.log;\r\n   for (const i = 0; i < n; i++) {\r\n-    var newTransaction = new transaction(newTransaction());\r\n-    newTransaction.save(function (err) {\r\n+    var newTransaction = newTransaction();\r\n+    nt.save(function (err) {\r\n       if (err) {\r\n         callback(err, null);\r\n       } else {\r\n         callback(null, newTransaction);\r\n"
                },
                {
                    "date": 1669639117995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   return transaction;\r\n }\r\n \r\n //Create a single transaction\r\n-Transactions.createTransactions = function (callback, n) {\r\n+Transactions.createTransactions = function (n, callback) {\r\n   for (const i = 0; i < n; i++) {\r\n     var newTransaction = newTransaction();\r\n     nt.save(function (err) {\r\n       if (err) {\r\n"
                },
                {
                    "date": 1669639152405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,16 +85,13 @@\n   return transaction;\r\n }\r\n \r\n //Create a single transaction\r\n-Transactions.createTransactions = function (n, callback) {\r\n-  for (const i = 0; i < n; i++) {\r\n-    var newTransaction = newTransaction();\r\n-    nt.save(function (err) {\r\n-      if (err) {\r\n-        callback(err, null);\r\n-      } else {\r\n-        callback(null, newTransaction);\r\n-      }\r\n-    });\r\n-  }\r\n+Transactions.create = function (transaction, callback) {\r\n+  transaction.save(function (err, transaction) {\r\n+    if (err) {\r\n+      callback(err, null);\r\n+    } else {\r\n+      callback(null, transaction);\r\n+    }\r\n+  });\r\n };\r\n"
                },
                {
                    "date": 1669639199369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,25 @@\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n \r\n+\r\n+Transactions.createTransactions = function (n) {\r\n+  var transactions = [];\r\n+  for (var i = 0; i < n; i++) {\r\n+    Transactions.createTransaction(function (err, transaction) {\r\n+      if (err) {\r\n+        console.log(err);\r\n+      } else {\r\n+        transactions.push(transaction);\r\n+      }\r\n+    });\r\n+    \r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n //Create a single transaction\r\n Transactions.create = function (transaction, callback) {\r\n   transaction.save(function (err, transaction) {\r\n     if (err) {\r\n"
                },
                {
                    "date": 1669639207958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,8 @@\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n \r\n-\r\n Transactions.createTransactions = function (n) {\r\n   var transactions = [];\r\n   for (var i = 0; i < n; i++) {\r\n     Transactions.createTransaction(function (err, transaction) {\r\n@@ -95,14 +94,12 @@\n       } else {\r\n         transactions.push(transaction);\r\n       }\r\n     });\r\n-    \r\n   }\r\n+  return transactions;\r\n+};\r\n \r\n-\r\n-\r\n-\r\n //Create a single transaction\r\n Transactions.create = function (transaction, callback) {\r\n   transaction.save(function (err, transaction) {\r\n     if (err) {\r\n"
                },
                {
                    "date": 1669639219754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,17 +87,16 @@\n \r\n Transactions.createTransactions = function (n) {\r\n   var transactions = [];\r\n   for (var i = 0; i < n; i++) {\r\n-    Transactions.createTransaction(function (err, transaction) {\r\n+    Transactions.create(function (err, transaction) {\r\n       if (err) {\r\n         console.log(err);\r\n       } else {\r\n         transactions.push(transaction);\r\n       }\r\n     });\r\n   }\r\n-  return transactions;\r\n };\r\n \r\n //Create a single transaction\r\n Transactions.create = function (transaction, callback) {\r\n"
                },
                {
                    "date": 1669639286361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,13 +98,12 @@\n   }\r\n };\r\n \r\n //Create a single transaction\r\n-Transactions.create = function (transaction, callback) {\r\n-  transaction.save(function (err, transaction) {\r\n-    if (err) {\r\n-      callback(err, null);\r\n-    } else {\r\n-      callback(null, transaction);\r\n-    }\r\n-  });\r\n+Transactions.create = async function (transaction, callback) {\r\n+  try {\r\n+    transaction = await transaction.save();\r\n+    callback(null, transaction);\r\n+  } catch (err) {\r\n+    callback(err, null);\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1669639316811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n       } else {\r\n         transactions.push(transaction);\r\n       }\r\n     });\r\n+    console.log(transactions);\r\n   }\r\n };\r\n \r\n //Create a single transaction\r\n"
                },
                {
                    "date": 1669639328950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n       } else {\r\n         transactions.push(transaction);\r\n       }\r\n     });\r\n-    console.log(transactions);\r\n   }\r\n+  console.log(transactions);\r\n };\r\n \r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n"
                },
                {
                    "date": 1669639358390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,10 @@\n \r\n Transactions.createTransactions = function (n) {\r\n   var transactions = [];\r\n   for (var i = 0; i < n; i++) {\r\n-    Transactions.create(function (err, transaction) {\r\n+    let tmpTransaction = newTransaction();\r\n+    Transactions.create(function (err, tmpTransaction) {\r\n       if (err) {\r\n         console.log(err);\r\n       } else {\r\n         transactions.push(transaction);\r\n"
                },
                {
                    "date": 1669639451342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n   try {\r\n     transaction = await transaction.save();\r\n+    console.log(\"Transaction created\");\r\n     callback(null, transaction);\r\n   } catch (err) {\r\n     callback(err, null);\r\n   }\r\n"
                },
                {
                    "date": 1669639474626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,7 +106,8 @@\n     transaction = await transaction.save();\r\n     console.log(\"Transaction created\");\r\n     callback(null, transaction);\r\n   } catch (err) {\r\n+    console.log(err);\r\n     callback(err, null);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1669639669927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n var mongoose = require(\"mongoose\");\r\n-var transaction = require(\"../models/transaction\");\r\n+var Transaction = require(\"../models/transaction\");\r\n var Transactions = module.exports;\r\n \r\n var categorias = [\r\n   \"Alimentação\",\r\n@@ -102,9 +102,10 @@\n \r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n   try {\r\n-    transaction = await transaction.save();\r\n+    var trans = new transaction(transaction);\r\n+\r\n     console.log(\"Transaction created\");\r\n     callback(null, transaction);\r\n   } catch (err) {\r\n     console.log(err);\r\n"
                },
                {
                    "date": 1669639704128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,10 @@\n \r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n   try {\r\n-    var trans = new transaction(transaction);\r\n-\r\n+    var trans = new Transaction(transaction);\r\n+    trans = await trans.save();\r\n     console.log(\"Transaction created\");\r\n     callback(null, transaction);\r\n   } catch (err) {\r\n     console.log(err);\r\n"
                },
                {
                    "date": 1669639776404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,10 @@\n \r\n Transactions.createTransactions = function (n) {\r\n   var transactions = [];\r\n   for (var i = 0; i < n; i++) {\r\n-    let tmpTransaction = newTransaction();\r\n-    Transactions.create(function (err, tmpTransaction) {\r\n+    var transaction = newTransaction();\r\n+    Transactions.create(function (err, transaction) {\r\n       if (err) {\r\n         console.log(err);\r\n       } else {\r\n         transactions.push(transaction);\r\n"
                },
                {
                    "date": 1669639822523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,18 +87,19 @@\n \r\n Transactions.createTransactions = function (n) {\r\n   var transactions = [];\r\n   for (var i = 0; i < n; i++) {\r\n-    var transaction = newTransaction();\r\n-    Transactions.create(function (err, transaction) {\r\n-      if (err) {\r\n-        console.log(err);\r\n-      } else {\r\n-        transactions.push(transaction);\r\n-      }\r\n-    });\r\n+    var tmpTransaction = newTransaction();\r\n+    transactions.push(tmpTransaction);\r\n   }\r\n-  console.log(transactions);\r\n+\r\n+  Transaction.insertMany(transactions, function (err, docs) {\r\n+    if (err) {\r\n+      console.log(err);\r\n+    } else {\r\n+      console.log(\"Transactions inserted to DB: \" + docs);\r\n+    }\r\n+  });\r\n };\r\n \r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n"
                },
                {
                    "date": 1669640324283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,24 +84,8 @@\n   console.log(transaction);\r\n   return transaction;\r\n }\r\n \r\n-Transactions.createTransactions = function (n) {\r\n-  var transactions = [];\r\n-  for (var i = 0; i < n; i++) {\r\n-    var tmpTransaction = newTransaction();\r\n-    transactions.push(tmpTransaction);\r\n-  }\r\n-\r\n-  Transaction.insertMany(transactions, function (err, docs) {\r\n-    if (err) {\r\n-      console.log(err);\r\n-    } else {\r\n-      console.log(\"Transactions inserted to DB: \" + docs);\r\n-    }\r\n-  });\r\n-};\r\n-\r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n   try {\r\n     var trans = new Transaction(transaction);\r\n"
                },
                {
                    "date": 1669642096501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-function newTransaction() {\r\n+Transacions.newTransaction = function () {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n@@ -82,9 +82,9 @@\n     currency: tmpMoeda,\r\n   };\r\n   console.log(transaction);\r\n   return transaction;\r\n-}\r\n+};\r\n \r\n //Create a single transaction\r\n Transactions.create = async function (transaction, callback) {\r\n   try {\r\n"
                },
                {
                    "date": 1669642106113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-Transacions.newTransaction = function () {\r\n+Transactions.newTransaction = function () {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n"
                },
                {
                    "date": 1669642162560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,17 +71,17 @@\n       emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n     tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n   }\r\n \r\n-  var transaction = {\r\n+  var transaction = New Transaction({\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: tmpDescricao,\r\n     value: tmpValor,\r\n     category: tmpCategoria,\r\n     currency: tmpMoeda,\r\n-  };\r\n+  });\r\n   console.log(transaction);\r\n   return transaction;\r\n };\r\n \r\n"
                },
                {
                    "date": 1669642172928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       emissoresCrédito[Math.floor(Math.random() * emissoresCrédito.length)];\r\n     tmpDescricao = \"Recebimento de \" + tmpEmissor;\r\n   }\r\n \r\n-  var transaction = New Transaction({\r\n+  var transaction = new Transaction({\r\n     _id: new mongoose.Types.ObjectId(),\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: tmpDescricao,\r\n"
                },
                {
                    "date": 1669645965810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n var moeda = [\"EUR\", \"USD\"];\r\n \r\n //Gerar uma transação aleatória\r\n-Transactions.newTransaction = function () {\r\n+Transactions.newTransaction = function (statementID) {\r\n   //Random date and time between now and yesterday\r\n   var tmpCategoria;\r\n   var tmpEmissor = \"\";\r\n   var tmpDescricao = \"\";\r\n"
                },
                {
                    "date": 1669645976879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,9 @@\n     description: tmpDescricao,\r\n     value: tmpValor,\r\n     category: tmpCategoria,\r\n     currency: tmpMoeda,\r\n+    statement: statementID,\r\n   });\r\n   console.log(transaction);\r\n   return transaction;\r\n };\r\n"
                },
                {
                    "date": 1669646163685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n   }\r\n \r\n   var transaction = new Transaction({\r\n     _id: new mongoose.Types.ObjectId(),\r\n+    tipo: tmpTipo,\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: tmpDescricao,\r\n     value: tmpValor,\r\n"
                },
                {
                    "date": 1669646187311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   }\r\n \r\n   var transaction = new Transaction({\r\n     _id: new mongoose.Types.ObjectId(),\r\n-    tipo: tmpTipo,\r\n+    type: tmpTipo,\r\n     date: randomDate,\r\n     issuer: tmpEmissor,\r\n     description: tmpDescricao,\r\n     value: tmpValor,\r\n"
                },
                {
                    "date": 1669646357946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   );\r\n \r\n   var tmpTipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n   if (tmpTipo == \"Débito\") {\r\n-    tmpValor = Math.floor(Math.random() * 500) + 1;\r\n+    tmpValor = Math.floor(Math.random() * 900) + 1;\r\n     tmpCategoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n     tmpEmissor =\r\n       emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n     tmpDescricao = tmpEmissor + \" - \" + tmpCategoria;\r\n"
                },
                {
                    "date": 1669646508151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var Transaction = require(\"../models/transaction\");\r\n var Transactions = module.exports;\r\n \r\n var categorias = [\r\n-  \"Alimentação\",\r\n+  \"Compras\",\r\n   \"Transportes\",\r\n   \"Lazer\",\r\n   \"Saúde\",\r\n   \"Educação\",\r\n"
                }
            ],
            "date": 1669637017288,
            "name": "Commit-0",
            "content": "var mongoose = require(\"mongoose\");\r\nvar transaction = require(\"../models/transaction\");\r\nvar Transactions = module.exports;\r\n\r\nvar categorias = [\r\n  \"Salário\",\r\n  \"Alimentação\",\r\n  \"Transportes\",\r\n  \"Lazer\",\r\n  \"Saúde\",\r\n  \"Educação\",\r\n  \"Outros\",\r\n];\r\nvar tipos = [\"Débito\", \"Crédito\"];\r\n\r\nvar emissoresDébito = [\r\n  \"Pingo Doce\",\r\n  \"Continente\",\r\n  \"Worten\",\r\n  \"Cinemas\",\r\n  \"PSP\",\r\n  \"Finanças\",\r\n  \"McDonalds\",\r\n  \"Burger King\",\r\n  \"PizzaHut\",\r\n  \"FitnessUp\",\r\n  \"Fnac\",\r\n  \"Universidade do Minho\",\r\n  \"Levantamento ATM\",\r\n];\r\n\r\nvar emissoresCrédito = [\r\n  \"Salário\",\r\n  \"Prémio\",\r\n  \"Reembolso\",\r\n  \"Transferência de João\",\r\n  \"Transferência de Maria\",\r\n  \"Transferência de José\",\r\n  \"Transferência de Ana\",\r\n  \"Transferência de Pedro\",\r\n  \"Transferência de Sofia\",\r\n];\r\n\r\nvar moeda = [\"EUR\", \"USD\"];\r\n\r\n//Gerar uma transação aleatória\r\nfunction newTransaction() {\r\n  //random date and time between now and tomorrow\r\n  var data = new Date(\r\n    new Date().getTime() + Math.random() * 24 * 60 * 60 * 1000\r\n  );\r\n  var categoria = categorias[Math.floor(Math.random() * categorias.length)];\r\n  var emissor;\r\n  if (categoria == \"Salário\") {\r\n    emissor = \"Empregador\";\r\n    tipo = \"Crédito\";\r\n  } else {\r\n    emissor =\r\n      emissoresDébito[Math.floor(Math.random() * emissoresDébito.length)];\r\n    tipo = tipos[Math.floor(Math.random() * tipos.length)];\r\n  }\r\n  var valor = 0;\r\n  if (tipo == \"Crédito\") {\r\n    descricao = \"Recebimento de \" + categoria;\r\n    valor = Math.floor(Math.random() * 1000);\r\n  } else {\r\n    descricao = \"Pagamento de \" + categoria;\r\n    valor = Math.floor(Math.random() * 800);\r\n  }\r\n\r\n  var moeda = moeda[Math.floor(Math.random() * moeda.length)];\r\n\r\n  var transaction = {\r\n    _id: new mongoose.Types.ObjectId(),\r\n    date: data,\r\n    issuer: emissor,\r\n    description: descricao,\r\n    value: valor,\r\n    category: categoria,\r\n    currency: moeda,\r\n  };\r\n  console.log(transaction);\r\n  return transaction;\r\n}\r\n\r\nTransactions.createTransactions = async function (n) {\r\n  var transaction = newTransaction();\r\n  try {\r\n    await transaction.save();\r\n    console.log(\"Transaction created\");\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"
        }
    ]
}