{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1667061766661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1667061775167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n var passport = require('passport');\n const localStrategy = require('passport-local').Strategy;\n const crypto = require('crypto');\n const session = require('express-session');\n+const MySQLStore = require('express-mysql-session')(session);\n const { application } = require('express');\n //require('./config/passport')(passport);\n \n //DB CONNECTION\n"
                },
                {
                    "date": 1667061871093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,11 +55,38 @@\n const localStrategy = require('passport-local').Strategy;\n const crypto = require('crypto');\n const session = require('express-session');\n const MySQLStore = require('express-mysql-session')(session);\n+\n const { application } = require('express');\n //require('./config/passport')(passport);\n \n+\n+\n+\n+//Middleware\n+app.use(session({\n+    key: 'session_cookie_name',\n+    secret: 'session_cookie_secret',\n+    store: new MySQLStore({\n+        host: 'localhost',\n+        port: 3306,\n+        user: 'localUser',\n+        database: 'wingman',\n+    }),\n+    resave: false,\n+    saveUninitialized: false,\n+    cookie: {\n+        maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n+    }\n+        \n+}))\n+\n+\n+\n+\n+\n+\n //DB CONNECTION\n \n \n \n"
                },
                {
                    "date": 1667062312932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,17 +62,29 @@\n \n \n \n \n-//Middleware\n+/* \n+Middleware\n+\n+Para guardar informação entre pedidos HTTP e sessões. \n+Quando um dado user visita o nosso site, este cria uma nova sessão para o user e atribui-lhe uma cookie.\n+Da próxima vez que o ser vai ao site, a cookie é verificada e a session id (que está guardara na cookie) é \n+obtida e é feita uma pesquisa na session store. Session store é um sitio onde todas as sessions são guardadas.\n+Aqui estamos um sítio onde podemos guardar toda a informação respectiva à sessão. Assim, estamos \n+\n+*/\n+\n+\n app.use(session({\n     key: 'session_cookie_name',\n     secret: 'session_cookie_secret',\n     store: new MySQLStore({\n         host: 'localhost',\n         port: 3306,\n-        user: 'localUser',\n-        database: 'wingman',\n+        user: 'root',\n+        password: 'password',\n+        database: 'cookie_user',\n     }),\n     resave: false,\n     saveUninitialized: false,\n     cookie: {\n@@ -83,10 +95,8 @@\n \n \n \n \n-\n-\n //DB CONNECTION\n \n \n \n"
                },
                {
                    "date": 1667062388952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,14 +56,13 @@\n const crypto = require('crypto');\n const session = require('express-session');\n const MySQLStore = require('express-mysql-session')(session);\n \n-const { application } = require('express');\n-//require('./config/passport')(passport);\n \n \n \n \n+\n /* \n Middleware\n \n Para guardar informação entre pedidos HTTP e sessões. \n@@ -93,10 +92,15 @@\n         \n }))\n \n \n+app.use(passport.initialize());\n+app.use(passport.session());\n \n \n+\n+\n+\n //DB CONNECTION\n \n \n \n"
                },
                {
                    "date": 1667062971835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,28 @@\n var express = require('express');\n var app = express();\n-\n //body parser for post requests\n var bodyParser = require('body-parser')\n-app.use(bodyParser.json({limit: '50mb'}));         // to support JSON-encoded bodies\n-app.use(bodyParser.urlencoded({\n-    limit : '50mb',\n-    // to support URL-encoded bodies\n-    extended: true,\n-    parameterLimit:50000\n-}));\n-\n var cors = require('cors')\n-const corsOpts = {\n-    origin: '*',\n-    credentials: true,\n-    methods: ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS'],\n-    allowedHeaders: ['Accept', 'Authorization', 'Cache-Control', 'Content-Type', 'DNT', 'If-Modified-Since', 'Keep-Alive', 'Origin', 'User-Agent', 'X-Requested-With', 'Content-Length']\n-}\n-app.use(cors(corsOpts))\n-app.options('*', cors(corsOpts))\n-\n //helmet (sets various HTTP headers to help protect the app)\n var helmet = require('helmet')\n+var path = require('path');\n+var logger = require('morgan');\n+var cookieParser = require('cookie-parser');\n+var dataBases = require('./config/database');\n+var passport = require('passport');\n+const localStrategy = require('passport-local').Strategy;\n+const crypto = require('crypto');\n+const session = require('express-session');\n+const MySQLStore = require('express-mysql-session')(session);\n+\n+\n+\n+app.use(express.static(path.join(__dirname, 'public')));\n+app.use(logger('dev'));\n+app.use(express.json());\n+app.use(cookieParser());\n+\n app.use(helmet({\n     //HSTS recommended config\n     hsts: {\n         maxAge: 31536000,\n@@ -36,33 +35,21 @@\n         }\n     }\n }))\n \n-var path = require('path');\n-var logger = require('morgan');\n-var cookieParser = require('cookie-parser');\n-var dataBases = require('./config/database');\n \n \n-app.use(express.static(path.join(__dirname, 'public')));\n \n+const corsOpts = {\n+    origin: '*',\n+    credentials: true,\n+    methods: ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS'],\n+    allowedHeaders: ['Accept', 'Authorization', 'Cache-Control', 'Content-Type', 'DNT', 'If-Modified-Since', 'Keep-Alive', 'Origin', 'User-Agent', 'X-Requested-With', 'Content-Length']\n+}\n+app.use(cors(corsOpts))\n+app.options('*', cors(corsOpts))\n \n-app.use(logger('dev'));\n-app.use(express.json());\n-app.use(cookieParser());\n \n-\n-var passport = require('passport');\n-const localStrategy = require('passport-local').Strategy;\n-const crypto = require('crypto');\n-const session = require('express-session');\n-const MySQLStore = require('express-mysql-session')(session);\n-\n-\n-\n-\n-\n-\n /* \n Middleware\n \n Para guardar informação entre pedidos HTTP e sessões. \n@@ -72,9 +59,8 @@\n Aqui estamos um sítio onde podemos guardar toda a informação respectiva à sessão. Assim, estamos \n \n */\n \n-\n app.use(session({\n     key: 'session_cookie_name',\n     secret: 'session_cookie_secret',\n     store: new MySQLStore({\n@@ -91,20 +77,40 @@\n     }\n         \n }))\n \n+/* \n+Inicializar o passport cada vez que uma rota é chamada\n+*/\n+app.use(passport.initialize());\n \n-app.use(passport.initialize());\n+/* Funciona como middleware para alterar o objecto request e alterar o \"user\" value que é actualmente o session id (através do client cookie) */\n app.use(passport.session());\n \n+/* Middleware responsável por realizar o parsing dos bodys de pedidos num middlware antes de os gerirmos */\n \n+app.use(bodyParser.json({limit: '50mb'}));         // to support JSON-encoded bodies\n+app.use(bodyParser.urlencoded({\n+    limit : '50mb',\n+    // to support URL-encoded bodies\n+    extended: true,\n+    parameterLimit:50000\n+}));\n \n+/* É usado para servir ficheiros estáticos que se encontram na pasta public (css, imgs) */\n \n \n+app.use(express.static('public'))\n+\n+/* Para definir que estamos a usar ejs com o nosso view engine.  */\n+app.set(\"view engine\", \"ejs\");\n+\n //DB CONNECTION\n \n \n \n+\n+\n // Routes\n app.use('/', require('./routes/index'));\n \n \n"
                },
                {
                    "date": 1667063068005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,15 @@\n app.set(\"view engine\", \"ejs\");\n \n //DB CONNECTION\n \n+dataBases.getConnection(function(err, connection) {\n+    if (err) {\n+        console.log(err);\n+    } else {\n+        console.log(\"Connected to database\");\n+    }\n+});\n \n \n \n \n"
                },
                {
                    "date": 1667063096219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n \n \n \n \n+\n // Routes\n app.use('/', require('./routes/index'));\n \n \n"
                },
                {
                    "date": 1667063141144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,12 +113,12 @@\n         console.log(\"Connected to database\");\n     }\n });\n \n+ \n \n \n \n-\n // Routes\n app.use('/', require('./routes/index'));\n \n \n"
                },
                {
                    "date": 1667065086675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,15 +62,9 @@\n \n app.use(session({\n     key: 'session_cookie_name',\n     secret: 'session_cookie_secret',\n-    store: new MySQLStore({\n-        host: 'localhost',\n-        port: 3306,\n-        user: 'root',\n-        password: 'password',\n-        database: 'cookie_user',\n-    }),\n+    store: dataBases.sessionStore, \n     resave: false,\n     saveUninitialized: false,\n     cookie: {\n         maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n"
                },
                {
                    "date": 1667065205500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,13 +113,13 @@\n \n \n // Routes\n app.use('/', require('./routes/index'));\n+app.use('/users', require('./routes/users'));\n \n \n \n \n-\n app.use(function (req, res, next) {\n     var err = new Error('Not Found');\n     err.status = 404;\n     next(err);\n"
                },
                {
                    "date": 1667065473170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n app.use(express.static('public'))\n \n /* Para definir que estamos a usar ejs com o nosso view engine.  */\n-app.set(\"view engine\", \"ejs\");\n+app.set(\"view engine\", \"pug\");\n \n //DB CONNECTION\n \n dataBases.getConnection(function(err, connection) {\n"
                }
            ],
            "date": 1667061766661,
            "name": "Commit-0",
            "content": "var express = require('express');\nvar app = express();\n\n//body parser for post requests\nvar bodyParser = require('body-parser')\napp.use(bodyParser.json({limit: '50mb'}));         // to support JSON-encoded bodies\napp.use(bodyParser.urlencoded({\n    limit : '50mb',\n    // to support URL-encoded bodies\n    extended: true,\n    parameterLimit:50000\n}));\n\nvar cors = require('cors')\nconst corsOpts = {\n    origin: '*',\n    credentials: true,\n    methods: ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Accept', 'Authorization', 'Cache-Control', 'Content-Type', 'DNT', 'If-Modified-Since', 'Keep-Alive', 'Origin', 'User-Agent', 'X-Requested-With', 'Content-Length']\n}\napp.use(cors(corsOpts))\napp.options('*', cors(corsOpts))\n\n//helmet (sets various HTTP headers to help protect the app)\nvar helmet = require('helmet')\napp.use(helmet({\n    //HSTS recommended config\n    hsts: {\n        maxAge: 31536000,\n        includeSubDomains: true,\n        preload: true\n    },\n    contentSecurityPolicy: {\n        directives: {\n            defaultSrc: [\"'none'\"]\n        }\n    }\n}))\n\nvar path = require('path');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar dataBases = require('./config/database');\n\n\napp.use(express.static(path.join(__dirname, 'public')));\n\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(cookieParser());\n\n\nvar passport = require('passport');\nconst localStrategy = require('passport-local').Strategy;\nconst crypto = require('crypto');\nconst session = require('express-session');\nconst { application } = require('express');\n//require('./config/passport')(passport);\n\n//DB CONNECTION\n\n\n\n// Routes\napp.use('/', require('./routes/index'));\n\n\n\n\n\napp.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n    res.status(err.status || 500).send(`${err.message}`);\n    \n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}.`);\n});\n\n\nmodule.exports = app;\n"
        }
    ]
}